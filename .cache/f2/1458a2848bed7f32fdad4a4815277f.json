{"id":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","dependencies":[{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\package.json","includedInParent":true,"mtime":1695872748353},{"name":"../math/Vector3","loc":{"line":1,"column":25,"index":25},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\utils\\csgMeasurements.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Vector3.js"}],"generated":{"js":"const Vector3D = require('../math/Vector3')\n\n/**\n   * Returns an array of Vector3D, providing minimum coordinates and maximum coordinates\n   * of this solid.\n   * @returns {Vector3D[]}\n   * @example\n   * let bounds = A.getBounds()\n   * let minX = bounds[0].x\n   */\nconst bounds = function (csg) {\n  if (!csg.cachedBoundingBox) {\n    let minpoint = new Vector3D(0, 0, 0)\n    let maxpoint = new Vector3D(0, 0, 0)\n    let polygons = csg.polygons\n    let numpolygons = polygons.length\n    for (let i = 0; i < numpolygons; i++) {\n      let polygon = polygons[i]\n      let bounds = polygon.boundingBox()\n      if (i === 0) {\n        minpoint = bounds[0]\n        maxpoint = bounds[1]\n      } else {\n        minpoint = minpoint.min(bounds[0])\n        maxpoint = maxpoint.max(bounds[1])\n      }\n    }\n      // FIXME: not ideal, we are mutating the input, we need to move some of it out\n    csg.cachedBoundingBox = [minpoint, maxpoint]\n  }\n  return csg.cachedBoundingBox\n}\n\nconst volume = function (csg) {\n  let result = csg.toTriangles().map(function (triPoly) {\n    return triPoly.getTetraFeatures(['volume'])\n  })\n  console.log('volume', result)\n}\n\nconst area = function (csg) {\n  let result = csg.toTriangles().map(function (triPoly) {\n    return triPoly.getTetraFeatures(['area'])\n  })\n  console.log('area', result)\n}\n\nmodule.exports = {bounds, volume, area}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}}],"sources":{"node_modules/@jscad/csg/src/core/utils/csgMeasurements.js":"const Vector3D = require('../math/Vector3')\n\n/**\n   * Returns an array of Vector3D, providing minimum coordinates and maximum coordinates\n   * of this solid.\n   * @returns {Vector3D[]}\n   * @example\n   * let bounds = A.getBounds()\n   * let minX = bounds[0].x\n   */\nconst bounds = function (csg) {\n  if (!csg.cachedBoundingBox) {\n    let minpoint = new Vector3D(0, 0, 0)\n    let maxpoint = new Vector3D(0, 0, 0)\n    let polygons = csg.polygons\n    let numpolygons = polygons.length\n    for (let i = 0; i < numpolygons; i++) {\n      let polygon = polygons[i]\n      let bounds = polygon.boundingBox()\n      if (i === 0) {\n        minpoint = bounds[0]\n        maxpoint = bounds[1]\n      } else {\n        minpoint = minpoint.min(bounds[0])\n        maxpoint = maxpoint.max(bounds[1])\n      }\n    }\n      // FIXME: not ideal, we are mutating the input, we need to move some of it out\n    csg.cachedBoundingBox = [minpoint, maxpoint]\n  }\n  return csg.cachedBoundingBox\n}\n\nconst volume = function (csg) {\n  let result = csg.toTriangles().map(function (triPoly) {\n    return triPoly.getTetraFeatures(['volume'])\n  })\n  console.log('volume', result)\n}\n\nconst area = function (csg) {\n  let result = csg.toTriangles().map(function (triPoly) {\n    return triPoly.getTetraFeatures(['area'])\n  })\n  console.log('area', result)\n}\n\nmodule.exports = {bounds, volume, area}\n"},"lineCount":49}},"error":null,"hash":"8b4b67607e08e0f8084fc5e63b619114","cacheData":{"env":{}}}