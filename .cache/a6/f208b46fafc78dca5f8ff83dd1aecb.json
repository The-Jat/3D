{"id":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","dependencies":[{"name":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\package.json","includedInParent":true,"mtime":1695809278048},{"name":"./clone","loc":{"line":2,"column":22,"index":23},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\maths\\mat4\\fromTaitBryanRotation.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\maths\\mat4\\clone.js"}],"generated":{"js":"\nconst clone = require('./clone')\n\n/**\n * Creates a matrix from the given Tait–Bryan angles.\n * Tait-Bryan Euler angle convention using active, intrinsic rotations around the axes in the order z-y-x.\n * @see https://en.wikipedia.org/wiki/Euler_angles\n * @param {Number} yaw - Z rotation in radians\n * @param {Number} pitch - Y rotation in radians\n * @param {Number} roll - X rotation in radians\n * @returns {mat4} a new matrix\n * @alias module:modeling/maths/mat4.fromTaitBryanRotation\n * @example\n * let matrix = fromTaitBryanRotation(Math.PI / 2, 0, Math.PI)\n */\nconst fromTaitBryanRotation = (yaw, pitch, roll) => {\n  // precompute sines and cosines of Euler angles\n  const sy = Math.sin(yaw)\n  const cy = Math.cos(yaw)\n  const sp = Math.sin(pitch)\n  const cp = Math.cos(pitch)\n  const sr = Math.sin(roll)\n  const cr = Math.cos(roll)\n\n  // create and populate rotation matrix\n  // left-hand-rule rotation\n  // const els = [\n  //  cp*cy, sr*sp*cy - cr*sy, sr*sy + cr*sp*cy, 0,\n  //  cp*sy, cr*cy + sr*sp*sy, cr*sp*sy - sr*cy, 0,\n  //  -sp, sr*cp, cr*cp, 0,\n  //  0, 0, 0, 1\n  // ]\n  // right-hand-rule rotation\n  const els = [\n    cp * cy, cp * sy, -sp, 0,\n    sr * sp * cy - cr * sy, cr * cy + sr * sp * sy, sr * cp, 0,\n    sr * sy + cr * sp * cy, cr * sp * sy - sr * cy, cr * cp, 0,\n    0, 0, 0, 1\n  ]\n  return clone(els)\n}\n\nmodule.exports = fromTaitBryanRotation\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}}],"sources":{"node_modules/@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js":"\nconst clone = require('./clone')\n\n/**\n * Creates a matrix from the given Tait–Bryan angles.\n * Tait-Bryan Euler angle convention using active, intrinsic rotations around the axes in the order z-y-x.\n * @see https://en.wikipedia.org/wiki/Euler_angles\n * @param {Number} yaw - Z rotation in radians\n * @param {Number} pitch - Y rotation in radians\n * @param {Number} roll - X rotation in radians\n * @returns {mat4} a new matrix\n * @alias module:modeling/maths/mat4.fromTaitBryanRotation\n * @example\n * let matrix = fromTaitBryanRotation(Math.PI / 2, 0, Math.PI)\n */\nconst fromTaitBryanRotation = (yaw, pitch, roll) => {\n  // precompute sines and cosines of Euler angles\n  const sy = Math.sin(yaw)\n  const cy = Math.cos(yaw)\n  const sp = Math.sin(pitch)\n  const cp = Math.cos(pitch)\n  const sr = Math.sin(roll)\n  const cr = Math.cos(roll)\n\n  // create and populate rotation matrix\n  // left-hand-rule rotation\n  // const els = [\n  //  cp*cy, sr*sp*cy - cr*sy, sr*sy + cr*sp*cy, 0,\n  //  cp*sy, cr*cy + sr*sp*sy, cr*sp*sy - sr*cy, 0,\n  //  -sp, sr*cp, cr*cp, 0,\n  //  0, 0, 0, 1\n  // ]\n  // right-hand-rule rotation\n  const els = [\n    cp * cy, cp * sy, -sp, 0,\n    sr * sp * cy - cr * sy, cr * cy + sr * sp * sy, sr * cp, 0,\n    sr * sy + cr * sp * cy, cr * sp * sy - sr * cy, cr * cp, 0,\n    0, 0, 0, 1\n  ]\n  return clone(els)\n}\n\nmodule.exports = fromTaitBryanRotation\n"},"lineCount":44}},"error":null,"hash":"04b2b1e02ff96981a51a632618bd1119","cacheData":{"env":{}}}