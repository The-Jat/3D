{"id":"node_modules/@jscad/csg/src/core/math/Path2.js","dependencies":[{"name":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\package.json","includedInParent":true,"mtime":1695872748353},{"name":"./Vector2","loc":{"line":1,"column":25,"index":25},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Path2.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Vector2.js"},{"name":"../constants","loc":{"line":4,"column":38,"index":248},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Path2.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\constants.js"},{"name":"../../api/optionParsers","loc":{"line":3,"column":97,"index":183},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Path2.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\optionParsers.js"},{"name":"./Vertex2","loc":{"line":5,"column":23,"index":287},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Path2.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Vertex2.js"},{"name":"./Side","loc":{"line":6,"column":21,"index":321},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Path2.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Side.js"},{"name":"../CAG","loc":{"line":224,"column":24,"index":7636},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Path2.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAG.js"}],"generated":{"js":"const Vector2D = require('./Vector2')\nconst {EPS, angleEPS} = require('../constants')\nconst {parseOptionAs2DVector, parseOptionAsFloat, parseOptionAsInt, parseOptionAsBool} = require('../../api/optionParsers')\nconst {defaultResolution2D} = require('../constants')\nconst Vertex = require('./Vertex2')\nconst Side = require('./Side')\n\n/** Class Path2D\n * Represents a series of points, connected by infinitely thin lines.\n * A path can be open or closed, i.e. additional line between first and last points.\n * The difference between Path2D and CAG is that a path is a 'thin' line, whereas a CAG is an enclosed area.\n * @constructor\n * @param {Vector2D[]} [points=[]] - list of points\n * @param {boolean} [closed=false] - closer of path\n *\n * @example\n * new CSG.Path2D()\n * new CSG.Path2D([[10,10], [-10,10], [-10,-10], [10,-10]], true) // closed\n */\nconst Path2D = function (points, closed) {\n  closed = !!closed\n  points = points || []\n    // re-parse the points into Vector2D\n    // and remove any duplicate points\n  let prevpoint = null\n  if (closed && (points.length > 0)) {\n    prevpoint = new Vector2D(points[points.length - 1])\n  }\n  let newpoints = []\n  points.map(function (point) {\n    point = new Vector2D(point)\n    let skip = false\n    if (prevpoint !== null) {\n      let distance = point.distanceTo(prevpoint)\n      skip = distance < EPS\n    }\n    if (!skip) newpoints.push(point)\n    prevpoint = point\n  })\n  this.points = newpoints\n  this.closed = closed\n}\n\n/** Construct an arc.\n * @param {Object} [options] - options for construction\n * @param {Vector2D} [options.center=[0,0]] - center of circle\n * @param {Number} [options.radius=1] - radius of circle\n * @param {Number} [options.startangle=0] - starting angle of the arc, in degrees\n * @param {Number} [options.endangle=360] - ending angle of the arc, in degrees\n * @param {Number} [options.resolution=defaultResolution2D] - number of sides per 360 rotation\n * @param {Boolean} [options.maketangent=false] - adds line segments at both ends of the arc to ensure that the gradients at the edges are tangent\n * @returns {Path2D} new Path2D object (not closed)\n *\n * @example\n * let path = CSG.Path2D.arc({\n *   center: [5, 5],\n *   radius: 10,\n *   startangle: 90,\n *   endangle: 180,\n *   resolution: 36,\n *   maketangent: true\n * });\n */\nPath2D.arc = function (options) {\n  let center = parseOptionAs2DVector(options, 'center', 0)\n  let radius = parseOptionAsFloat(options, 'radius', 1)\n  let startangle = parseOptionAsFloat(options, 'startangle', 0)\n  let endangle = parseOptionAsFloat(options, 'endangle', 360)\n  let resolution = parseOptionAsInt(options, 'resolution', defaultResolution2D)\n  let maketangent = parseOptionAsBool(options, 'maketangent', false)\n    // no need to make multiple turns:\n  while (endangle - startangle >= 720) {\n    endangle -= 360\n  }\n  while (endangle - startangle <= -720) {\n    endangle += 360\n  }\n  let points = []\n  let point\n  let absangledif = Math.abs(endangle - startangle)\n  if (absangledif < angleEPS) {\n    point = Vector2D.fromAngle(startangle / 180.0 * Math.PI).times(radius)\n    points.push(point.plus(center))\n  } else {\n    let numsteps = Math.floor(resolution * absangledif / 360) + 1\n    let edgestepsize = numsteps * 0.5 / absangledif // step size for half a degree\n    if (edgestepsize > 0.25) edgestepsize = 0.25\n    let numstepsMod = maketangent ? (numsteps + 2) : numsteps\n    for (let i = 0; i <= numstepsMod; i++) {\n      let step = i\n      if (maketangent) {\n        step = (i - 1) * (numsteps - 2 * edgestepsize) / numsteps + edgestepsize\n        if (step < 0) step = 0\n        if (step > numsteps) step = numsteps\n      }\n      let angle = startangle + step * (endangle - startangle) / numsteps\n      point = Vector2D.fromAngle(angle / 180.0 * Math.PI).times(radius)\n      points.push(point.plus(center))\n    }\n  }\n  return new Path2D(points, false)\n}\n\nPath2D.prototype = {\n  concat: function (otherpath) {\n    if (this.closed || otherpath.closed) {\n      throw new Error('Paths must not be closed')\n    }\n    let newpoints = this.points.concat(otherpath.points)\n    return new Path2D(newpoints)\n  },\n\n  /**\n   * Get the points that make up the path.\n   * note that this is current internal list of points, not an immutable copy.\n   * @returns {Vector2[]} array of points the make up the path\n   */\n  getPoints: function () {\n    return this.points\n  },\n\n  /**\n   * Append an point to the end of the path.\n   * @param {Vector2D} point - point to append\n   * @returns {Path2D} new Path2D object (not closed)\n   */\n  appendPoint: function (point) {\n    if (this.closed) {\n      throw new Error('Path must not be closed')\n    }\n    point = new Vector2D(point) // cast to Vector2D\n    let newpoints = this.points.concat([point])\n    return new Path2D(newpoints)\n  },\n\n  /**\n   * Append a list of points to the end of the path.\n   * @param {Vector2D[]} points - points to append\n   * @returns {Path2D} new Path2D object (not closed)\n   */\n  appendPoints: function (points) {\n    if (this.closed) {\n      throw new Error('Path must not be closed')\n    }\n    let newpoints = this.points\n    points.forEach(function (point) {\n      newpoints.push(new Vector2D(point)) // cast to Vector2D\n    })\n    return new Path2D(newpoints)\n  },\n\n  close: function () {\n    return new Path2D(this.points, true)\n  },\n\n  /**\n   * Determine if the path is a closed or not.\n   * @returns {Boolean} true when the path is closed, otherwise false\n   */\n  isClosed: function () {\n    return this.closed\n  },\n\n  /**\n   * Determine the overall clockwise or anti-clockwise turn of a path.\n   * See: http://mathworld.wolfram.com/PolygonArea.html\n   * @returns {String} One of ['clockwise', 'counter-clockwise', 'straight'].\n   */\n  getTurn: function () {\n    const points = this.points;\n    let twice_area = 0;\n    let last = points.length - 1;\n    for (let current = 0; current < points.length; last = current++) {\n      twice_area += points[last].x * points[current].y - points[last].y * points[current].x;\n    }\n    if (twice_area > 0) {\n      return 'clockwise';\n    } else if (twice_area < 0) {\n      return 'counter-clockwise';\n    } else {\n      return 'straight';\n    }\n  },\n\n    // Extrude the path by following it with a rectangle (upright, perpendicular to the path direction)\n    // Returns a CSG solid\n    //   width: width of the extrusion, in the z=0 plane\n    //   height: height of the extrusion in the z direction\n    //   resolution: number of segments per 360 degrees for the curve in a corner\n  rectangularExtrude: function (width, height, resolution) {\n    let cag = this.expandToCAG(width / 2, resolution)\n    let result = cag.extrude({\n      offset: [0, 0, height]\n    })\n    return result\n  },\n\n    // Expand the path to a CAG\n    // This traces the path with a circle with radius pathradius\n  expandToCAG: function (pathradius, resolution) {\n    const CAG = require('../CAG') // FIXME: cyclic dependencies CAG => PATH2 => CAG\n    let sides = []\n    let numpoints = this.points.length\n    let startindex = 0\n    if (this.closed && (numpoints > 2)) startindex = -1\n    let prevvertex\n    for (let i = startindex; i < numpoints; i++) {\n      let pointindex = i\n      if (pointindex < 0) pointindex = numpoints - 1\n      let point = this.points[pointindex]\n      let vertex = new Vertex(point)\n      if (i > startindex) {\n        let side = new Side(prevvertex, vertex)\n        sides.push(side)\n      }\n      prevvertex = vertex\n    }\n    let shellcag = CAG.fromSides(sides)\n    let expanded = shellcag.expandedShell(pathradius, resolution)\n    return expanded\n  },\n\n  innerToCAG: function () {\n    const CAG = require('../CAG') // FIXME: cyclic dependencies CAG => PATH2 => CAG\n    if (!this.closed) throw new Error('The path should be closed!')\n    return CAG.fromPoints(this.points)\n  },\n\n  transform: function (matrix4x4) {\n    let newpoints = this.points.map(function (point) {\n      return point.multiply4x4(matrix4x4)\n    })\n    return new Path2D(newpoints, this.closed)\n  },\n\n  /**\n   * Append a Bezier curve to the end of the path, using the control points to transition the curve through start and end points.\n   * <br>\n   * The Bézier curve starts at the last point in the path,\n   * and ends at the last given control point. Other control points are intermediate control points.\n   * <br>\n   * The first control point may be null to ensure a smooth transition occurs. In this case,\n   * the second to last control point of the path is mirrored into the control points of the Bezier curve.\n   * In other words, the trailing gradient of the path matches the new gradient of the curve.\n   * @param {Vector2D[]} controlpoints - list of control points\n   * @param {Object} [options] - options for construction\n   * @param {Number} [options.resolution=defaultResolution2D] - number of sides per 360 rotation\n   * @returns {Path2D} new Path2D object (not closed)\n   *\n   * @example\n   * let p5 = new CSG.Path2D([[10,-20]],false);\n   * p5 = p5.appendBezier([[10,-10],[25,-10],[25,-20]]);\n   * p5 = p5.appendBezier([[25,-30],[40,-30],[40,-20]]);\n   */\n  appendBezier: function (controlpoints, options) {\n    if (arguments.length < 2) {\n      options = {}\n    }\n    if (this.closed) {\n      throw new Error('Path must not be closed')\n    }\n    if (!(controlpoints instanceof Array)) {\n      throw new Error('appendBezier: should pass an array of control points')\n    }\n    if (controlpoints.length < 1) {\n      throw new Error('appendBezier: need at least 1 control point')\n    }\n    if (this.points.length < 1) {\n      throw new Error('appendBezier: path must already contain a point (the endpoint of the path is used as the starting point for the bezier curve)')\n    }\n    let resolution = parseOptionAsInt(options, 'resolution', defaultResolution2D)\n    if (resolution < 4) resolution = 4\n    let factorials = []\n    let controlpointsParsed = []\n    controlpointsParsed.push(this.points[this.points.length - 1]) // start at the previous end point\n    for (let i = 0; i < controlpoints.length; ++i) {\n      let p = controlpoints[i]\n      if (p === null) {\n                // we can pass null as the first control point. In that case a smooth gradient is ensured:\n        if (i !== 0) {\n          throw new Error('appendBezier: null can only be passed as the first control point')\n        }\n        if (controlpoints.length < 2) {\n          throw new Error('appendBezier: null can only be passed if there is at least one more control point')\n        }\n        let lastBezierControlPoint\n        if ('lastBezierControlPoint' in this) {\n          lastBezierControlPoint = this.lastBezierControlPoint\n        } else {\n          if (this.points.length < 2) {\n            throw new Error('appendBezier: null is passed as a control point but this requires a previous bezier curve or at least two points in the existing path')\n          }\n          lastBezierControlPoint = this.points[this.points.length - 2]\n        }\n                // mirror the last bezier control point:\n        p = this.points[this.points.length - 1].times(2).minus(lastBezierControlPoint)\n      } else {\n        p = new Vector2D(p) // cast to Vector2D\n      }\n      controlpointsParsed.push(p)\n    }\n    let bezierOrder = controlpointsParsed.length - 1\n    let fact = 1\n    for (let i = 0; i <= bezierOrder; ++i) {\n      if (i > 0) fact *= i\n      factorials.push(fact)\n    }\n    let binomials = []\n    for (let i = 0; i <= bezierOrder; ++i) {\n      let binomial = factorials[bezierOrder] / (factorials[i] * factorials[bezierOrder - i])\n      binomials.push(binomial)\n    }\n    let getPointForT = function (t) {\n      let t_k = 1 // = pow(t,k)\n      let one_minus_t_n_minus_k = Math.pow(1 - t, bezierOrder) // = pow( 1-t, bezierOrder - k)\n      let inv_1_minus_t = (t !== 1) ? (1 / (1 - t)) : 1\n      let point = new Vector2D(0, 0)\n      for (let k = 0; k <= bezierOrder; ++k) {\n        if (k === bezierOrder) one_minus_t_n_minus_k = 1\n        let bernstein_coefficient = binomials[k] * t_k * one_minus_t_n_minus_k\n        point = point.plus(controlpointsParsed[k].times(bernstein_coefficient))\n        t_k *= t\n        one_minus_t_n_minus_k *= inv_1_minus_t\n      }\n      return point\n    }\n    let newpoints = []\n    let newpoints_t = []\n    let numsteps = bezierOrder + 1\n    for (let i = 0; i < numsteps; ++i) {\n      let t = i / (numsteps - 1)\n      let point = getPointForT(t)\n      newpoints.push(point)\n      newpoints_t.push(t)\n    }\n    // subdivide each segment until the angle at each vertex becomes small enough:\n    let subdivideBase = 1\n    let maxangle = Math.PI * 2 / resolution // segments may have differ no more in angle than this\n    let maxsinangle = Math.sin(maxangle)\n    while (subdivideBase < newpoints.length - 1) {\n      let dir1 = newpoints[subdivideBase].minus(newpoints[subdivideBase - 1]).unit()\n      let dir2 = newpoints[subdivideBase + 1].minus(newpoints[subdivideBase]).unit()\n      let sinangle = dir1.cross(dir2) // this is the sine of the angle\n      if (Math.abs(sinangle) > maxsinangle) {\n                // angle is too big, we need to subdivide\n        let t0 = newpoints_t[subdivideBase - 1]\n        let t1 = newpoints_t[subdivideBase + 1]\n        let t0_new = t0 + (t1 - t0) * 1 / 3\n        let t1_new = t0 + (t1 - t0) * 2 / 3\n        let point0_new = getPointForT(t0_new)\n        let point1_new = getPointForT(t1_new)\n                // remove the point at subdivideBase and replace with 2 new points:\n        newpoints.splice(subdivideBase, 1, point0_new, point1_new)\n        newpoints_t.splice(subdivideBase, 1, t0_new, t1_new)\n                // re - evaluate the angles, starting at the previous junction since it has changed:\n        subdivideBase--\n        if (subdivideBase < 1) subdivideBase = 1\n      } else {\n        ++subdivideBase\n      }\n    }\n        // append to the previous points, but skip the first new point because it is identical to the last point:\n    newpoints = this.points.concat(newpoints.slice(1))\n    let result = new Path2D(newpoints)\n    result.lastBezierControlPoint = controlpointsParsed[controlpointsParsed.length - 2]\n    return result\n  },\n\n  /**\n   * Append an arc to the end of the path.\n   * This implementation follows the SVG arc specs. For the details see\n   * http://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands\n   * @param {Vector2D} endpoint - end point of arc\n   * @param {Object} [options] - options for construction\n   * @param {Number} [options.radius=0] - radius of arc (X and Y), see also xradius and yradius\n   * @param {Number} [options.xradius=0] - X radius of arc, see also radius\n   * @param {Number} [options.yradius=0] - Y radius of arc, see also radius\n   * @param {Number} [options.xaxisrotation=0] -  rotation (in degrees) of the X axis of the arc with respect to the X axis of the coordinate system\n   * @param {Number} [options.resolution=defaultResolution2D] - number of sides per 360 rotation\n   * @param {Boolean} [options.clockwise=false] - draw an arc clockwise with respect to the center point\n   * @param {Boolean} [options.large=false] - draw an arc longer than 180 degrees\n   * @returns {Path2D} new Path2D object (not closed)\n   *\n   * @example\n   * let p1 = new CSG.Path2D([[27.5,-22.96875]],false);\n   * p1 = p1.appendPoint([27.5,-3.28125]);\n   * p1 = p1.appendArc([12.5,-22.96875],{xradius: 15,yradius: -19.6875,xaxisrotation: 0,clockwise: false,large: false});\n   * p1 = p1.close();\n   */\n  appendArc: function (endpoint, options) {\n    let decimals = 100000\n    if (arguments.length < 2) {\n      options = {}\n    }\n    if (this.closed) {\n      throw new Error('Path must not be closed')\n    }\n    if (this.points.length < 1) {\n      throw new Error('appendArc: path must already contain a point (the endpoint of the path is used as the starting point for the arc)')\n    }\n    let resolution = parseOptionAsInt(options, 'resolution', defaultResolution2D)\n    if (resolution < 4) resolution = 4\n    let xradius, yradius\n    if (('xradius' in options) || ('yradius' in options)) {\n      if ('radius' in options) {\n        throw new Error('Should either give an xradius and yradius parameter, or a radius parameter')\n      }\n      xradius = parseOptionAsFloat(options, 'xradius', 0)\n      yradius = parseOptionAsFloat(options, 'yradius', 0)\n    } else {\n      xradius = parseOptionAsFloat(options, 'radius', 0)\n      yradius = xradius\n    }\n    let xaxisrotation = parseOptionAsFloat(options, 'xaxisrotation', 0)\n    let clockwise = parseOptionAsBool(options, 'clockwise', false)\n    let largearc = parseOptionAsBool(options, 'large', false)\n    let startpoint = this.points[this.points.length - 1]\n    endpoint = new Vector2D(endpoint)\n        // round to precision in order to have determinate calculations\n    xradius = Math.round(xradius * decimals) / decimals\n    yradius = Math.round(yradius * decimals) / decimals\n    endpoint = new Vector2D(Math.round(endpoint.x * decimals) / decimals, Math.round(endpoint.y * decimals) / decimals)\n\n    let sweepFlag = !clockwise\n    let newpoints = []\n    if ((xradius === 0) || (yradius === 0)) {\n            // http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes:\n            // If rx = 0 or ry = 0, then treat this as a straight line from (x1, y1) to (x2, y2) and stop\n      newpoints.push(endpoint)\n    } else {\n      xradius = Math.abs(xradius)\n      yradius = Math.abs(yradius)\n\n            // see http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes :\n      let phi = xaxisrotation * Math.PI / 180.0\n      let cosphi = Math.cos(phi)\n      let sinphi = Math.sin(phi)\n      let minushalfdistance = startpoint.minus(endpoint).times(0.5)\n            // F.6.5.1:\n            // round to precision in order to have determinate calculations\n      let x = Math.round((cosphi * minushalfdistance.x + sinphi * minushalfdistance.y) * decimals) / decimals\n      let y = Math.round((-sinphi * minushalfdistance.x + cosphi * minushalfdistance.y) * decimals) / decimals\n      let startTranslated = new Vector2D(x, y)\n            // F.6.6.2:\n      let biglambda = (startTranslated.x * startTranslated.x) / (xradius * xradius) + (startTranslated.y * startTranslated.y) / (yradius * yradius)\n      if (biglambda > 1.0) {\n                // F.6.6.3:\n        let sqrtbiglambda = Math.sqrt(biglambda)\n        xradius *= sqrtbiglambda\n        yradius *= sqrtbiglambda\n                // round to precision in order to have determinate calculations\n        xradius = Math.round(xradius * decimals) / decimals\n        yradius = Math.round(yradius * decimals) / decimals\n      }\n            // F.6.5.2:\n      let multiplier1 = Math.sqrt((xradius * xradius * yradius * yradius - xradius * xradius * startTranslated.y * startTranslated.y - yradius * yradius * startTranslated.x * startTranslated.x) / (xradius * xradius * startTranslated.y * startTranslated.y + yradius * yradius * startTranslated.x * startTranslated.x))\n      if (sweepFlag === largearc) multiplier1 = -multiplier1\n      let centerTranslated = new Vector2D(xradius * startTranslated.y / yradius, -yradius * startTranslated.x / xradius).times(multiplier1)\n            // F.6.5.3:\n      let center = new Vector2D(cosphi * centerTranslated.x - sinphi * centerTranslated.y, sinphi * centerTranslated.x + cosphi * centerTranslated.y).plus((startpoint.plus(endpoint)).times(0.5))\n            // F.6.5.5:\n      let vec1 = new Vector2D((startTranslated.x - centerTranslated.x) / xradius, (startTranslated.y - centerTranslated.y) / yradius)\n      let vec2 = new Vector2D((-startTranslated.x - centerTranslated.x) / xradius, (-startTranslated.y - centerTranslated.y) / yradius)\n      let theta1 = vec1.angleRadians()\n      let theta2 = vec2.angleRadians()\n      let deltatheta = theta2 - theta1\n      deltatheta = deltatheta % (2 * Math.PI)\n      if ((!sweepFlag) && (deltatheta > 0)) {\n        deltatheta -= 2 * Math.PI\n      } else if ((sweepFlag) && (deltatheta < 0)) {\n        deltatheta += 2 * Math.PI\n      }\n\n            // Ok, we have the center point and angle range (from theta1, deltatheta radians) so we can create the ellipse\n      let numsteps = Math.ceil(Math.abs(deltatheta) / (2 * Math.PI) * resolution) + 1\n      if (numsteps < 1) numsteps = 1\n      for (let step = 1; step <= numsteps; step++) {\n        let theta = theta1 + step / numsteps * deltatheta\n        let costheta = Math.cos(theta)\n        let sintheta = Math.sin(theta)\n                // F.6.3.1:\n        let point = new Vector2D(cosphi * xradius * costheta - sinphi * yradius * sintheta, sinphi * xradius * costheta + cosphi * yradius * sintheta).plus(center)\n        newpoints.push(point)\n      }\n    }\n    newpoints = this.points.concat(newpoints)\n    let result = new Path2D(newpoints)\n    return result\n  }\n}\n\nmodule.exports = Path2D\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Path2.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}}],"sources":{"node_modules/@jscad/csg/src/core/math/Path2.js":"const Vector2D = require('./Vector2')\nconst {EPS, angleEPS} = require('../constants')\nconst {parseOptionAs2DVector, parseOptionAsFloat, parseOptionAsInt, parseOptionAsBool} = require('../../api/optionParsers')\nconst {defaultResolution2D} = require('../constants')\nconst Vertex = require('./Vertex2')\nconst Side = require('./Side')\n\n/** Class Path2D\n * Represents a series of points, connected by infinitely thin lines.\n * A path can be open or closed, i.e. additional line between first and last points.\n * The difference between Path2D and CAG is that a path is a 'thin' line, whereas a CAG is an enclosed area.\n * @constructor\n * @param {Vector2D[]} [points=[]] - list of points\n * @param {boolean} [closed=false] - closer of path\n *\n * @example\n * new CSG.Path2D()\n * new CSG.Path2D([[10,10], [-10,10], [-10,-10], [10,-10]], true) // closed\n */\nconst Path2D = function (points, closed) {\n  closed = !!closed\n  points = points || []\n    // re-parse the points into Vector2D\n    // and remove any duplicate points\n  let prevpoint = null\n  if (closed && (points.length > 0)) {\n    prevpoint = new Vector2D(points[points.length - 1])\n  }\n  let newpoints = []\n  points.map(function (point) {\n    point = new Vector2D(point)\n    let skip = false\n    if (prevpoint !== null) {\n      let distance = point.distanceTo(prevpoint)\n      skip = distance < EPS\n    }\n    if (!skip) newpoints.push(point)\n    prevpoint = point\n  })\n  this.points = newpoints\n  this.closed = closed\n}\n\n/** Construct an arc.\n * @param {Object} [options] - options for construction\n * @param {Vector2D} [options.center=[0,0]] - center of circle\n * @param {Number} [options.radius=1] - radius of circle\n * @param {Number} [options.startangle=0] - starting angle of the arc, in degrees\n * @param {Number} [options.endangle=360] - ending angle of the arc, in degrees\n * @param {Number} [options.resolution=defaultResolution2D] - number of sides per 360 rotation\n * @param {Boolean} [options.maketangent=false] - adds line segments at both ends of the arc to ensure that the gradients at the edges are tangent\n * @returns {Path2D} new Path2D object (not closed)\n *\n * @example\n * let path = CSG.Path2D.arc({\n *   center: [5, 5],\n *   radius: 10,\n *   startangle: 90,\n *   endangle: 180,\n *   resolution: 36,\n *   maketangent: true\n * });\n */\nPath2D.arc = function (options) {\n  let center = parseOptionAs2DVector(options, 'center', 0)\n  let radius = parseOptionAsFloat(options, 'radius', 1)\n  let startangle = parseOptionAsFloat(options, 'startangle', 0)\n  let endangle = parseOptionAsFloat(options, 'endangle', 360)\n  let resolution = parseOptionAsInt(options, 'resolution', defaultResolution2D)\n  let maketangent = parseOptionAsBool(options, 'maketangent', false)\n    // no need to make multiple turns:\n  while (endangle - startangle >= 720) {\n    endangle -= 360\n  }\n  while (endangle - startangle <= -720) {\n    endangle += 360\n  }\n  let points = []\n  let point\n  let absangledif = Math.abs(endangle - startangle)\n  if (absangledif < angleEPS) {\n    point = Vector2D.fromAngle(startangle / 180.0 * Math.PI).times(radius)\n    points.push(point.plus(center))\n  } else {\n    let numsteps = Math.floor(resolution * absangledif / 360) + 1\n    let edgestepsize = numsteps * 0.5 / absangledif // step size for half a degree\n    if (edgestepsize > 0.25) edgestepsize = 0.25\n    let numstepsMod = maketangent ? (numsteps + 2) : numsteps\n    for (let i = 0; i <= numstepsMod; i++) {\n      let step = i\n      if (maketangent) {\n        step = (i - 1) * (numsteps - 2 * edgestepsize) / numsteps + edgestepsize\n        if (step < 0) step = 0\n        if (step > numsteps) step = numsteps\n      }\n      let angle = startangle + step * (endangle - startangle) / numsteps\n      point = Vector2D.fromAngle(angle / 180.0 * Math.PI).times(radius)\n      points.push(point.plus(center))\n    }\n  }\n  return new Path2D(points, false)\n}\n\nPath2D.prototype = {\n  concat: function (otherpath) {\n    if (this.closed || otherpath.closed) {\n      throw new Error('Paths must not be closed')\n    }\n    let newpoints = this.points.concat(otherpath.points)\n    return new Path2D(newpoints)\n  },\n\n  /**\n   * Get the points that make up the path.\n   * note that this is current internal list of points, not an immutable copy.\n   * @returns {Vector2[]} array of points the make up the path\n   */\n  getPoints: function () {\n    return this.points\n  },\n\n  /**\n   * Append an point to the end of the path.\n   * @param {Vector2D} point - point to append\n   * @returns {Path2D} new Path2D object (not closed)\n   */\n  appendPoint: function (point) {\n    if (this.closed) {\n      throw new Error('Path must not be closed')\n    }\n    point = new Vector2D(point) // cast to Vector2D\n    let newpoints = this.points.concat([point])\n    return new Path2D(newpoints)\n  },\n\n  /**\n   * Append a list of points to the end of the path.\n   * @param {Vector2D[]} points - points to append\n   * @returns {Path2D} new Path2D object (not closed)\n   */\n  appendPoints: function (points) {\n    if (this.closed) {\n      throw new Error('Path must not be closed')\n    }\n    let newpoints = this.points\n    points.forEach(function (point) {\n      newpoints.push(new Vector2D(point)) // cast to Vector2D\n    })\n    return new Path2D(newpoints)\n  },\n\n  close: function () {\n    return new Path2D(this.points, true)\n  },\n\n  /**\n   * Determine if the path is a closed or not.\n   * @returns {Boolean} true when the path is closed, otherwise false\n   */\n  isClosed: function () {\n    return this.closed\n  },\n\n  /**\n   * Determine the overall clockwise or anti-clockwise turn of a path.\n   * See: http://mathworld.wolfram.com/PolygonArea.html\n   * @returns {String} One of ['clockwise', 'counter-clockwise', 'straight'].\n   */\n  getTurn: function () {\n    const points = this.points;\n    let twice_area = 0;\n    let last = points.length - 1;\n    for (let current = 0; current < points.length; last = current++) {\n      twice_area += points[last].x * points[current].y - points[last].y * points[current].x;\n    }\n    if (twice_area > 0) {\n      return 'clockwise';\n    } else if (twice_area < 0) {\n      return 'counter-clockwise';\n    } else {\n      return 'straight';\n    }\n  },\n\n    // Extrude the path by following it with a rectangle (upright, perpendicular to the path direction)\n    // Returns a CSG solid\n    //   width: width of the extrusion, in the z=0 plane\n    //   height: height of the extrusion in the z direction\n    //   resolution: number of segments per 360 degrees for the curve in a corner\n  rectangularExtrude: function (width, height, resolution) {\n    let cag = this.expandToCAG(width / 2, resolution)\n    let result = cag.extrude({\n      offset: [0, 0, height]\n    })\n    return result\n  },\n\n    // Expand the path to a CAG\n    // This traces the path with a circle with radius pathradius\n  expandToCAG: function (pathradius, resolution) {\n    const CAG = require('../CAG') // FIXME: cyclic dependencies CAG => PATH2 => CAG\n    let sides = []\n    let numpoints = this.points.length\n    let startindex = 0\n    if (this.closed && (numpoints > 2)) startindex = -1\n    let prevvertex\n    for (let i = startindex; i < numpoints; i++) {\n      let pointindex = i\n      if (pointindex < 0) pointindex = numpoints - 1\n      let point = this.points[pointindex]\n      let vertex = new Vertex(point)\n      if (i > startindex) {\n        let side = new Side(prevvertex, vertex)\n        sides.push(side)\n      }\n      prevvertex = vertex\n    }\n    let shellcag = CAG.fromSides(sides)\n    let expanded = shellcag.expandedShell(pathradius, resolution)\n    return expanded\n  },\n\n  innerToCAG: function () {\n    const CAG = require('../CAG') // FIXME: cyclic dependencies CAG => PATH2 => CAG\n    if (!this.closed) throw new Error('The path should be closed!')\n    return CAG.fromPoints(this.points)\n  },\n\n  transform: function (matrix4x4) {\n    let newpoints = this.points.map(function (point) {\n      return point.multiply4x4(matrix4x4)\n    })\n    return new Path2D(newpoints, this.closed)\n  },\n\n  /**\n   * Append a Bezier curve to the end of the path, using the control points to transition the curve through start and end points.\n   * <br>\n   * The Bézier curve starts at the last point in the path,\n   * and ends at the last given control point. Other control points are intermediate control points.\n   * <br>\n   * The first control point may be null to ensure a smooth transition occurs. In this case,\n   * the second to last control point of the path is mirrored into the control points of the Bezier curve.\n   * In other words, the trailing gradient of the path matches the new gradient of the curve.\n   * @param {Vector2D[]} controlpoints - list of control points\n   * @param {Object} [options] - options for construction\n   * @param {Number} [options.resolution=defaultResolution2D] - number of sides per 360 rotation\n   * @returns {Path2D} new Path2D object (not closed)\n   *\n   * @example\n   * let p5 = new CSG.Path2D([[10,-20]],false);\n   * p5 = p5.appendBezier([[10,-10],[25,-10],[25,-20]]);\n   * p5 = p5.appendBezier([[25,-30],[40,-30],[40,-20]]);\n   */\n  appendBezier: function (controlpoints, options) {\n    if (arguments.length < 2) {\n      options = {}\n    }\n    if (this.closed) {\n      throw new Error('Path must not be closed')\n    }\n    if (!(controlpoints instanceof Array)) {\n      throw new Error('appendBezier: should pass an array of control points')\n    }\n    if (controlpoints.length < 1) {\n      throw new Error('appendBezier: need at least 1 control point')\n    }\n    if (this.points.length < 1) {\n      throw new Error('appendBezier: path must already contain a point (the endpoint of the path is used as the starting point for the bezier curve)')\n    }\n    let resolution = parseOptionAsInt(options, 'resolution', defaultResolution2D)\n    if (resolution < 4) resolution = 4\n    let factorials = []\n    let controlpointsParsed = []\n    controlpointsParsed.push(this.points[this.points.length - 1]) // start at the previous end point\n    for (let i = 0; i < controlpoints.length; ++i) {\n      let p = controlpoints[i]\n      if (p === null) {\n                // we can pass null as the first control point. In that case a smooth gradient is ensured:\n        if (i !== 0) {\n          throw new Error('appendBezier: null can only be passed as the first control point')\n        }\n        if (controlpoints.length < 2) {\n          throw new Error('appendBezier: null can only be passed if there is at least one more control point')\n        }\n        let lastBezierControlPoint\n        if ('lastBezierControlPoint' in this) {\n          lastBezierControlPoint = this.lastBezierControlPoint\n        } else {\n          if (this.points.length < 2) {\n            throw new Error('appendBezier: null is passed as a control point but this requires a previous bezier curve or at least two points in the existing path')\n          }\n          lastBezierControlPoint = this.points[this.points.length - 2]\n        }\n                // mirror the last bezier control point:\n        p = this.points[this.points.length - 1].times(2).minus(lastBezierControlPoint)\n      } else {\n        p = new Vector2D(p) // cast to Vector2D\n      }\n      controlpointsParsed.push(p)\n    }\n    let bezierOrder = controlpointsParsed.length - 1\n    let fact = 1\n    for (let i = 0; i <= bezierOrder; ++i) {\n      if (i > 0) fact *= i\n      factorials.push(fact)\n    }\n    let binomials = []\n    for (let i = 0; i <= bezierOrder; ++i) {\n      let binomial = factorials[bezierOrder] / (factorials[i] * factorials[bezierOrder - i])\n      binomials.push(binomial)\n    }\n    let getPointForT = function (t) {\n      let t_k = 1 // = pow(t,k)\n      let one_minus_t_n_minus_k = Math.pow(1 - t, bezierOrder) // = pow( 1-t, bezierOrder - k)\n      let inv_1_minus_t = (t !== 1) ? (1 / (1 - t)) : 1\n      let point = new Vector2D(0, 0)\n      for (let k = 0; k <= bezierOrder; ++k) {\n        if (k === bezierOrder) one_minus_t_n_minus_k = 1\n        let bernstein_coefficient = binomials[k] * t_k * one_minus_t_n_minus_k\n        point = point.plus(controlpointsParsed[k].times(bernstein_coefficient))\n        t_k *= t\n        one_minus_t_n_minus_k *= inv_1_minus_t\n      }\n      return point\n    }\n    let newpoints = []\n    let newpoints_t = []\n    let numsteps = bezierOrder + 1\n    for (let i = 0; i < numsteps; ++i) {\n      let t = i / (numsteps - 1)\n      let point = getPointForT(t)\n      newpoints.push(point)\n      newpoints_t.push(t)\n    }\n    // subdivide each segment until the angle at each vertex becomes small enough:\n    let subdivideBase = 1\n    let maxangle = Math.PI * 2 / resolution // segments may have differ no more in angle than this\n    let maxsinangle = Math.sin(maxangle)\n    while (subdivideBase < newpoints.length - 1) {\n      let dir1 = newpoints[subdivideBase].minus(newpoints[subdivideBase - 1]).unit()\n      let dir2 = newpoints[subdivideBase + 1].minus(newpoints[subdivideBase]).unit()\n      let sinangle = dir1.cross(dir2) // this is the sine of the angle\n      if (Math.abs(sinangle) > maxsinangle) {\n                // angle is too big, we need to subdivide\n        let t0 = newpoints_t[subdivideBase - 1]\n        let t1 = newpoints_t[subdivideBase + 1]\n        let t0_new = t0 + (t1 - t0) * 1 / 3\n        let t1_new = t0 + (t1 - t0) * 2 / 3\n        let point0_new = getPointForT(t0_new)\n        let point1_new = getPointForT(t1_new)\n                // remove the point at subdivideBase and replace with 2 new points:\n        newpoints.splice(subdivideBase, 1, point0_new, point1_new)\n        newpoints_t.splice(subdivideBase, 1, t0_new, t1_new)\n                // re - evaluate the angles, starting at the previous junction since it has changed:\n        subdivideBase--\n        if (subdivideBase < 1) subdivideBase = 1\n      } else {\n        ++subdivideBase\n      }\n    }\n        // append to the previous points, but skip the first new point because it is identical to the last point:\n    newpoints = this.points.concat(newpoints.slice(1))\n    let result = new Path2D(newpoints)\n    result.lastBezierControlPoint = controlpointsParsed[controlpointsParsed.length - 2]\n    return result\n  },\n\n  /**\n   * Append an arc to the end of the path.\n   * This implementation follows the SVG arc specs. For the details see\n   * http://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands\n   * @param {Vector2D} endpoint - end point of arc\n   * @param {Object} [options] - options for construction\n   * @param {Number} [options.radius=0] - radius of arc (X and Y), see also xradius and yradius\n   * @param {Number} [options.xradius=0] - X radius of arc, see also radius\n   * @param {Number} [options.yradius=0] - Y radius of arc, see also radius\n   * @param {Number} [options.xaxisrotation=0] -  rotation (in degrees) of the X axis of the arc with respect to the X axis of the coordinate system\n   * @param {Number} [options.resolution=defaultResolution2D] - number of sides per 360 rotation\n   * @param {Boolean} [options.clockwise=false] - draw an arc clockwise with respect to the center point\n   * @param {Boolean} [options.large=false] - draw an arc longer than 180 degrees\n   * @returns {Path2D} new Path2D object (not closed)\n   *\n   * @example\n   * let p1 = new CSG.Path2D([[27.5,-22.96875]],false);\n   * p1 = p1.appendPoint([27.5,-3.28125]);\n   * p1 = p1.appendArc([12.5,-22.96875],{xradius: 15,yradius: -19.6875,xaxisrotation: 0,clockwise: false,large: false});\n   * p1 = p1.close();\n   */\n  appendArc: function (endpoint, options) {\n    let decimals = 100000\n    if (arguments.length < 2) {\n      options = {}\n    }\n    if (this.closed) {\n      throw new Error('Path must not be closed')\n    }\n    if (this.points.length < 1) {\n      throw new Error('appendArc: path must already contain a point (the endpoint of the path is used as the starting point for the arc)')\n    }\n    let resolution = parseOptionAsInt(options, 'resolution', defaultResolution2D)\n    if (resolution < 4) resolution = 4\n    let xradius, yradius\n    if (('xradius' in options) || ('yradius' in options)) {\n      if ('radius' in options) {\n        throw new Error('Should either give an xradius and yradius parameter, or a radius parameter')\n      }\n      xradius = parseOptionAsFloat(options, 'xradius', 0)\n      yradius = parseOptionAsFloat(options, 'yradius', 0)\n    } else {\n      xradius = parseOptionAsFloat(options, 'radius', 0)\n      yradius = xradius\n    }\n    let xaxisrotation = parseOptionAsFloat(options, 'xaxisrotation', 0)\n    let clockwise = parseOptionAsBool(options, 'clockwise', false)\n    let largearc = parseOptionAsBool(options, 'large', false)\n    let startpoint = this.points[this.points.length - 1]\n    endpoint = new Vector2D(endpoint)\n        // round to precision in order to have determinate calculations\n    xradius = Math.round(xradius * decimals) / decimals\n    yradius = Math.round(yradius * decimals) / decimals\n    endpoint = new Vector2D(Math.round(endpoint.x * decimals) / decimals, Math.round(endpoint.y * decimals) / decimals)\n\n    let sweepFlag = !clockwise\n    let newpoints = []\n    if ((xradius === 0) || (yradius === 0)) {\n            // http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes:\n            // If rx = 0 or ry = 0, then treat this as a straight line from (x1, y1) to (x2, y2) and stop\n      newpoints.push(endpoint)\n    } else {\n      xradius = Math.abs(xradius)\n      yradius = Math.abs(yradius)\n\n            // see http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes :\n      let phi = xaxisrotation * Math.PI / 180.0\n      let cosphi = Math.cos(phi)\n      let sinphi = Math.sin(phi)\n      let minushalfdistance = startpoint.minus(endpoint).times(0.5)\n            // F.6.5.1:\n            // round to precision in order to have determinate calculations\n      let x = Math.round((cosphi * minushalfdistance.x + sinphi * minushalfdistance.y) * decimals) / decimals\n      let y = Math.round((-sinphi * minushalfdistance.x + cosphi * minushalfdistance.y) * decimals) / decimals\n      let startTranslated = new Vector2D(x, y)\n            // F.6.6.2:\n      let biglambda = (startTranslated.x * startTranslated.x) / (xradius * xradius) + (startTranslated.y * startTranslated.y) / (yradius * yradius)\n      if (biglambda > 1.0) {\n                // F.6.6.3:\n        let sqrtbiglambda = Math.sqrt(biglambda)\n        xradius *= sqrtbiglambda\n        yradius *= sqrtbiglambda\n                // round to precision in order to have determinate calculations\n        xradius = Math.round(xradius * decimals) / decimals\n        yradius = Math.round(yradius * decimals) / decimals\n      }\n            // F.6.5.2:\n      let multiplier1 = Math.sqrt((xradius * xradius * yradius * yradius - xradius * xradius * startTranslated.y * startTranslated.y - yradius * yradius * startTranslated.x * startTranslated.x) / (xradius * xradius * startTranslated.y * startTranslated.y + yradius * yradius * startTranslated.x * startTranslated.x))\n      if (sweepFlag === largearc) multiplier1 = -multiplier1\n      let centerTranslated = new Vector2D(xradius * startTranslated.y / yradius, -yradius * startTranslated.x / xradius).times(multiplier1)\n            // F.6.5.3:\n      let center = new Vector2D(cosphi * centerTranslated.x - sinphi * centerTranslated.y, sinphi * centerTranslated.x + cosphi * centerTranslated.y).plus((startpoint.plus(endpoint)).times(0.5))\n            // F.6.5.5:\n      let vec1 = new Vector2D((startTranslated.x - centerTranslated.x) / xradius, (startTranslated.y - centerTranslated.y) / yradius)\n      let vec2 = new Vector2D((-startTranslated.x - centerTranslated.x) / xradius, (-startTranslated.y - centerTranslated.y) / yradius)\n      let theta1 = vec1.angleRadians()\n      let theta2 = vec2.angleRadians()\n      let deltatheta = theta2 - theta1\n      deltatheta = deltatheta % (2 * Math.PI)\n      if ((!sweepFlag) && (deltatheta > 0)) {\n        deltatheta -= 2 * Math.PI\n      } else if ((sweepFlag) && (deltatheta < 0)) {\n        deltatheta += 2 * Math.PI\n      }\n\n            // Ok, we have the center point and angle range (from theta1, deltatheta radians) so we can create the ellipse\n      let numsteps = Math.ceil(Math.abs(deltatheta) / (2 * Math.PI) * resolution) + 1\n      if (numsteps < 1) numsteps = 1\n      for (let step = 1; step <= numsteps; step++) {\n        let theta = theta1 + step / numsteps * deltatheta\n        let costheta = Math.cos(theta)\n        let sintheta = Math.sin(theta)\n                // F.6.3.1:\n        let point = new Vector2D(cosphi * xradius * costheta - sinphi * yradius * sintheta, sinphi * xradius * costheta + cosphi * yradius * sintheta).plus(center)\n        newpoints.push(point)\n      }\n    }\n    newpoints = this.points.concat(newpoints)\n    let result = new Path2D(newpoints)\n    return result\n  }\n}\n\nmodule.exports = Path2D\n"},"lineCount":493}},"error":null,"hash":"133e4e1668e03134a6f340acb74e4715","cacheData":{"env":{}}}