{"id":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","dependencies":[{"name":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\package.json","includedInParent":true,"mtime":1695809278048},{"name":"../../maths/vec3","loc":{"line":1,"column":21,"index":21},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\operations\\modifiers\\triangulatePolygons.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\maths\\vec3\\index.js"},{"name":"../../geometries/poly3","loc":{"line":2,"column":22,"index":63},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\operations\\modifiers\\triangulatePolygons.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\geometries\\poly3\\index.js"}],"generated":{"js":"const vec3 = require('../../maths/vec3')\nconst poly3 = require('../../geometries/poly3')\n\nconst triangulatePolygon = (epsilon, polygon, triangles) => {\n  const nv = polygon.vertices.length\n  if (nv > 3) {\n    if (nv > 4) {\n      // split the polygon using a midpoint\n      const midpoint = [0, 0, 0]\n      polygon.vertices.forEach((vertice) => vec3.add(midpoint, midpoint, vertice))\n      vec3.snap(midpoint, epsilon, vec3.divide(midpoint, midpoint, [nv, nv, nv]))\n      for (let i = 0; i < nv; i++) {\n        triangles.push(poly3.fromPoints([midpoint, polygon.vertices[i], polygon.vertices[(i + 1) % nv]]))\n      }\n      return\n    }\n    // exactly 4 vertices, use simple triangulation\n    triangles.push(poly3.fromPoints([polygon.vertices[0], polygon.vertices[1], polygon.vertices[2]]))\n    triangles.push(poly3.fromPoints([polygon.vertices[0], polygon.vertices[2], polygon.vertices[3]]))\n    return\n  }\n  // exactly 3 vertices, so return the original\n  triangles.push(polygon)\n}\n\n/*\n * Convert the given polygons into a list of triangles (polygons with 3 vertices).\n * NOTE: this is possible because poly3 is CONVEX by definition\n */\nconst triangulatePolygons = (epsilon, polygons) => {\n  const triangles = []\n  polygons.forEach((polygon) => {\n    triangulatePolygon(epsilon, polygon, triangles)\n  })\n  return triangles\n}\n\nmodule.exports = triangulatePolygons\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}}],"sources":{"node_modules/@jscad/modeling/src/operations/modifiers/triangulatePolygons.js":"const vec3 = require('../../maths/vec3')\nconst poly3 = require('../../geometries/poly3')\n\nconst triangulatePolygon = (epsilon, polygon, triangles) => {\n  const nv = polygon.vertices.length\n  if (nv > 3) {\n    if (nv > 4) {\n      // split the polygon using a midpoint\n      const midpoint = [0, 0, 0]\n      polygon.vertices.forEach((vertice) => vec3.add(midpoint, midpoint, vertice))\n      vec3.snap(midpoint, epsilon, vec3.divide(midpoint, midpoint, [nv, nv, nv]))\n      for (let i = 0; i < nv; i++) {\n        triangles.push(poly3.fromPoints([midpoint, polygon.vertices[i], polygon.vertices[(i + 1) % nv]]))\n      }\n      return\n    }\n    // exactly 4 vertices, use simple triangulation\n    triangles.push(poly3.fromPoints([polygon.vertices[0], polygon.vertices[1], polygon.vertices[2]]))\n    triangles.push(poly3.fromPoints([polygon.vertices[0], polygon.vertices[2], polygon.vertices[3]]))\n    return\n  }\n  // exactly 3 vertices, so return the original\n  triangles.push(polygon)\n}\n\n/*\n * Convert the given polygons into a list of triangles (polygons with 3 vertices).\n * NOTE: this is possible because poly3 is CONVEX by definition\n */\nconst triangulatePolygons = (epsilon, polygons) => {\n  const triangles = []\n  polygons.forEach((polygon) => {\n    triangulatePolygon(epsilon, polygon, triangles)\n  })\n  return triangles\n}\n\nmodule.exports = triangulatePolygons\n"},"lineCount":39}},"error":null,"hash":"7d79bf08c8567402bc229507f7f3c5e6","cacheData":{"env":{}}}