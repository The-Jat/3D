{"id":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","dependencies":[{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\package.json","includedInParent":true,"mtime":1695809278048},{"name":"../utils/flatten","loc":{"line":1,"column":24,"index":24},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\measurements\\measureEpsilon.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\utils\\flatten.js"},{"name":"./calculateEpsilonFromBounds","loc":{"line":2,"column":43,"index":87},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\measurements\\measureEpsilon.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\measurements\\calculateEpsilonFromBounds.js"},{"name":"../geometries","loc":{"line":3,"column":40,"index":159},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\measurements\\measureEpsilon.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\geometries\\index.js"},{"name":"./measureBoundingBox","loc":{"line":4,"column":35,"index":211},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\measurements\\measureEpsilon.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\measurements\\measureBoundingBox.js"}],"generated":{"js":"const flatten = require('../utils/flatten')\nconst calculateEpsilonFromBounds = require('./calculateEpsilonFromBounds')\nconst { geom2, geom3, path2 } = require('../geometries')\nconst measureBoundingBox = require('./measureBoundingBox')\n\n/*\n * Measure the epsilon of the given (path2) geometry.\n * @return {Number} the epsilon (precision) of the geometry\n */\nconst measureEpsilonOfPath2 = (geometry) => {\n  if (geometry.epsilon) return geometry.epsilon\n\n  geometry.epsilon = calculateEpsilonFromBounds(measureBoundingBox(geometry), 2)\n  return geometry.epsilon\n}\n\n/*\n * Measure the epsilon of the given (geom2) geometry.\n * @return {Number} the epsilon (precision) of the geometry\n */\nconst measureEpsilonOfGeom2 = (geometry) => {\n  if (geometry.epsilon) return geometry.epsilon\n\n  geometry.epsilon = calculateEpsilonFromBounds(measureBoundingBox(geometry), 2)\n  return geometry.epsilon\n}\n\n/*\n * Measure the epsilon of the given (geom3) geometry.\n * @return {Float} the epsilon (precision) of the geometry\n */\nconst measureEpsilonOfGeom3 = (geometry) => {\n  if (geometry.epsilon) return geometry.epsilon\n\n  geometry.epsilon = calculateEpsilonFromBounds(measureBoundingBox(geometry), 3)\n  return geometry.epsilon\n}\n\n/**\n * Measure the epsilon of the given geometries.\n * Epsilon values are used in various functions to determine minimum distances between points, planes, etc.\n * @param {...Object} geometries - the geometries to measure\n * @return {Number|Array} the epsilon for each geometry\n * @alias module:modeling/measurements.measureEpsilon\n *\n * @example\n * let epsilon = measureEpsilon(sphere())\n */\nconst measureEpsilon = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('wrong number of arguments')\n\n  const results = geometries.map((geometry) => {\n    if (path2.isA(geometry)) return measureEpsilonOfPath2(geometry)\n    if (geom2.isA(geometry)) return measureEpsilonOfGeom2(geometry)\n    if (geom3.isA(geometry)) return measureEpsilonOfGeom3(geometry)\n    return 0\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = measureEpsilon\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}}],"sources":{"node_modules/@jscad/modeling/src/measurements/measureEpsilon.js":"const flatten = require('../utils/flatten')\nconst calculateEpsilonFromBounds = require('./calculateEpsilonFromBounds')\nconst { geom2, geom3, path2 } = require('../geometries')\nconst measureBoundingBox = require('./measureBoundingBox')\n\n/*\n * Measure the epsilon of the given (path2) geometry.\n * @return {Number} the epsilon (precision) of the geometry\n */\nconst measureEpsilonOfPath2 = (geometry) => {\n  if (geometry.epsilon) return geometry.epsilon\n\n  geometry.epsilon = calculateEpsilonFromBounds(measureBoundingBox(geometry), 2)\n  return geometry.epsilon\n}\n\n/*\n * Measure the epsilon of the given (geom2) geometry.\n * @return {Number} the epsilon (precision) of the geometry\n */\nconst measureEpsilonOfGeom2 = (geometry) => {\n  if (geometry.epsilon) return geometry.epsilon\n\n  geometry.epsilon = calculateEpsilonFromBounds(measureBoundingBox(geometry), 2)\n  return geometry.epsilon\n}\n\n/*\n * Measure the epsilon of the given (geom3) geometry.\n * @return {Float} the epsilon (precision) of the geometry\n */\nconst measureEpsilonOfGeom3 = (geometry) => {\n  if (geometry.epsilon) return geometry.epsilon\n\n  geometry.epsilon = calculateEpsilonFromBounds(measureBoundingBox(geometry), 3)\n  return geometry.epsilon\n}\n\n/**\n * Measure the epsilon of the given geometries.\n * Epsilon values are used in various functions to determine minimum distances between points, planes, etc.\n * @param {...Object} geometries - the geometries to measure\n * @return {Number|Array} the epsilon for each geometry\n * @alias module:modeling/measurements.measureEpsilon\n *\n * @example\n * let epsilon = measureEpsilon(sphere())\n */\nconst measureEpsilon = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('wrong number of arguments')\n\n  const results = geometries.map((geometry) => {\n    if (path2.isA(geometry)) return measureEpsilonOfPath2(geometry)\n    if (geom2.isA(geometry)) return measureEpsilonOfGeom2(geometry)\n    if (geom3.isA(geometry)) return measureEpsilonOfGeom3(geometry)\n    return 0\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = measureEpsilon\n"},"lineCount":63}},"error":null,"hash":"ee3edec542340267d6e309133c419397","cacheData":{"env":{}}}