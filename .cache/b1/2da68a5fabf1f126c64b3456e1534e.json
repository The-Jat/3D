{"id":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","dependencies":[{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\package.json","includedInParent":true,"mtime":1695809278048},{"name":"../../maths/mat4","loc":{"line":1,"column":21,"index":21},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\geometries\\path2\\fromCompactBinary.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\maths\\mat4\\index.js"},{"name":"../../maths/vec2","loc":{"line":2,"column":21,"index":62},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\geometries\\path2\\fromCompactBinary.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\maths\\vec2\\index.js"},{"name":"./create","loc":{"line":4,"column":23,"index":106},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\geometries\\path2\\fromCompactBinary.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\geometries\\path2\\create.js"}],"generated":{"js":"const mat4 = require('../../maths/mat4')\nconst vec2 = require('../../maths/vec2')\n\nconst create = require('./create')\n\n/**\n * Create a new path from the given compact binary data.\n * @param {TypedArray} data - compact binary data\n * @returns {path2} a new path\n * @alias module:modeling/geometries/path2.fromCompactBinary\n */\nconst fromCompactBinary = (data) => {\n  if (data[0] !== 2) throw new Error('invalid compact binary data')\n\n  const created = create()\n\n  created.transforms = mat4.clone(data.slice(1, 17))\n\n  created.isClosed = !!data[17]\n\n  for (let i = 22; i < data.length; i += 2) {\n    const point = vec2.fromValues(data[i], data[i + 1])\n    created.points.push(point)\n  }\n  // transfer known properties, i.e. color\n  if (data[18] >= 0) {\n    created.color = [data[18], data[19], data[20], data[21]]\n  }\n  // TODO: how about custom properties or fields ?\n  return created\n}\n\nmodule.exports = fromCompactBinary\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}}],"sources":{"node_modules/@jscad/modeling/src/geometries/path2/fromCompactBinary.js":"const mat4 = require('../../maths/mat4')\nconst vec2 = require('../../maths/vec2')\n\nconst create = require('./create')\n\n/**\n * Create a new path from the given compact binary data.\n * @param {TypedArray} data - compact binary data\n * @returns {path2} a new path\n * @alias module:modeling/geometries/path2.fromCompactBinary\n */\nconst fromCompactBinary = (data) => {\n  if (data[0] !== 2) throw new Error('invalid compact binary data')\n\n  const created = create()\n\n  created.transforms = mat4.clone(data.slice(1, 17))\n\n  created.isClosed = !!data[17]\n\n  for (let i = 22; i < data.length; i += 2) {\n    const point = vec2.fromValues(data[i], data[i + 1])\n    created.points.push(point)\n  }\n  // transfer known properties, i.e. color\n  if (data[18] >= 0) {\n    created.color = [data[18], data[19], data[20], data[21]]\n  }\n  // TODO: how about custom properties or fields ?\n  return created\n}\n\nmodule.exports = fromCompactBinary\n"},"lineCount":34}},"error":null,"hash":"f00a6c0f00d3f6ab13817f8c3b321b5a","cacheData":{"env":{}}}