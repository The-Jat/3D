{"id":"node_modules/@jscad/csg/src/api/ops-cuts.js","dependencies":[{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\package.json","includedInParent":true,"mtime":1695872748353},{"name":"../core/constants","loc":{"line":1,"column":22,"index":22},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\ops-cuts.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\constants.js"},{"name":"../core/math/Plane","loc":{"line":2,"column":22,"index":65},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\ops-cuts.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Plane.js"},{"name":"../core/math/Vector2","loc":{"line":3,"column":24,"index":111},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\ops-cuts.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Vector2.js"},{"name":"../core/math/Vertex3","loc":{"line":4,"column":24,"index":159},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\ops-cuts.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Vertex3.js"},{"name":"../core/math/Polygon3","loc":{"line":5,"column":25,"index":208},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\ops-cuts.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Polygon3.js"},{"name":"../core/math/OrthoNormalBasis","loc":{"line":6,"column":33,"index":266},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\ops-cuts.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\OrthoNormalBasis.js"},{"name":"../core/CSG","loc":{"line":28,"column":24,"index":1065},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\ops-cuts.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CSG.js"}],"generated":{"js":"const {EPS} = require('../core/constants')\nconst Plane = require('../core/math/Plane')\nconst Vector2 = require('../core/math/Vector2')\nconst Vertex3 = require('../core/math/Vertex3')\nconst Polygon3 = require('../core/math/Polygon3')\nconst OrthoNormalBasis = require('../core/math/OrthoNormalBasis')\n\n/** cuts a csg along a orthobasis\n * @param  {CSG} csg the csg object to cut\n * @param  {Orthobasis} orthobasis the orthobasis to cut along\n */\nconst sectionCut = function (csg, orthobasis) {\n  let plane1 = orthobasis.plane\n  let plane2 = orthobasis.plane.flipped()\n  plane1 = new Plane(plane1.normal, plane1.w)\n  plane2 = new Plane(plane2.normal, plane2.w + (5 * EPS))\n  let cut3d = csg.cutByPlane(plane1)\n  cut3d = cut3d.cutByPlane(plane2)\n  return cut3d.projectToOrthoNormalBasis(orthobasis)\n}\n\n/** Cut the solid by a plane. Returns the solid on the back side of the plane\n * @param  {Plane} plane\n * @returns {CSG} the solid on the back side of the plane\n */\nconst cutByPlane = function (csg, plane) {\n  if (csg.polygons.length === 0) {\n    const CSG = require('../core/CSG') // FIXME: circular dependency ! CSG => cutByPlane => CSG\n    return new CSG()\n  }\n  // Ideally we would like to do an intersection with a polygon of inifinite size\n  // but this is not supported by our implementation. As a workaround, we will create\n  // a cube, with one face on the plane, and a size larger enough so that the entire\n  // solid fits in the cube.\n  // find the max distance of any vertex to the center of the plane:\n  let planecenter = plane.normal.times(plane.w)\n  let maxdistance = 0\n  csg.polygons.map(function (polygon) {\n    polygon.vertices.map(function (vertex) {\n      let distance = vertex.pos.distanceToSquared(planecenter)\n      if (distance > maxdistance) maxdistance = distance\n    })\n  })\n  maxdistance = Math.sqrt(maxdistance)\n  maxdistance *= 1.01 // make sure it's really larger\n  // Now build a polygon on the plane, at any point farther than maxdistance from the plane center:\n  let vertices = []\n  let orthobasis = new OrthoNormalBasis(plane)\n  vertices.push(new Vertex3(orthobasis.to3D(new Vector2(maxdistance, -maxdistance))))\n  vertices.push(new Vertex3(orthobasis.to3D(new Vector2(-maxdistance, -maxdistance))))\n  vertices.push(new Vertex3(orthobasis.to3D(new Vector2(-maxdistance, maxdistance))))\n  vertices.push(new Vertex3(orthobasis.to3D(new Vector2(maxdistance, maxdistance))))\n  const polygon = new Polygon3(vertices, null, plane.flipped())\n\n  // and extrude the polygon into a cube, backwards of the plane:\n  const cube = polygon.extrude(plane.normal.times(-maxdistance))\n\n  // Now we can do the intersection:\n  let result = csg.intersect(cube)\n  result.properties = csg.properties // keep original properties\n  return result\n}\n\nmodule.exports = {sectionCut, cutByPlane}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@jscad/csg/src/api/ops-cuts.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}}],"sources":{"node_modules/@jscad/csg/src/api/ops-cuts.js":"const {EPS} = require('../core/constants')\nconst Plane = require('../core/math/Plane')\nconst Vector2 = require('../core/math/Vector2')\nconst Vertex3 = require('../core/math/Vertex3')\nconst Polygon3 = require('../core/math/Polygon3')\nconst OrthoNormalBasis = require('../core/math/OrthoNormalBasis')\n\n/** cuts a csg along a orthobasis\n * @param  {CSG} csg the csg object to cut\n * @param  {Orthobasis} orthobasis the orthobasis to cut along\n */\nconst sectionCut = function (csg, orthobasis) {\n  let plane1 = orthobasis.plane\n  let plane2 = orthobasis.plane.flipped()\n  plane1 = new Plane(plane1.normal, plane1.w)\n  plane2 = new Plane(plane2.normal, plane2.w + (5 * EPS))\n  let cut3d = csg.cutByPlane(plane1)\n  cut3d = cut3d.cutByPlane(plane2)\n  return cut3d.projectToOrthoNormalBasis(orthobasis)\n}\n\n/** Cut the solid by a plane. Returns the solid on the back side of the plane\n * @param  {Plane} plane\n * @returns {CSG} the solid on the back side of the plane\n */\nconst cutByPlane = function (csg, plane) {\n  if (csg.polygons.length === 0) {\n    const CSG = require('../core/CSG') // FIXME: circular dependency ! CSG => cutByPlane => CSG\n    return new CSG()\n  }\n  // Ideally we would like to do an intersection with a polygon of inifinite size\n  // but this is not supported by our implementation. As a workaround, we will create\n  // a cube, with one face on the plane, and a size larger enough so that the entire\n  // solid fits in the cube.\n  // find the max distance of any vertex to the center of the plane:\n  let planecenter = plane.normal.times(plane.w)\n  let maxdistance = 0\n  csg.polygons.map(function (polygon) {\n    polygon.vertices.map(function (vertex) {\n      let distance = vertex.pos.distanceToSquared(planecenter)\n      if (distance > maxdistance) maxdistance = distance\n    })\n  })\n  maxdistance = Math.sqrt(maxdistance)\n  maxdistance *= 1.01 // make sure it's really larger\n  // Now build a polygon on the plane, at any point farther than maxdistance from the plane center:\n  let vertices = []\n  let orthobasis = new OrthoNormalBasis(plane)\n  vertices.push(new Vertex3(orthobasis.to3D(new Vector2(maxdistance, -maxdistance))))\n  vertices.push(new Vertex3(orthobasis.to3D(new Vector2(-maxdistance, -maxdistance))))\n  vertices.push(new Vertex3(orthobasis.to3D(new Vector2(-maxdistance, maxdistance))))\n  vertices.push(new Vertex3(orthobasis.to3D(new Vector2(maxdistance, maxdistance))))\n  const polygon = new Polygon3(vertices, null, plane.flipped())\n\n  // and extrude the polygon into a cube, backwards of the plane:\n  const cube = polygon.extrude(plane.normal.times(-maxdistance))\n\n  // Now we can do the intersection:\n  let result = csg.intersect(cube)\n  result.properties = csg.properties // keep original properties\n  return result\n}\n\nmodule.exports = {sectionCut, cutByPlane}\n"},"lineCount":65}},"error":null,"hash":"5fa05c8050d3c43fcd051fb8fc642f74","cacheData":{"env":{}}}