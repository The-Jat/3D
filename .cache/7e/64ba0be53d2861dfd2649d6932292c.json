{"id":"node_modules/@jscad/csg/src/api/solidFromSlices.js","dependencies":[{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\package.json","includedInParent":true,"mtime":1695872748353},{"name":"../core/math/Polygon3","loc":{"line":1,"column":24,"index":24},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\solidFromSlices.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Polygon3.js"},{"name":"../core/CSGFactories","loc":{"line":2,"column":31,"index":80},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\solidFromSlices.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CSGFactories.js"},{"name":"../core/utils","loc":{"line":3,"column":32,"index":136},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\solidFromSlices.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\utils.js"}],"generated":{"js":"const Polygon = require('../core/math/Polygon3')\nconst {fromPolygons} = require('../core/CSGFactories')\nconst {fnSortByIndex} = require('../core/utils')\n\n// FIXME: WHY is this for 3D polygons and not for 2D shapes ?\n/**\n * Creates solid from slices (Polygon) by generating walls\n * @param {Object} options Solid generating options\n *  - numslices {Number} Number of slices to be generated\n *  - callback(t, slice) {Function} Callback function generating slices.\n *          arguments: t = [0..1], slice = [0..numslices - 1]\n *          return: Polygon or null to skip\n *  - loop {Boolean} no flats, only walls, it's used to generate solids like a tor\n */\nconst solidFromSlices = function (polygon, options) {\n  let polygons = []\n  let csg = null\n  let prev = null\n  let bottom = null\n  let top = null\n  let numSlices = 2\n  let bLoop = false\n  let fnCallback\n  let flipped = null\n\n  if (options) {\n    bLoop = Boolean(options['loop'])\n\n    if (options.numslices) { numSlices = options.numslices }\n\n    if (options.callback) {\n      fnCallback = options.callback\n    }\n  }\n  if (!fnCallback) {\n    let square = Polygon.createFromPoints([\n                  [0, 0, 0],\n                  [1, 0, 0],\n                  [1, 1, 0],\n                  [0, 1, 0]\n    ])\n    fnCallback = function (t, slice) {\n      return t === 0 || t === 1 ? square.translate([0, 0, t]) : null\n    }\n  }\n  for (let i = 0, iMax = numSlices - 1; i <= iMax; i++) {\n    csg = fnCallback.call(polygon, i / iMax, i)\n    if (csg) {\n      if (!(csg instanceof Polygon)) {\n        throw new Error('Polygon.solidFromSlices callback error: Polygon expected')\n      }\n      csg.checkIfConvex()\n\n      if (prev) { // generate walls\n        if (flipped === null) { // not generated yet\n          flipped = prev.plane.signedDistanceToPoint(csg.vertices[0].pos) < 0\n        }\n        _addWalls(polygons, prev, csg, flipped)\n      } else { // the first - will be a bottom\n        bottom = csg\n      }\n      prev = csg\n    } // callback can return null to skip that slice\n  }\n  top = csg\n\n  if (bLoop) {\n    let bSameTopBottom = bottom.vertices.length === top.vertices.length &&\n                  bottom.vertices.every(function (v, index) {\n                    return v.pos.equals(top.vertices[index].pos)\n                  })\n    // if top and bottom are not the same -\n    // generate walls between them\n    if (!bSameTopBottom) {\n      _addWalls(polygons, top, bottom, flipped)\n    } // else - already generated\n  } else {\n    // save top and bottom\n    // TODO: flip if necessary\n    polygons.unshift(flipped ? bottom : bottom.flipped())\n    polygons.push(flipped ? top.flipped() : top)\n  }\n  return fromPolygons(polygons)\n}\n\n/**\n * @param walls Array of wall polygons\n * @param bottom Bottom polygon\n * @param top Top polygon\n */\nconst _addWalls = function (walls, bottom, top, bFlipped) {\n  let bottomPoints = bottom.vertices.slice(0) // make a copy\n  let topPoints = top.vertices.slice(0) // make a copy\n  let color = top.shared || null\n\n        // check if bottom perimeter is closed\n  if (!bottomPoints[0].pos.equals(bottomPoints[bottomPoints.length - 1].pos)) {\n    bottomPoints.push(bottomPoints[0])\n  }\n\n        // check if top perimeter is closed\n  if (!topPoints[0].pos.equals(topPoints[topPoints.length - 1].pos)) {\n    topPoints.push(topPoints[0])\n  }\n  if (bFlipped) {\n    bottomPoints = bottomPoints.reverse()\n    topPoints = topPoints.reverse()\n  }\n\n  let iTopLen = topPoints.length - 1\n  let iBotLen = bottomPoints.length - 1\n  let iExtra = iTopLen - iBotLen// how many extra triangles we need\n  let bMoreTops = iExtra > 0\n  let bMoreBottoms = iExtra < 0\n\n  let aMin = [] // indexes to start extra triangles (polygon with minimal square)\n        // init - we need exactly /iExtra/ small triangles\n  for (let i = Math.abs(iExtra); i > 0; i--) {\n    aMin.push({\n      len: Infinity,\n      index: -1\n    })\n  }\n\n  let len\n  if (bMoreBottoms) {\n    for (let i = 0; i < iBotLen; i++) {\n      len = bottomPoints[i].pos.distanceToSquared(bottomPoints[i + 1].pos)\n                // find the element to replace\n      for (let j = aMin.length - 1; j >= 0; j--) {\n        if (aMin[j].len > len) {\n          aMin[j].len = len\n          aMin.index = j\n          break\n        }\n      } // for\n    }\n  } else if (bMoreTops) {\n    for (let i = 0; i < iTopLen; i++) {\n      len = topPoints[i].pos.distanceToSquared(topPoints[i + 1].pos)\n                // find the element to replace\n      for (let j = aMin.length - 1; j >= 0; j--) {\n        if (aMin[j].len > len) {\n          aMin[j].len = len\n          aMin.index = j\n          break\n        }\n      } // for\n    }\n  } // if\n  // sort by index\n  aMin.sort(fnSortByIndex)\n  let getTriangle = function addWallsPutTriangle (pointA, pointB, pointC, color) {\n    return new Polygon([pointA, pointB, pointC], color)\n  // return bFlipped ? triangle.flipped() : triangle;\n  }\n\n  let bpoint = bottomPoints[0]\n  let tpoint = topPoints[0]\n  let secondPoint\n  let nBotFacet\n  let nTopFacet // length of triangle facet side\n  for (let iB = 0, iT = 0, iMax = iTopLen + iBotLen; iB + iT < iMax;) {\n    if (aMin.length) {\n      if (bMoreTops && iT === aMin[0].index) { // one vertex is on the bottom, 2 - on the top\n        secondPoint = topPoints[++iT]\n                    // console.log('<<< extra top: ' + secondPoint + ', ' + tpoint + ', bottom: ' + bpoint);\n        walls.push(getTriangle(\n                        secondPoint, tpoint, bpoint, color\n                    ))\n        tpoint = secondPoint\n        aMin.shift()\n        continue\n      } else if (bMoreBottoms && iB === aMin[0].index) {\n        secondPoint = bottomPoints[++iB]\n        walls.push(getTriangle(\n                        tpoint, bpoint, secondPoint, color\n                    ))\n        bpoint = secondPoint\n        aMin.shift()\n        continue\n      }\n    }\n            // choose the shortest path\n    if (iB < iBotLen) { // one vertex is on the top, 2 - on the bottom\n      nBotFacet = tpoint.pos.distanceToSquared(bottomPoints[iB + 1].pos)\n    } else {\n      nBotFacet = Infinity\n    }\n    if (iT < iTopLen) { // one vertex is on the bottom, 2 - on the top\n      nTopFacet = bpoint.pos.distanceToSquared(topPoints[iT + 1].pos)\n    } else {\n      nTopFacet = Infinity\n    }\n    if (nBotFacet <= nTopFacet) {\n      secondPoint = bottomPoints[++iB]\n      walls.push(getTriangle(\n                    tpoint, bpoint, secondPoint, color\n                ))\n      bpoint = secondPoint\n    } else if (iT < iTopLen) { // nTopFacet < Infinity\n      secondPoint = topPoints[++iT]\n                // console.log('<<< top: ' + secondPoint + ', ' + tpoint + ', bottom: ' + bpoint);\n      walls.push(getTriangle(\n                    secondPoint, tpoint, bpoint, color\n                ))\n      tpoint = secondPoint\n    };\n  }\n  return walls\n}\n\nmodule.exports = solidFromSlices\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@jscad/csg/src/api/solidFromSlices.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}}],"sources":{"node_modules/@jscad/csg/src/api/solidFromSlices.js":"const Polygon = require('../core/math/Polygon3')\nconst {fromPolygons} = require('../core/CSGFactories')\nconst {fnSortByIndex} = require('../core/utils')\n\n// FIXME: WHY is this for 3D polygons and not for 2D shapes ?\n/**\n * Creates solid from slices (Polygon) by generating walls\n * @param {Object} options Solid generating options\n *  - numslices {Number} Number of slices to be generated\n *  - callback(t, slice) {Function} Callback function generating slices.\n *          arguments: t = [0..1], slice = [0..numslices - 1]\n *          return: Polygon or null to skip\n *  - loop {Boolean} no flats, only walls, it's used to generate solids like a tor\n */\nconst solidFromSlices = function (polygon, options) {\n  let polygons = []\n  let csg = null\n  let prev = null\n  let bottom = null\n  let top = null\n  let numSlices = 2\n  let bLoop = false\n  let fnCallback\n  let flipped = null\n\n  if (options) {\n    bLoop = Boolean(options['loop'])\n\n    if (options.numslices) { numSlices = options.numslices }\n\n    if (options.callback) {\n      fnCallback = options.callback\n    }\n  }\n  if (!fnCallback) {\n    let square = Polygon.createFromPoints([\n                  [0, 0, 0],\n                  [1, 0, 0],\n                  [1, 1, 0],\n                  [0, 1, 0]\n    ])\n    fnCallback = function (t, slice) {\n      return t === 0 || t === 1 ? square.translate([0, 0, t]) : null\n    }\n  }\n  for (let i = 0, iMax = numSlices - 1; i <= iMax; i++) {\n    csg = fnCallback.call(polygon, i / iMax, i)\n    if (csg) {\n      if (!(csg instanceof Polygon)) {\n        throw new Error('Polygon.solidFromSlices callback error: Polygon expected')\n      }\n      csg.checkIfConvex()\n\n      if (prev) { // generate walls\n        if (flipped === null) { // not generated yet\n          flipped = prev.plane.signedDistanceToPoint(csg.vertices[0].pos) < 0\n        }\n        _addWalls(polygons, prev, csg, flipped)\n      } else { // the first - will be a bottom\n        bottom = csg\n      }\n      prev = csg\n    } // callback can return null to skip that slice\n  }\n  top = csg\n\n  if (bLoop) {\n    let bSameTopBottom = bottom.vertices.length === top.vertices.length &&\n                  bottom.vertices.every(function (v, index) {\n                    return v.pos.equals(top.vertices[index].pos)\n                  })\n    // if top and bottom are not the same -\n    // generate walls between them\n    if (!bSameTopBottom) {\n      _addWalls(polygons, top, bottom, flipped)\n    } // else - already generated\n  } else {\n    // save top and bottom\n    // TODO: flip if necessary\n    polygons.unshift(flipped ? bottom : bottom.flipped())\n    polygons.push(flipped ? top.flipped() : top)\n  }\n  return fromPolygons(polygons)\n}\n\n/**\n * @param walls Array of wall polygons\n * @param bottom Bottom polygon\n * @param top Top polygon\n */\nconst _addWalls = function (walls, bottom, top, bFlipped) {\n  let bottomPoints = bottom.vertices.slice(0) // make a copy\n  let topPoints = top.vertices.slice(0) // make a copy\n  let color = top.shared || null\n\n        // check if bottom perimeter is closed\n  if (!bottomPoints[0].pos.equals(bottomPoints[bottomPoints.length - 1].pos)) {\n    bottomPoints.push(bottomPoints[0])\n  }\n\n        // check if top perimeter is closed\n  if (!topPoints[0].pos.equals(topPoints[topPoints.length - 1].pos)) {\n    topPoints.push(topPoints[0])\n  }\n  if (bFlipped) {\n    bottomPoints = bottomPoints.reverse()\n    topPoints = topPoints.reverse()\n  }\n\n  let iTopLen = topPoints.length - 1\n  let iBotLen = bottomPoints.length - 1\n  let iExtra = iTopLen - iBotLen// how many extra triangles we need\n  let bMoreTops = iExtra > 0\n  let bMoreBottoms = iExtra < 0\n\n  let aMin = [] // indexes to start extra triangles (polygon with minimal square)\n        // init - we need exactly /iExtra/ small triangles\n  for (let i = Math.abs(iExtra); i > 0; i--) {\n    aMin.push({\n      len: Infinity,\n      index: -1\n    })\n  }\n\n  let len\n  if (bMoreBottoms) {\n    for (let i = 0; i < iBotLen; i++) {\n      len = bottomPoints[i].pos.distanceToSquared(bottomPoints[i + 1].pos)\n                // find the element to replace\n      for (let j = aMin.length - 1; j >= 0; j--) {\n        if (aMin[j].len > len) {\n          aMin[j].len = len\n          aMin.index = j\n          break\n        }\n      } // for\n    }\n  } else if (bMoreTops) {\n    for (let i = 0; i < iTopLen; i++) {\n      len = topPoints[i].pos.distanceToSquared(topPoints[i + 1].pos)\n                // find the element to replace\n      for (let j = aMin.length - 1; j >= 0; j--) {\n        if (aMin[j].len > len) {\n          aMin[j].len = len\n          aMin.index = j\n          break\n        }\n      } // for\n    }\n  } // if\n  // sort by index\n  aMin.sort(fnSortByIndex)\n  let getTriangle = function addWallsPutTriangle (pointA, pointB, pointC, color) {\n    return new Polygon([pointA, pointB, pointC], color)\n  // return bFlipped ? triangle.flipped() : triangle;\n  }\n\n  let bpoint = bottomPoints[0]\n  let tpoint = topPoints[0]\n  let secondPoint\n  let nBotFacet\n  let nTopFacet // length of triangle facet side\n  for (let iB = 0, iT = 0, iMax = iTopLen + iBotLen; iB + iT < iMax;) {\n    if (aMin.length) {\n      if (bMoreTops && iT === aMin[0].index) { // one vertex is on the bottom, 2 - on the top\n        secondPoint = topPoints[++iT]\n                    // console.log('<<< extra top: ' + secondPoint + ', ' + tpoint + ', bottom: ' + bpoint);\n        walls.push(getTriangle(\n                        secondPoint, tpoint, bpoint, color\n                    ))\n        tpoint = secondPoint\n        aMin.shift()\n        continue\n      } else if (bMoreBottoms && iB === aMin[0].index) {\n        secondPoint = bottomPoints[++iB]\n        walls.push(getTriangle(\n                        tpoint, bpoint, secondPoint, color\n                    ))\n        bpoint = secondPoint\n        aMin.shift()\n        continue\n      }\n    }\n            // choose the shortest path\n    if (iB < iBotLen) { // one vertex is on the top, 2 - on the bottom\n      nBotFacet = tpoint.pos.distanceToSquared(bottomPoints[iB + 1].pos)\n    } else {\n      nBotFacet = Infinity\n    }\n    if (iT < iTopLen) { // one vertex is on the bottom, 2 - on the top\n      nTopFacet = bpoint.pos.distanceToSquared(topPoints[iT + 1].pos)\n    } else {\n      nTopFacet = Infinity\n    }\n    if (nBotFacet <= nTopFacet) {\n      secondPoint = bottomPoints[++iB]\n      walls.push(getTriangle(\n                    tpoint, bpoint, secondPoint, color\n                ))\n      bpoint = secondPoint\n    } else if (iT < iTopLen) { // nTopFacet < Infinity\n      secondPoint = topPoints[++iT]\n                // console.log('<<< top: ' + secondPoint + ', ' + tpoint + ', bottom: ' + bpoint);\n      walls.push(getTriangle(\n                    secondPoint, tpoint, bpoint, color\n                ))\n      tpoint = secondPoint\n    };\n  }\n  return walls\n}\n\nmodule.exports = solidFromSlices\n"},"lineCount":214}},"error":null,"hash":"a2fdb2c851f869db9cbb9d6fcdbf4f9c","cacheData":{"env":{}}}