{"id":"node_modules/@jscad/modeling/src/maths/vec3/canonicalize.js","dependencies":[{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\package.json","includedInParent":true,"mtime":1695809278048},{"name":"./fromValues","loc":{"line":1,"column":27,"index":27},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\maths\\vec3\\canonicalize.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\maths\\vec3\\fromValues.js"},{"name":"../utils/quantizeForSpace","loc":{"line":2,"column":33,"index":76},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\maths\\vec3\\canonicalize.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\maths\\utils\\quantizeForSpace.js"}],"generated":{"js":"const fromValues = require('./fromValues')\nconst quantizeForSpace = require('../utils/quantizeForSpace')\n\nconst canonicalize = (vector) => fromValues(quantizeForSpace(vector[0]),\n  quantizeForSpace(vector[1]),\n  vector[2] === undefined ? 0 : quantizeForSpace(vector[2]))\n\nmodule.exports = canonicalize\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/modeling/src/maths/vec3/canonicalize.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/canonicalize.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/canonicalize.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/canonicalize.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/canonicalize.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/canonicalize.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/canonicalize.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/canonicalize.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/canonicalize.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}}],"sources":{"node_modules/@jscad/modeling/src/maths/vec3/canonicalize.js":"const fromValues = require('./fromValues')\nconst quantizeForSpace = require('../utils/quantizeForSpace')\n\nconst canonicalize = (vector) => fromValues(quantizeForSpace(vector[0]),\n  quantizeForSpace(vector[1]),\n  vector[2] === undefined ? 0 : quantizeForSpace(vector[2]))\n\nmodule.exports = canonicalize\n"},"lineCount":9}},"error":null,"hash":"3ea76d992cf8b38d79413898e8913bf5","cacheData":{"env":{}}}