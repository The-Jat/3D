{"id":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","dependencies":[{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\package.json","includedInParent":true,"mtime":1695809278048},{"name":"../../maths/vec3","loc":{"line":1,"column":21,"index":21},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\operations\\modifiers\\mergePolygons.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\maths\\vec3\\index.js"},{"name":"../../geometries/poly3","loc":{"line":3,"column":22,"index":64},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\operations\\modifiers\\mergePolygons.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\geometries\\poly3\\index.js"}],"generated":{"js":"const vec3 = require('../../maths/vec3')\n\nconst poly3 = require('../../geometries/poly3')\n\n// create a set of edges from the given polygon, and link the edges as well\nconst createEdges = (polygon) => {\n  const points = poly3.toPoints(polygon)\n  const edges = []\n  for (let i = 0; i < points.length; i++) {\n    const j = (i + 1) % points.length\n    const edge = {\n      v1: points[i],\n      v2: points[j]\n    }\n    edges.push(edge)\n  }\n  // link the edges together\n  for (let i = 0; i < edges.length; i++) {\n    const j = (i + 1) % points.length\n    edges[i].next = edges[j]\n    edges[j].prev = edges[i]\n  }\n  return edges\n}\n\nconst insertEdge = (edges, edge) => {\n  const key = `${edge.v1}:${edge.v2}`\n  edges.set(key, edge)\n}\n\nconst deleteEdge = (edges, edge) => {\n  const key = `${edge.v1}:${edge.v2}`\n  edges.delete(key)\n}\n\nconst findOppositeEdge = (edges, edge) => {\n  const key = `${edge.v2}:${edge.v1}` // NOTE: OPPOSITE OF INSERT KEY\n  return edges.get(key)\n}\n\n// calculate the two adjoining angles between the opposing edges\nconst calculateAnglesBetween = (current, opposite, normal) => {\n  let v0 = current.prev.v1\n  let v1 = current.prev.v2\n  let v2 = opposite.next.v2\n  const angle1 = calculateAngle(v0, v1, v2, normal)\n\n  v0 = opposite.prev.v1\n  v1 = opposite.prev.v2\n  v2 = current.next.v2\n  const angle2 = calculateAngle(v0, v1, v2, normal)\n\n  return [angle1, angle2]\n}\n\nconst calculateAngle = (prevpoint, point, nextpoint, normal) => {\n  const crossproduct = vec3.cross(\n    vec3.subtract(point, prevpoint),\n    vec3.subtract(nextpoint, point)\n  )\n  return vec3.dot(crossproduct, normal)\n}\n\n// create a polygon starting from the given edge (if possible)\nconst createPolygonAnd = (edge) => {\n  let polygon\n  const points = []\n  while (edge.next) {\n    const next = edge.next\n\n    points.push(edge.v1)\n\n    edge.v1 = null\n    edge.v2 = null\n    edge.next = null\n    edge.prev = null\n\n    edge = next\n  }\n  if (points.length > 0) polygon = poly3.fromPoints(points)\n  return polygon\n}\n\n/*\n * Merge COPLANAR polygons that share common edges.\n * @param {poly3[]} sourcepolygons - list of polygons\n * @returns {poly3[]} new set of polygons\n */\nconst mergeCoplanarPolygons = (epsilon, sourcepolygons) => {\n  if (sourcepolygons.length < 2) return sourcepolygons\n\n  const normal = sourcepolygons[0].plane\n  const polygons = sourcepolygons.slice()\n  const edgeList = new Map()\n\n  while (polygons.length > 0) { // NOTE: the length of polygons WILL change\n    const polygon = polygons.shift()\n    const edges = createEdges(polygon)\n    for (let i = 0; i < edges.length; i++) {\n      const current = edges[i]\n      const opposite = findOppositeEdge(edgeList, current)\n      if (opposite) {\n        const angles = calculateAnglesBetween(current, opposite, normal)\n        if (angles[0] >= 0 && angles[1] >= 0) {\n          const edge1 = opposite.next\n          const edge2 = current.next\n          // adjust the edges, linking together opposing polygons\n          current.prev.next = opposite.next\n          current.next.prev = opposite.prev\n\n          opposite.prev.next = current.next\n          opposite.next.prev = current.prev\n\n          // remove the opposing edges\n          current.v1 = null\n          current.v2 = null\n          current.next = null\n          current.prev = null\n\n          deleteEdge(edgeList, opposite)\n\n          opposite.v1 = null\n          opposite.v2 = null\n          opposite.next = null\n          opposite.prev = null\n\n          const mergeEdges = (list, e1, e2) => {\n            const newedge = {\n              v1: e2.v1,\n              v2: e1.v2,\n              next: e1.next,\n              prev: e2.prev\n            }\n            // link in newedge\n            e2.prev.next = newedge\n            e1.next.prev = newedge\n            // remove old edges\n            deleteEdge(list, e1)\n            e1.v1 = null\n            e1.v2 = null\n            e1.next = null\n            e1.prev = null\n\n            deleteEdge(list, e2)\n            e2.v1 = null\n            e2.v2 = null\n            e2.next = null\n            e2.prev = null\n          }\n\n          if (angles[0] === 0.0) {\n            mergeEdges(edgeList, edge1, edge1.prev)\n          }\n          if (angles[1] === 0.0) {\n            mergeEdges(edgeList, edge2, edge2.prev)\n          }\n        }\n      } else {\n        if (current.next) insertEdge(edgeList, current)\n      }\n    }\n  }\n\n  // build a set of polygons from the remaining edges\n  const destpolygons = []\n  edgeList.forEach((edge) => {\n    const polygon = createPolygonAnd(edge)\n    if (polygon) destpolygons.push(polygon)\n  })\n\n  return destpolygons\n}\n\n// Normals are directional vectors with component values from 0 to 1.0, requiring specialized comparision\n// This EPS is derived from a serieas of tests to determine the optimal precision for comparing coplanar polygons,\n// as provided by the sphere primitive at high segmentation\n// This EPS is for 64 bit Number values\nconst NEPS = 1e-13\n\n// Compare two normals (unit vectors) for equality.\nconst aboutEqualNormals = (a, b) => {\n  return (Math.abs(a[0] - b[0]) <= NEPS && Math.abs(a[1] - b[1]) <= NEPS && Math.abs(a[2] - b[2]) <= NEPS)\n}\n\nconst coplanar = (plane1, plane2) => {\n  // expect the same distance from the origin, within tolerance\n  if (Math.abs(plane1[3] - plane2[3]) < 0.00000015) {\n    return aboutEqualNormals(plane1, plane2)\n  }\n  return false\n}\n\nconst mergePolygons = (epsilon, polygons) => {\n  const polygonsPerPlane = [] // elements: [plane, [poly3...]]\n  polygons.forEach((polygon) => {\n    const mapping = polygonsPerPlane.find((element) => coplanar(element[0], poly3.plane(polygon)))\n    if (mapping) {\n      const polygons = mapping[1]\n      polygons.push(polygon)\n    } else {\n      polygonsPerPlane.push([poly3.plane(polygon), [polygon]])\n    }\n  })\n\n  let destpolygons = []\n  polygonsPerPlane.forEach((mapping) => {\n    const sourcepolygons = mapping[1]\n    const retesselayedpolygons = mergeCoplanarPolygons(epsilon, sourcepolygons)\n    destpolygons = destpolygons.concat(retesselayedpolygons)\n  })\n  return destpolygons\n}\n\nmodule.exports = mergePolygons\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}}],"sources":{"node_modules/@jscad/modeling/src/operations/modifiers/mergePolygons.js":"const vec3 = require('../../maths/vec3')\n\nconst poly3 = require('../../geometries/poly3')\n\n// create a set of edges from the given polygon, and link the edges as well\nconst createEdges = (polygon) => {\n  const points = poly3.toPoints(polygon)\n  const edges = []\n  for (let i = 0; i < points.length; i++) {\n    const j = (i + 1) % points.length\n    const edge = {\n      v1: points[i],\n      v2: points[j]\n    }\n    edges.push(edge)\n  }\n  // link the edges together\n  for (let i = 0; i < edges.length; i++) {\n    const j = (i + 1) % points.length\n    edges[i].next = edges[j]\n    edges[j].prev = edges[i]\n  }\n  return edges\n}\n\nconst insertEdge = (edges, edge) => {\n  const key = `${edge.v1}:${edge.v2}`\n  edges.set(key, edge)\n}\n\nconst deleteEdge = (edges, edge) => {\n  const key = `${edge.v1}:${edge.v2}`\n  edges.delete(key)\n}\n\nconst findOppositeEdge = (edges, edge) => {\n  const key = `${edge.v2}:${edge.v1}` // NOTE: OPPOSITE OF INSERT KEY\n  return edges.get(key)\n}\n\n// calculate the two adjoining angles between the opposing edges\nconst calculateAnglesBetween = (current, opposite, normal) => {\n  let v0 = current.prev.v1\n  let v1 = current.prev.v2\n  let v2 = opposite.next.v2\n  const angle1 = calculateAngle(v0, v1, v2, normal)\n\n  v0 = opposite.prev.v1\n  v1 = opposite.prev.v2\n  v2 = current.next.v2\n  const angle2 = calculateAngle(v0, v1, v2, normal)\n\n  return [angle1, angle2]\n}\n\nconst calculateAngle = (prevpoint, point, nextpoint, normal) => {\n  const crossproduct = vec3.cross(\n    vec3.subtract(point, prevpoint),\n    vec3.subtract(nextpoint, point)\n  )\n  return vec3.dot(crossproduct, normal)\n}\n\n// create a polygon starting from the given edge (if possible)\nconst createPolygonAnd = (edge) => {\n  let polygon\n  const points = []\n  while (edge.next) {\n    const next = edge.next\n\n    points.push(edge.v1)\n\n    edge.v1 = null\n    edge.v2 = null\n    edge.next = null\n    edge.prev = null\n\n    edge = next\n  }\n  if (points.length > 0) polygon = poly3.fromPoints(points)\n  return polygon\n}\n\n/*\n * Merge COPLANAR polygons that share common edges.\n * @param {poly3[]} sourcepolygons - list of polygons\n * @returns {poly3[]} new set of polygons\n */\nconst mergeCoplanarPolygons = (epsilon, sourcepolygons) => {\n  if (sourcepolygons.length < 2) return sourcepolygons\n\n  const normal = sourcepolygons[0].plane\n  const polygons = sourcepolygons.slice()\n  const edgeList = new Map()\n\n  while (polygons.length > 0) { // NOTE: the length of polygons WILL change\n    const polygon = polygons.shift()\n    const edges = createEdges(polygon)\n    for (let i = 0; i < edges.length; i++) {\n      const current = edges[i]\n      const opposite = findOppositeEdge(edgeList, current)\n      if (opposite) {\n        const angles = calculateAnglesBetween(current, opposite, normal)\n        if (angles[0] >= 0 && angles[1] >= 0) {\n          const edge1 = opposite.next\n          const edge2 = current.next\n          // adjust the edges, linking together opposing polygons\n          current.prev.next = opposite.next\n          current.next.prev = opposite.prev\n\n          opposite.prev.next = current.next\n          opposite.next.prev = current.prev\n\n          // remove the opposing edges\n          current.v1 = null\n          current.v2 = null\n          current.next = null\n          current.prev = null\n\n          deleteEdge(edgeList, opposite)\n\n          opposite.v1 = null\n          opposite.v2 = null\n          opposite.next = null\n          opposite.prev = null\n\n          const mergeEdges = (list, e1, e2) => {\n            const newedge = {\n              v1: e2.v1,\n              v2: e1.v2,\n              next: e1.next,\n              prev: e2.prev\n            }\n            // link in newedge\n            e2.prev.next = newedge\n            e1.next.prev = newedge\n            // remove old edges\n            deleteEdge(list, e1)\n            e1.v1 = null\n            e1.v2 = null\n            e1.next = null\n            e1.prev = null\n\n            deleteEdge(list, e2)\n            e2.v1 = null\n            e2.v2 = null\n            e2.next = null\n            e2.prev = null\n          }\n\n          if (angles[0] === 0.0) {\n            mergeEdges(edgeList, edge1, edge1.prev)\n          }\n          if (angles[1] === 0.0) {\n            mergeEdges(edgeList, edge2, edge2.prev)\n          }\n        }\n      } else {\n        if (current.next) insertEdge(edgeList, current)\n      }\n    }\n  }\n\n  // build a set of polygons from the remaining edges\n  const destpolygons = []\n  edgeList.forEach((edge) => {\n    const polygon = createPolygonAnd(edge)\n    if (polygon) destpolygons.push(polygon)\n  })\n\n  return destpolygons\n}\n\n// Normals are directional vectors with component values from 0 to 1.0, requiring specialized comparision\n// This EPS is derived from a serieas of tests to determine the optimal precision for comparing coplanar polygons,\n// as provided by the sphere primitive at high segmentation\n// This EPS is for 64 bit Number values\nconst NEPS = 1e-13\n\n// Compare two normals (unit vectors) for equality.\nconst aboutEqualNormals = (a, b) => {\n  return (Math.abs(a[0] - b[0]) <= NEPS && Math.abs(a[1] - b[1]) <= NEPS && Math.abs(a[2] - b[2]) <= NEPS)\n}\n\nconst coplanar = (plane1, plane2) => {\n  // expect the same distance from the origin, within tolerance\n  if (Math.abs(plane1[3] - plane2[3]) < 0.00000015) {\n    return aboutEqualNormals(plane1, plane2)\n  }\n  return false\n}\n\nconst mergePolygons = (epsilon, polygons) => {\n  const polygonsPerPlane = [] // elements: [plane, [poly3...]]\n  polygons.forEach((polygon) => {\n    const mapping = polygonsPerPlane.find((element) => coplanar(element[0], poly3.plane(polygon)))\n    if (mapping) {\n      const polygons = mapping[1]\n      polygons.push(polygon)\n    } else {\n      polygonsPerPlane.push([poly3.plane(polygon), [polygon]])\n    }\n  })\n\n  let destpolygons = []\n  polygonsPerPlane.forEach((mapping) => {\n    const sourcepolygons = mapping[1]\n    const retesselayedpolygons = mergeCoplanarPolygons(epsilon, sourcepolygons)\n    destpolygons = destpolygons.concat(retesselayedpolygons)\n  })\n  return destpolygons\n}\n\nmodule.exports = mergePolygons\n"},"lineCount":215}},"error":null,"hash":"2b73bc7d2aad536a65ac3a4658f159ab","cacheData":{"env":{}}}