{"id":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","dependencies":[{"name":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\package.json","includedInParent":true,"mtime":1695872748353},{"name":"../CAG","loc":{"line":1,"column":20,"index":20},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\utils\\csgProjections.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAG.js"},{"name":"../constants","loc":{"line":2,"column":22,"index":84},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\utils\\csgProjections.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\constants.js"}],"generated":{"js":"const CAG = require('../CAG') // FIXME: circular dependency !\nconst {EPS} = require('../constants')\n\n// project the 3D CSG onto a plane\n// This returns a 2D CAG with the 'shadow' shape of the 3D solid when projected onto the\n // plane represented by the orthonormal basis\nconst projectToOrthoNormalBasis = function (csg, orthobasis) {\n  let cags = []\n  csg.polygons.filter(function (p) {\n    // only return polys in plane, others may disturb result\n    return p.plane.normal.minus(orthobasis.plane.normal).lengthSquared() < (EPS * EPS)\n  })\n  .map(function (polygon) {\n    let cag = polygon.projectToOrthoNormalBasis(orthobasis)\n    if (cag.sides.length > 0) {\n      cags.push(cag)\n    }\n  })\n  let result = new CAG().union(cags)\n  return result\n}\n\nmodule.exports = {projectToOrthoNormalBasis}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/csgProjections.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}}],"sources":{"node_modules/@jscad/csg/src/core/utils/csgProjections.js":"const CAG = require('../CAG') // FIXME: circular dependency !\nconst {EPS} = require('../constants')\n\n// project the 3D CSG onto a plane\n// This returns a 2D CAG with the 'shadow' shape of the 3D solid when projected onto the\n // plane represented by the orthonormal basis\nconst projectToOrthoNormalBasis = function (csg, orthobasis) {\n  let cags = []\n  csg.polygons.filter(function (p) {\n    // only return polys in plane, others may disturb result\n    return p.plane.normal.minus(orthobasis.plane.normal).lengthSquared() < (EPS * EPS)\n  })\n  .map(function (polygon) {\n    let cag = polygon.projectToOrthoNormalBasis(orthobasis)\n    if (cag.sides.length > 0) {\n      cags.push(cag)\n    }\n  })\n  let result = new CAG().union(cags)\n  return result\n}\n\nmodule.exports = {projectToOrthoNormalBasis}\n"},"lineCount":24}},"error":null,"hash":"6f785067bca9b02e2600bfd96b9ce1d8","cacheData":{"env":{}}}