{"id":"node_modules/@jscad/csg/src/core/math/Line3.js","dependencies":[{"name":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\package.json","includedInParent":true,"mtime":1695872748353},{"name":"./Vector3","loc":{"line":1,"column":25,"index":25},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Line3.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Vector3.js"},{"name":"../constants","loc":{"line":2,"column":22,"index":60},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Line3.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\constants.js"},{"name":"../utils","loc":{"line":3,"column":31,"index":107},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Line3.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\utils.js"}],"generated":{"js":"const Vector3D = require('./Vector3')\nconst {EPS} = require('../constants')\nconst {solve2Linear} = require('../utils')\n\n// # class Line3D\n// Represents a line in 3D space\n// direction must be a unit vector\n// point is a random point on the line\nconst Line3D = function (point, direction) {\n  point = new Vector3D(point)\n  direction = new Vector3D(direction)\n  this.point = point\n  this.direction = direction.unit()\n}\n\nLine3D.fromPoints = function (p1, p2) {\n  p1 = new Vector3D(p1)\n  p2 = new Vector3D(p2)\n  let direction = p2.minus(p1)\n  return new Line3D(p1, direction)\n}\n\nLine3D.fromPlanes = function (p1, p2) {\n  let direction = p1.normal.cross(p2.normal)\n  let l = direction.length()\n  if (l < EPS) {\n    throw new Error('Parallel planes')\n  }\n  direction = direction.times(1.0 / l)\n\n  let mabsx = Math.abs(direction.x)\n  let mabsy = Math.abs(direction.y)\n  let mabsz = Math.abs(direction.z)\n  let origin\n  if ((mabsx >= mabsy) && (mabsx >= mabsz)) {\n        // direction vector is mostly pointing towards x\n        // find a point p for which x is zero:\n    let r = solve2Linear(p1.normal.y, p1.normal.z, p2.normal.y, p2.normal.z, p1.w, p2.w)\n    origin = new Vector3D(0, r[0], r[1])\n  } else if ((mabsy >= mabsx) && (mabsy >= mabsz)) {\n        // find a point p for which y is zero:\n    let r = solve2Linear(p1.normal.x, p1.normal.z, p2.normal.x, p2.normal.z, p1.w, p2.w)\n    origin = new Vector3D(r[0], 0, r[1])\n  } else {\n        // find a point p for which z is zero:\n    let r = solve2Linear(p1.normal.x, p1.normal.y, p2.normal.x, p2.normal.y, p1.w, p2.w)\n    origin = new Vector3D(r[0], r[1], 0)\n  }\n  return new Line3D(origin, direction)\n}\n\nLine3D.prototype = {\n  intersectWithPlane: function (plane) {\n        // plane: plane.normal * p = plane.w\n        // line: p=line.point + labda * line.direction\n    let labda = (plane.w - plane.normal.dot(this.point)) / plane.normal.dot(this.direction)\n    let point = this.point.plus(this.direction.times(labda))\n    return point\n  },\n\n  clone: function (line) {\n    return new Line3D(this.point.clone(), this.direction.clone())\n  },\n\n  reverse: function () {\n    return new Line3D(this.point.clone(), this.direction.negated())\n  },\n\n  transform: function (matrix4x4) {\n    let newpoint = this.point.multiply4x4(matrix4x4)\n    let pointPlusDirection = this.point.plus(this.direction)\n    let newPointPlusDirection = pointPlusDirection.multiply4x4(matrix4x4)\n    let newdirection = newPointPlusDirection.minus(newpoint)\n    return new Line3D(newpoint, newdirection)\n  },\n\n  closestPointOnLine: function (point) {\n    point = new Vector3D(point)\n    let t = point.minus(this.point).dot(this.direction) / this.direction.dot(this.direction)\n    let closestpoint = this.point.plus(this.direction.times(t))\n    return closestpoint\n  },\n\n  distanceToPoint: function (point) {\n    point = new Vector3D(point)\n    let closestpoint = this.closestPointOnLine(point)\n    let distancevector = point.minus(closestpoint)\n    let distance = distancevector.length()\n    return distance\n  },\n\n  equals: function (line3d) {\n    if (!this.direction.equals(line3d.direction)) return false\n    let distance = this.distanceToPoint(line3d.point)\n    if (distance > EPS) return false\n    return true\n  }\n}\n\nmodule.exports = Line3D\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/Line3.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}}],"sources":{"node_modules/@jscad/csg/src/core/math/Line3.js":"const Vector3D = require('./Vector3')\nconst {EPS} = require('../constants')\nconst {solve2Linear} = require('../utils')\n\n// # class Line3D\n// Represents a line in 3D space\n// direction must be a unit vector\n// point is a random point on the line\nconst Line3D = function (point, direction) {\n  point = new Vector3D(point)\n  direction = new Vector3D(direction)\n  this.point = point\n  this.direction = direction.unit()\n}\n\nLine3D.fromPoints = function (p1, p2) {\n  p1 = new Vector3D(p1)\n  p2 = new Vector3D(p2)\n  let direction = p2.minus(p1)\n  return new Line3D(p1, direction)\n}\n\nLine3D.fromPlanes = function (p1, p2) {\n  let direction = p1.normal.cross(p2.normal)\n  let l = direction.length()\n  if (l < EPS) {\n    throw new Error('Parallel planes')\n  }\n  direction = direction.times(1.0 / l)\n\n  let mabsx = Math.abs(direction.x)\n  let mabsy = Math.abs(direction.y)\n  let mabsz = Math.abs(direction.z)\n  let origin\n  if ((mabsx >= mabsy) && (mabsx >= mabsz)) {\n        // direction vector is mostly pointing towards x\n        // find a point p for which x is zero:\n    let r = solve2Linear(p1.normal.y, p1.normal.z, p2.normal.y, p2.normal.z, p1.w, p2.w)\n    origin = new Vector3D(0, r[0], r[1])\n  } else if ((mabsy >= mabsx) && (mabsy >= mabsz)) {\n        // find a point p for which y is zero:\n    let r = solve2Linear(p1.normal.x, p1.normal.z, p2.normal.x, p2.normal.z, p1.w, p2.w)\n    origin = new Vector3D(r[0], 0, r[1])\n  } else {\n        // find a point p for which z is zero:\n    let r = solve2Linear(p1.normal.x, p1.normal.y, p2.normal.x, p2.normal.y, p1.w, p2.w)\n    origin = new Vector3D(r[0], r[1], 0)\n  }\n  return new Line3D(origin, direction)\n}\n\nLine3D.prototype = {\n  intersectWithPlane: function (plane) {\n        // plane: plane.normal * p = plane.w\n        // line: p=line.point + labda * line.direction\n    let labda = (plane.w - plane.normal.dot(this.point)) / plane.normal.dot(this.direction)\n    let point = this.point.plus(this.direction.times(labda))\n    return point\n  },\n\n  clone: function (line) {\n    return new Line3D(this.point.clone(), this.direction.clone())\n  },\n\n  reverse: function () {\n    return new Line3D(this.point.clone(), this.direction.negated())\n  },\n\n  transform: function (matrix4x4) {\n    let newpoint = this.point.multiply4x4(matrix4x4)\n    let pointPlusDirection = this.point.plus(this.direction)\n    let newPointPlusDirection = pointPlusDirection.multiply4x4(matrix4x4)\n    let newdirection = newPointPlusDirection.minus(newpoint)\n    return new Line3D(newpoint, newdirection)\n  },\n\n  closestPointOnLine: function (point) {\n    point = new Vector3D(point)\n    let t = point.minus(this.point).dot(this.direction) / this.direction.dot(this.direction)\n    let closestpoint = this.point.plus(this.direction.times(t))\n    return closestpoint\n  },\n\n  distanceToPoint: function (point) {\n    point = new Vector3D(point)\n    let closestpoint = this.closestPointOnLine(point)\n    let distancevector = point.minus(closestpoint)\n    let distance = distancevector.length()\n    return distance\n  },\n\n  equals: function (line3d) {\n    if (!this.direction.equals(line3d.direction)) return false\n    let distance = this.distanceToPoint(line3d.point)\n    if (distance > EPS) return false\n    return true\n  }\n}\n\nmodule.exports = Line3D\n"},"lineCount":101}},"error":null,"hash":"2576ccd1f21c4716ce083a64d9828820","cacheData":{"env":{}}}