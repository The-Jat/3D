{"id":"node_modules/@jscad/csg/src/core/CAGFactories.js","dependencies":[{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\package.json","includedInParent":true,"mtime":1695872748353},{"name":"./math/Side","loc":{"line":1,"column":21,"index":21},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAGFactories.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Side.js"},{"name":"./math/Vector2","loc":{"line":2,"column":25,"index":61},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAGFactories.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Vector2.js"},{"name":"./math/Vertex2","loc":{"line":3,"column":24,"index":103},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAGFactories.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Vertex2.js"},{"name":"./constants","loc":{"line":4,"column":26,"index":147},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAGFactories.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\constants.js"},{"name":"./utils/cagValidation","loc":{"line":5,"column":47,"index":209},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAGFactories.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\utils\\cagValidation.js"},{"name":"../api/ops-booleans","loc":{"line":6,"column":36,"index":270},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAGFactories.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\ops-booleans.js"},{"name":"./CAG","loc":{"line":13,"column":22,"index":484},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAGFactories.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAG.js"}],"generated":{"js":"const Side = require('./math/Side')\nconst Vector2D = require('./math/Vector2')\nconst Vertex2 = require('./math/Vertex2')\nconst {areaEPS} = require('./constants')\nconst {isSelfIntersecting, contains} = require('./utils/cagValidation')\nconst {union, difference} = require('../api/ops-booleans')\n\n/** Construct a CAG from a list of `Side` instances.\n * @param {Side[]} sides - list of sides\n * @returns {CAG} new CAG object\n */\nconst fromSides = function (sides) {\n  const CAG = require('./CAG') // circular dependency CAG => fromSides => CAG\n  let cag = new CAG()\n  cag.sides = sides\n  return cag\n}\n\n// Converts a CSG to a  The CSG must consist of polygons with only z coordinates +1 and -1\n// as constructed by _toCSGWall(-1, 1). This is so we can use the 3D union(), intersect() etc\nconst fromFakeCSG = function (csg) {\n  let sides = csg.polygons.map(function (p) {\n    return Side._fromFakePolygon(p)\n  })\n  .filter(function (s) {\n    return s !== null\n  })\n  return fromSides(sides)\n}\n\n/** Construct a CAG from a list of points (a polygon) or an nested array of points.\n * The rotation direction of the points is not relevant.\n * The points can define a convex or a concave polygon.\n * The polygon must not self intersect.\n * Hole detection follows the even/odd rule,\n * which means that the order of the paths is not important.\n * @param {points[]|Array.<points[]>} points - (nested) list of points in 2D space\n * @returns {CAG} new CAG object\n */\nconst fromPoints = function (points) {\n  if (!points) {\n    throw new Error('points parameter must be defined')\n  }\n  if (!Array.isArray(points)) {\n    throw new Error('points parameter must be an array')\n  }\n  if (points[0].x !== undefined ||Â typeof points[0][0] === 'number') {\n    return fromPointsArray(points)\n  }\n  if (typeof points[0][0] === 'object') {\n    return fromNestedPointsArray(points)\n  }\n  throw new Error('Unsupported points list format')\n}\n\n// Do not export the two following function (code splitting for fromPoints())\nconst fromPointsArray = function (points) {\n  if (points.length < 3) {\n    throw new Error('CAG shape needs at least 3 points')\n  }\n  let sides = []\n  let prevvertex = new Vertex2(new Vector2D(points[points.length - 1]))\n  points.map(function (point) {\n    let vertex = new Vertex2(new Vector2D(point))\n    sides.push(new Side(prevvertex, vertex))\n    prevvertex = vertex\n  })\n  let result = fromSides(sides)\n  if (isSelfIntersecting(result)) {\n    throw new Error('Polygon is self intersecting!')\n  }\n  let area = result.area()\n  if (Math.abs(area) < areaEPS) {\n    throw new Error('Degenerate polygon!')\n  }\n  if (area < 0) {\n    result = result.flipped()\n  }\n  return result.canonicalized()\n}\n\nconst fromNestedPointsArray = function (points) {\n  if (points.length === 1) {\n    return fromPoints(points[0])\n  }\n  // First pass: create a collection of CAG paths\n  let paths = []\n  points.forEach(path => {\n    paths.push(fromPointsArray(path))\n  })\n  // Second pass: make a tree of paths\n  let tree = {}\n    // for each polygon extract parents and childs polygons\n  paths.forEach((p1, i) => {\n    // check for intersection\n    paths.forEach((p2, y) => {\n      if (p1 !== p2) {\n        // create default node\n        tree[i] || (tree[i] = { parents: [], isHole: false })\n        tree[y] || (tree[y] = { parents: [], isHole: false })\n        // check if polygon2 stay in poylgon1\n        if (contains(p2, p1)) {\n          // push parent and child; odd parents number ==> hole\n          tree[i].parents.push(y)\n          tree[i].isHole = !! (tree[i].parents.length % 2)\n          tree[y].isHole = !! (tree[y].parents.length % 2)\n        }\n      }\n    })\n  })\n  // Third pass: subtract holes\n  let path = null\n  for (key in tree) {\n    path = tree[key]\n    if (path.isHole) {\n      delete tree[key] // remove holes for final pass\n      path.parents.forEach(parentKey => {\n        paths[parentKey] = difference(paths[parentKey], paths[key])\n      })\n    }\n  }\n  // Fourth and last pass: create final CAG object\n  let cag = fromSides([])\n  for (key in tree) {\n    cag = union(cag, paths[key])\n  }\n  return cag\n}\n\n/** Reconstruct a CAG from an object with identical property names.\n * @param {Object} obj - anonymous object, typically from JSON\n * @returns {CAG} new CAG object\n */\nconst fromObject = function (obj) {\n  let sides = obj.sides.map(function (s) {\n    return Side.fromObject(s)\n  })\n  let cag = fromSides(sides)\n  cag.isCanonicalized = obj.isCanonicalized\n  return cag\n}\n\n/** Construct a CAG from a list of points (a polygon).\n * Like fromPoints() but does not check if the result is a valid polygon.\n * The points MUST rotate counter clockwise.\n * The points can define a convex or a concave polygon.\n * The polygon must not self intersect.\n * @param {points[]} points - list of points in 2D space\n * @returns {CAG} new CAG object\n */\nconst fromPointsNoCheck = function (points) {\n  let sides = []\n  let prevpoint = new Vector2D(points[points.length - 1])\n  let prevvertex = new Vertex2(prevpoint)\n  points.map(function (p) {\n    let point = new Vector2D(p)\n    let vertex = new Vertex2(point)\n    let side = new Side(prevvertex, vertex)\n    sides.push(side)\n    prevvertex = vertex\n  })\n  return fromSides(sides)\n}\n\n/** Construct a CAG from a 2d-path (a closed sequence of points).\n * Like fromPoints() but does not check if the result is a valid polygon.\n * @param {path} Path2 - a Path2 path\n * @returns {CAG} new CAG object\n */\nconst fromPath2 = function (path) {\n  if (!path.isClosed()) throw new Error('The path should be closed!')\n  return fromPoints(path.getPoints())\n}\n\n/** Reconstruct a CAG from the output of toCompactBinary().\n * @param {CompactBinary} bin - see toCompactBinary()\n * @returns {CAG} new CAG object\n */\nconst fromCompactBinary = function (bin) {\n  if (bin['class'] !== 'CAG') throw new Error('Not a CAG')\n  let vertices = []\n  let vertexData = bin.vertexData\n  let numvertices = vertexData.length / 2\n  let arrayindex = 0\n  for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {\n    let x = vertexData[arrayindex++]\n    let y = vertexData[arrayindex++]\n    let pos = new Vector2D(x, y)\n    let vertex = new Vertex2(pos)\n    vertices.push(vertex)\n  }\n  let sides = []\n  let numsides = bin.sideVertexIndices.length / 2\n  arrayindex = 0\n  for (let sideindex = 0; sideindex < numsides; sideindex++) {\n    let vertexindex0 = bin.sideVertexIndices[arrayindex++]\n    let vertexindex1 = bin.sideVertexIndices[arrayindex++]\n    let side = new Side(vertices[vertexindex0], vertices[vertexindex1])\n    sides.push(side)\n  }\n  let cag = fromSides(sides)\n  cag.isCanonicalized = true\n  return cag\n}\n\nmodule.exports = {\n  fromSides,\n  fromObject,\n  fromPoints,\n  fromPointsNoCheck,\n  fromPath2,\n  fromFakeCSG,\n  fromCompactBinary\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAGFactories.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}}],"sources":{"node_modules/@jscad/csg/src/core/CAGFactories.js":"const Side = require('./math/Side')\nconst Vector2D = require('./math/Vector2')\nconst Vertex2 = require('./math/Vertex2')\nconst {areaEPS} = require('./constants')\nconst {isSelfIntersecting, contains} = require('./utils/cagValidation')\nconst {union, difference} = require('../api/ops-booleans')\n\n/** Construct a CAG from a list of `Side` instances.\n * @param {Side[]} sides - list of sides\n * @returns {CAG} new CAG object\n */\nconst fromSides = function (sides) {\n  const CAG = require('./CAG') // circular dependency CAG => fromSides => CAG\n  let cag = new CAG()\n  cag.sides = sides\n  return cag\n}\n\n// Converts a CSG to a  The CSG must consist of polygons with only z coordinates +1 and -1\n// as constructed by _toCSGWall(-1, 1). This is so we can use the 3D union(), intersect() etc\nconst fromFakeCSG = function (csg) {\n  let sides = csg.polygons.map(function (p) {\n    return Side._fromFakePolygon(p)\n  })\n  .filter(function (s) {\n    return s !== null\n  })\n  return fromSides(sides)\n}\n\n/** Construct a CAG from a list of points (a polygon) or an nested array of points.\n * The rotation direction of the points is not relevant.\n * The points can define a convex or a concave polygon.\n * The polygon must not self intersect.\n * Hole detection follows the even/odd rule,\n * which means that the order of the paths is not important.\n * @param {points[]|Array.<points[]>} points - (nested) list of points in 2D space\n * @returns {CAG} new CAG object\n */\nconst fromPoints = function (points) {\n  if (!points) {\n    throw new Error('points parameter must be defined')\n  }\n  if (!Array.isArray(points)) {\n    throw new Error('points parameter must be an array')\n  }\n  if (points[0].x !== undefined ||Â typeof points[0][0] === 'number') {\n    return fromPointsArray(points)\n  }\n  if (typeof points[0][0] === 'object') {\n    return fromNestedPointsArray(points)\n  }\n  throw new Error('Unsupported points list format')\n}\n\n// Do not export the two following function (code splitting for fromPoints())\nconst fromPointsArray = function (points) {\n  if (points.length < 3) {\n    throw new Error('CAG shape needs at least 3 points')\n  }\n  let sides = []\n  let prevvertex = new Vertex2(new Vector2D(points[points.length - 1]))\n  points.map(function (point) {\n    let vertex = new Vertex2(new Vector2D(point))\n    sides.push(new Side(prevvertex, vertex))\n    prevvertex = vertex\n  })\n  let result = fromSides(sides)\n  if (isSelfIntersecting(result)) {\n    throw new Error('Polygon is self intersecting!')\n  }\n  let area = result.area()\n  if (Math.abs(area) < areaEPS) {\n    throw new Error('Degenerate polygon!')\n  }\n  if (area < 0) {\n    result = result.flipped()\n  }\n  return result.canonicalized()\n}\n\nconst fromNestedPointsArray = function (points) {\n  if (points.length === 1) {\n    return fromPoints(points[0])\n  }\n  // First pass: create a collection of CAG paths\n  let paths = []\n  points.forEach(path => {\n    paths.push(fromPointsArray(path))\n  })\n  // Second pass: make a tree of paths\n  let tree = {}\n    // for each polygon extract parents and childs polygons\n  paths.forEach((p1, i) => {\n    // check for intersection\n    paths.forEach((p2, y) => {\n      if (p1 !== p2) {\n        // create default node\n        tree[i] || (tree[i] = { parents: [], isHole: false })\n        tree[y] || (tree[y] = { parents: [], isHole: false })\n        // check if polygon2 stay in poylgon1\n        if (contains(p2, p1)) {\n          // push parent and child; odd parents number ==> hole\n          tree[i].parents.push(y)\n          tree[i].isHole = !! (tree[i].parents.length % 2)\n          tree[y].isHole = !! (tree[y].parents.length % 2)\n        }\n      }\n    })\n  })\n  // Third pass: subtract holes\n  let path = null\n  for (key in tree) {\n    path = tree[key]\n    if (path.isHole) {\n      delete tree[key] // remove holes for final pass\n      path.parents.forEach(parentKey => {\n        paths[parentKey] = difference(paths[parentKey], paths[key])\n      })\n    }\n  }\n  // Fourth and last pass: create final CAG object\n  let cag = fromSides([])\n  for (key in tree) {\n    cag = union(cag, paths[key])\n  }\n  return cag\n}\n\n/** Reconstruct a CAG from an object with identical property names.\n * @param {Object} obj - anonymous object, typically from JSON\n * @returns {CAG} new CAG object\n */\nconst fromObject = function (obj) {\n  let sides = obj.sides.map(function (s) {\n    return Side.fromObject(s)\n  })\n  let cag = fromSides(sides)\n  cag.isCanonicalized = obj.isCanonicalized\n  return cag\n}\n\n/** Construct a CAG from a list of points (a polygon).\n * Like fromPoints() but does not check if the result is a valid polygon.\n * The points MUST rotate counter clockwise.\n * The points can define a convex or a concave polygon.\n * The polygon must not self intersect.\n * @param {points[]} points - list of points in 2D space\n * @returns {CAG} new CAG object\n */\nconst fromPointsNoCheck = function (points) {\n  let sides = []\n  let prevpoint = new Vector2D(points[points.length - 1])\n  let prevvertex = new Vertex2(prevpoint)\n  points.map(function (p) {\n    let point = new Vector2D(p)\n    let vertex = new Vertex2(point)\n    let side = new Side(prevvertex, vertex)\n    sides.push(side)\n    prevvertex = vertex\n  })\n  return fromSides(sides)\n}\n\n/** Construct a CAG from a 2d-path (a closed sequence of points).\n * Like fromPoints() but does not check if the result is a valid polygon.\n * @param {path} Path2 - a Path2 path\n * @returns {CAG} new CAG object\n */\nconst fromPath2 = function (path) {\n  if (!path.isClosed()) throw new Error('The path should be closed!')\n  return fromPoints(path.getPoints())\n}\n\n/** Reconstruct a CAG from the output of toCompactBinary().\n * @param {CompactBinary} bin - see toCompactBinary()\n * @returns {CAG} new CAG object\n */\nconst fromCompactBinary = function (bin) {\n  if (bin['class'] !== 'CAG') throw new Error('Not a CAG')\n  let vertices = []\n  let vertexData = bin.vertexData\n  let numvertices = vertexData.length / 2\n  let arrayindex = 0\n  for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {\n    let x = vertexData[arrayindex++]\n    let y = vertexData[arrayindex++]\n    let pos = new Vector2D(x, y)\n    let vertex = new Vertex2(pos)\n    vertices.push(vertex)\n  }\n  let sides = []\n  let numsides = bin.sideVertexIndices.length / 2\n  arrayindex = 0\n  for (let sideindex = 0; sideindex < numsides; sideindex++) {\n    let vertexindex0 = bin.sideVertexIndices[arrayindex++]\n    let vertexindex1 = bin.sideVertexIndices[arrayindex++]\n    let side = new Side(vertices[vertexindex0], vertices[vertexindex1])\n    sides.push(side)\n  }\n  let cag = fromSides(sides)\n  cag.isCanonicalized = true\n  return cag\n}\n\nmodule.exports = {\n  fromSides,\n  fromObject,\n  fromPoints,\n  fromPointsNoCheck,\n  fromPath2,\n  fromFakeCSG,\n  fromCompactBinary\n}\n"},"lineCount":215}},"error":null,"hash":"c97bfe28d32dae4ab085ff8529672d1b","cacheData":{"env":{}}}