{"id":"node_modules/@jscad/csg/src/core/CSG.js","dependencies":[{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\package.json","includedInParent":true,"mtime":1695872748353},{"name":"./trees","loc":{"line":1,"column":21,"index":21},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CSG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\trees.js"},{"name":"./math/Polygon3","loc":{"line":2,"column":24,"index":56},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CSG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Polygon3.js"},{"name":"./math/Plane","loc":{"line":3,"column":22,"index":97},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CSG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Plane.js"},{"name":"./math/OrthoNormalBasis","loc":{"line":4,"column":33,"index":146},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CSG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\OrthoNormalBasis.js"},{"name":"./CAG","loc":{"line":6,"column":20,"index":194},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CSG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAG.js"},{"name":"./Properties","loc":{"line":8,"column":27,"index":327},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CSG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\Properties.js"},{"name":"./CSGFactories","loc":{"line":9,"column":31,"index":374},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CSG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CSGFactories.js"},{"name":"./utils/fixTJunctions","loc":{"line":11,"column":30,"index":455},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CSG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\utils\\fixTJunctions.js"},{"name":"./utils/canonicalize","loc":{"line":12,"column":29,"index":509},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CSG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\utils\\canonicalize.js"},{"name":"./utils/retesellate","loc":{"line":13,"column":28,"index":561},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CSG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\utils\\retesellate.js"},{"name":"./utils/csgMeasurements","loc":{"line":14,"column":25,"index":609},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CSG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\utils\\csgMeasurements.js"},{"name":"./utils/csgProjections","loc":{"line":15,"column":44,"index":680},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CSG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\utils\\csgProjections.js"},{"name":"../api/ops-cnc","loc":{"line":17,"column":110,"index":817},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CSG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\ops-cnc.js"},{"name":"../api/ops-cuts","loc":{"line":18,"column":41,"index":876},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CSG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\ops-cuts.js"},{"name":"../api/center","loc":{"line":19,"column":23,"index":918},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CSG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\center.js"},{"name":"../api/ops-expandContract","loc":{"line":20,"column":56,"index":991},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CSG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\ops-expandContract.js"}],"generated":{"js":"const Tree = require('./trees')\nconst Polygon = require('./math/Polygon3')\nconst Plane = require('./math/Plane')\nconst OrthoNormalBasis = require('./math/OrthoNormalBasis')\n\nconst CAG = require('./CAG') // FIXME: for some weird reason if CAG is imported AFTER frompolygons, a lot of things break???\n\nconst Properties = require('./Properties')\nconst {fromPolygons} = require('./CSGFactories') // FIXME: circular dependency !\n\nconst fixTJunctions = require('./utils/fixTJunctions')\nconst canonicalize = require('./utils/canonicalize')\nconst retesselate = require('./utils/retesellate')\nconst {bounds} = require('./utils/csgMeasurements')\nconst {projectToOrthoNormalBasis} = require('./utils/csgProjections')\n\nconst {lieFlat, getTransformationToFlatLying, getTransformationAndInverseTransformationToFlatLying} = require('../api/ops-cnc')\nconst {sectionCut, cutByPlane} = require('../api/ops-cuts')\nconst center = require('../api/center')\nconst {expand, contract, expandedShellOfCCSG} = require('../api/ops-expandContract')\n\n/** Class CSG\n * Holds a binary space partition tree representing a 3D solid. Two solids can\n * be combined using the `union()`, `subtract()`, and `intersect()` methods.\n * @constructor\n */\nlet CSG = function () {\n  this.polygons = []\n  this.properties = new Properties()\n  this.isCanonicalized = true\n  this.isRetesselated = true\n}\n\nCSG.prototype = {\n  /**\n   * Return a new CSG solid representing the space in either this solid or\n   * in the given solids. Neither this solid nor the given solids are modified.\n   * @param {CSG[]} csg - list of CSG objects\n   * @returns {CSG} new CSG object\n   * @example\n   * let C = A.union(B)\n   * @example\n   * +-------+            +-------+\n   * |       |            |       |\n   * |   A   |            |       |\n   * |    +--+----+   =   |       +----+\n   * +----+--+    |       +----+       |\n   *      |   B   |            |       |\n   *      |       |            |       |\n   *      +-------+            +-------+\n   */\n  union: function (csg) {\n    let csgs\n    if (csg instanceof Array) {\n      csgs = csg.slice(0)\n      csgs.push(this)\n    } else {\n      csgs = [this, csg]\n    }\n\n    let i\n    // combine csg pairs in a way that forms a balanced binary tree pattern\n    for (i = 1; i < csgs.length; i += 2) {\n      csgs.push(csgs[i - 1].unionSub(csgs[i]))\n    }\n    return csgs[i - 1].reTesselated().canonicalized()\n  },\n\n  unionSub: function (csg, retesselate, canonicalize) {\n    if (!this.mayOverlap(csg)) {\n      return this.unionForNonIntersecting(csg)\n    } else {\n      let a = new Tree(this.polygons)\n      let b = new Tree(csg.polygons)\n      a.clipTo(b, false)\n\n            // b.clipTo(a, true); // ERROR: this doesn't work\n      b.clipTo(a)\n      b.invert()\n      b.clipTo(a)\n      b.invert()\n\n      let newpolygons = a.allPolygons().concat(b.allPolygons())\n      let result = fromPolygons(newpolygons)\n      result.properties = this.properties._merge(csg.properties)\n      if (retesselate) result = result.reTesselated()\n      if (canonicalize) result = result.canonicalized()\n      return result\n    }\n  },\n\n  // Like union, but when we know that the two solids are not intersecting\n  // Do not use if you are not completely sure that the solids do not intersect!\n  unionForNonIntersecting: function (csg) {\n    let newpolygons = this.polygons.concat(csg.polygons)\n    let result = fromPolygons(newpolygons)\n    result.properties = this.properties._merge(csg.properties)\n    result.isCanonicalized = this.isCanonicalized && csg.isCanonicalized\n    result.isRetesselated = this.isRetesselated && csg.isRetesselated\n    return result\n  },\n\n  /**\n   * Return a new CSG solid representing space in this solid but\n   * not in the given solids. Neither this solid nor the given solids are modified.\n   * @param {CSG[]} csg - list of CSG objects\n   * @returns {CSG} new CSG object\n   * @example\n   * let C = A.subtract(B)\n   * @example\n   * +-------+            +-------+\n   * |       |            |       |\n   * |   A   |            |       |\n   * |    +--+----+   =   |    +--+\n   * +----+--+    |       +----+\n   *      |   B   |\n   *      |       |\n   *      +-------+\n   */\n  subtract: function (csg) {\n    let csgs\n    if (csg instanceof Array) {\n      csgs = csg\n    } else {\n      csgs = [csg]\n    }\n    let result = this\n    for (let i = 0; i < csgs.length; i++) {\n      let islast = (i === (csgs.length - 1))\n      result = result.subtractSub(csgs[i], islast, islast)\n    }\n    return result\n  },\n\n  subtractSub: function (csg, retesselate, canonicalize) {\n    let a = new Tree(this.polygons)\n    let b = new Tree(csg.polygons)\n    a.invert()\n    a.clipTo(b)\n    b.clipTo(a, true)\n    a.addPolygons(b.allPolygons())\n    a.invert()\n    let result = fromPolygons(a.allPolygons())\n    result.properties = this.properties._merge(csg.properties)\n    if (retesselate) result = result.reTesselated()\n    if (canonicalize) result = result.canonicalized()\n    return result\n  },\n\n  /**\n   * Return a new CSG solid representing space in both this solid and\n   * in the given solids. Neither this solid nor the given solids are modified.\n   * @param {CSG[]} csg - list of CSG objects\n   * @returns {CSG} new CSG object\n   * @example\n   * let C = A.intersect(B)\n   * @example\n   * +-------+\n   * |       |\n   * |   A   |\n   * |    +--+----+   =   +--+\n   * +----+--+    |       +--+\n   *      |   B   |\n   *      |       |\n   *      +-------+\n   */\n  intersect: function (csg) {\n    let csgs\n    if (csg instanceof Array) {\n      csgs = csg\n    } else {\n      csgs = [csg]\n    }\n    let result = this\n    for (let i = 0; i < csgs.length; i++) {\n      let islast = (i === (csgs.length - 1))\n      result = result.intersectSub(csgs[i], islast, islast)\n    }\n    return result\n  },\n\n  intersectSub: function (csg, retesselate, canonicalize) {\n    let a = new Tree(this.polygons)\n    let b = new Tree(csg.polygons)\n    a.invert()\n    b.clipTo(a)\n    b.invert()\n    a.clipTo(b)\n    b.clipTo(a)\n    a.addPolygons(b.allPolygons())\n    a.invert()\n    let result = fromPolygons(a.allPolygons())\n    result.properties = this.properties._merge(csg.properties)\n    if (retesselate) result = result.reTesselated()\n    if (canonicalize) result = result.canonicalized()\n    return result\n  },\n\n  /**\n   * Return a new CSG solid with solid and empty space switched.\n   * This solid is not modified.\n   * @returns {CSG} new CSG object\n   * @example\n   * let B = A.invert()\n   */\n  invert: function () {\n    let flippedpolygons = this.polygons.map(function (p) {\n      return p.flipped()\n    })\n    return fromPolygons(flippedpolygons)\n    // TODO: flip properties?\n  },\n\n  // Affine transformation of CSG object. Returns a new CSG object\n  transform1: function (matrix4x4) {\n    let newpolygons = this.polygons.map(function (p) {\n      return p.transform(matrix4x4)\n    })\n    let result = fromPolygons(newpolygons)\n    result.properties = this.properties._transform(matrix4x4)\n    result.isRetesselated = this.isRetesselated\n    return result\n  },\n\n  /**\n   * Return a new CSG solid that is transformed using the given Matrix.\n   * Several matrix transformations can be combined before transforming this solid.\n   * @param {CSG.Matrix4x4} matrix4x4 - matrix to be applied\n   * @returns {CSG} new CSG object\n   * @example\n   * var m = new CSG.Matrix4x4()\n   * m = m.multiply(CSG.Matrix4x4.rotationX(40))\n   * m = m.multiply(CSG.Matrix4x4.translation([-.5, 0, 0]))\n   * let B = A.transform(m)\n   */\n  transform: function (matrix4x4) {\n    let ismirror = matrix4x4.isMirroring()\n    let transformedvertices = {}\n    let transformedplanes = {}\n    let newpolygons = this.polygons.map(function (p) {\n      let newplane\n      let plane = p.plane\n      let planetag = plane.getTag()\n      if (planetag in transformedplanes) {\n        newplane = transformedplanes[planetag]\n      } else {\n        newplane = plane.transform(matrix4x4)\n        transformedplanes[planetag] = newplane\n      }\n      let newvertices = p.vertices.map(function (v) {\n        let newvertex\n        let vertextag = v.getTag()\n        if (vertextag in transformedvertices) {\n          newvertex = transformedvertices[vertextag]\n        } else {\n          newvertex = v.transform(matrix4x4)\n          transformedvertices[vertextag] = newvertex\n        }\n        return newvertex\n      })\n      if (ismirror) newvertices.reverse()\n      return new Polygon(newvertices, p.shared, newplane)\n    })\n    let result = fromPolygons(newpolygons)\n    result.properties = this.properties._transform(matrix4x4)\n    result.isRetesselated = this.isRetesselated\n    result.isCanonicalized = this.isCanonicalized\n    return result\n  },\n\n  // ALIAS !\n  center: function (axes) {\n    return center({axes: axes},[this])\n  },\n\n  // ALIAS !\n  expand: function (radius, resolution) {\n    return expand(this, radius, resolution)\n  },\n\n  // ALIAS !\n  contract: function (radius, resolution) {\n    return contract(this, radius, resolution)\n  },\n\n  // ALIAS !\n  expandedShell: function (radius, resolution, unionWithThis) {\n    return expandedShellOfCCSG(this, radius, resolution, unionWithThis)\n  },\n\n  // cut the solid at a plane, and stretch the cross-section found along plane normal\n  // note: only used in roundedCube() internally\n  stretchAtPlane: function (normal, point, length) {\n    let plane = Plane.fromNormalAndPoint(normal, point)\n    let onb = new OrthoNormalBasis(plane)\n    let crosssect = this.sectionCut(onb)\n    let midpiece = crosssect.extrudeInOrthonormalBasis(onb, length)\n    let piece1 = this.cutByPlane(plane)\n    let piece2 = this.cutByPlane(plane.flipped())\n    let result = piece1.union([midpiece, piece2.translate(plane.normal.times(length))])\n    return result\n  },\n\n  // ALIAS !\n  canonicalized: function () {\n    return canonicalize(this)\n  },\n\n  // ALIAS !\n  reTesselated: function () {\n    return retesselate(this)\n  },\n\n  // ALIAS !\n  fixTJunctions: function () {\n    return fixTJunctions(fromPolygons, this)\n  },\n\n  // ALIAS !\n  getBounds: function () {\n    return bounds(this)\n  },\n\n  /** returns true if there is a possibility that the two solids overlap\n   * returns false if we can be sure that they do not overlap\n   * NOTE: this is critical as it is used in UNIONs\n   * @param  {CSG} csg\n   */\n  mayOverlap: function (csg) {\n    if ((this.polygons.length === 0) || (csg.polygons.length === 0)) {\n      return false\n    } else {\n      let mybounds = bounds(this)\n      let otherbounds = bounds(csg)\n      if (mybounds[1].x < otherbounds[0].x) return false\n      if (mybounds[0].x > otherbounds[1].x) return false\n      if (mybounds[1].y < otherbounds[0].y) return false\n      if (mybounds[0].y > otherbounds[1].y) return false\n      if (mybounds[1].z < otherbounds[0].z) return false\n      if (mybounds[0].z > otherbounds[1].z) return false\n      return true\n    }\n  },\n\n  // ALIAS !\n  cutByPlane: function (plane) {\n    return cutByPlane(this, plane)\n  },\n\n  /**\n   * Connect a solid to another solid, such that two Connectors become connected\n   * @param  {Connector} myConnector a Connector of this solid\n   * @param  {Connector} otherConnector a Connector to which myConnector should be connected\n   * @param  {Boolean} mirror false: the 'axis' vectors of the connectors should point in the same direction\n   * true: the 'axis' vectors of the connectors should point in opposite direction\n   * @param  {Float} normalrotation degrees of rotation between the 'normal' vectors of the two\n   * connectors\n   * @returns {CSG} this csg, tranformed accordingly\n   */\n  connectTo: function (myConnector, otherConnector, mirror, normalrotation) {\n    let matrix = myConnector.getTransformationTo(otherConnector, mirror, normalrotation)\n    return this.transform(matrix)\n  },\n\n  /**\n   * set the .shared property of all polygons\n   * @param  {Object} shared\n   * @returns {CSG} Returns a new CSG solid, the original is unmodified!\n   */\n  setShared: function (shared) {\n    let polygons = this.polygons.map(function (p) {\n      return new Polygon(p.vertices, shared, p.plane)\n    })\n    let result = fromPolygons(polygons)\n    result.properties = this.properties // keep original properties\n    result.isRetesselated = this.isRetesselated\n    result.isCanonicalized = this.isCanonicalized\n    return result\n  },\n\n  /** sets the color of this csg: non mutating, returns a new CSG\n   * @param  {Object} args\n   * @returns {CSG} a copy of this CSG, with the given color\n   */\n  setColor: function (args) {\n    let newshared = Polygon.Shared.fromColor.apply(this, arguments)\n    return this.setShared(newshared)\n  },\n\n  // ALIAS !\n  getTransformationAndInverseTransformationToFlatLying: function () {\n    return getTransformationAndInverseTransformationToFlatLying(this)\n  },\n\n  // ALIAS !\n  getTransformationToFlatLying: function () {\n    return getTransformationToFlatLying(this)\n  },\n\n  // ALIAS !\n  lieFlat: function () {\n    return lieFlat(this)\n  },\n\n  // project the 3D CSG onto a plane\n  // This returns a 2D CAG with the 'shadow' shape of the 3D solid when projected onto the\n  // plane represented by the orthonormal basis\n  projectToOrthoNormalBasis: function (orthobasis) {\n    // FIXME:  DEPENDS ON CAG !!\n    return projectToOrthoNormalBasis(this, orthobasis)\n  },\n\n  // FIXME: not finding any uses within our code ?\n  sectionCut: function (orthobasis) {\n    return sectionCut(this, orthobasis)\n  },\n\n  /**\n   * Returns an array of values for the requested features of this solid.\n   * Supported Features: 'volume', 'area'\n   * @param {String[]} features - list of features to calculate\n   * @returns {Float[]} values\n   * @example\n   * let volume = A.getFeatures('volume')\n   * let values = A.getFeatures('area','volume')\n   */\n  getFeatures: function (features) {\n    if (!(features instanceof Array)) {\n      features = [features]\n    }\n    let result = this.toTriangles().map(function (triPoly) {\n      return triPoly.getTetraFeatures(features)\n    })\n    .reduce(function (pv, v) {\n      return v.map(function (feat, i) {\n        return feat + (pv === 0 ? 0 : pv[i])\n      })\n    }, 0)\n    return (result.length === 1) ? result[0] : result\n  },\n  /** @return {Polygon[]} The list of polygons. */\n  toPolygons: function () {\n    return this.polygons\n  },\n\n  toString: function () {\n    let result = 'CSG solid:\\n'\n    this.polygons.map(function (p) {\n      result += p.toString()\n    })\n    return result\n  },\n\n  /** returns a compact binary representation of this csg\n   * usually used to transfer CSG objects to/from webworkes\n   * NOTE: very interesting compact format, with a lot of reusable ideas\n   * @returns {Object} compact binary representation of a CSG\n   */\n  toCompactBinary: function () {\n    let csg = this.canonicalized()\n    let numpolygons = csg.polygons.length\n    let numpolygonvertices = 0\n\n    let numvertices = 0\n    let vertexmap = {}\n    let vertices = []\n\n    let numplanes = 0\n    let planemap = {}\n    let planes = []\n\n    let shareds = []\n    let sharedmap = {}\n    let numshared = 0\n        // for (let i = 0, iMax = csg.polygons.length; i < iMax; i++) {\n        //  let p = csg.polygons[i];\n        //  for (let j = 0, jMax = p.length; j < jMax; j++) {\n        //      ++numpolygonvertices;\n        //      let vertextag = p[j].getTag();\n        //      if(!(vertextag in vertexmap)) {\n        //          vertexmap[vertextag] = numvertices++;\n        //          vertices.push(p[j]);\n        //      }\n        //  }\n    csg.polygons.map(function (polygon) {\n      // FIXME: why use map if we do not return anything ?\n      // either for... or forEach\n      polygon.vertices.map(function (vertex) {\n        ++numpolygonvertices\n        let vertextag = vertex.getTag()\n        if (!(vertextag in vertexmap)) {\n          vertexmap[vertextag] = numvertices++\n          vertices.push(vertex)\n        }\n      })\n\n      let planetag = polygon.plane.getTag()\n      if (!(planetag in planemap)) {\n        planemap[planetag] = numplanes++\n        planes.push(polygon.plane)\n      }\n      let sharedtag = polygon.shared.getTag()\n      if (!(sharedtag in sharedmap)) {\n        sharedmap[sharedtag] = numshared++\n        shareds.push(polygon.shared)\n      }\n    })\n\n    let numVerticesPerPolygon = new Uint32Array(numpolygons)\n    let polygonSharedIndexes = new Uint32Array(numpolygons)\n    let polygonVertices = new Uint32Array(numpolygonvertices)\n    let polygonPlaneIndexes = new Uint32Array(numpolygons)\n    let vertexData = new Float64Array(numvertices * 3)\n    let planeData = new Float64Array(numplanes * 4)\n    let polygonVerticesIndex = 0\n\n    // FIXME: doublecheck : why does it go through the whole polygons again?\n    // can we optimise that ? (perhap due to needing size to init buffers above)\n    for (let polygonindex = 0; polygonindex < numpolygons; ++polygonindex) {\n      let polygon = csg.polygons[polygonindex]\n      numVerticesPerPolygon[polygonindex] = polygon.vertices.length\n      polygon.vertices.map(function (vertex) {\n        let vertextag = vertex.getTag()\n        let vertexindex = vertexmap[vertextag]\n        polygonVertices[polygonVerticesIndex++] = vertexindex\n      })\n      let planetag = polygon.plane.getTag()\n      let planeindex = planemap[planetag]\n      polygonPlaneIndexes[polygonindex] = planeindex\n      let sharedtag = polygon.shared.getTag()\n      let sharedindex = sharedmap[sharedtag]\n      polygonSharedIndexes[polygonindex] = sharedindex\n    }\n    let verticesArrayIndex = 0\n    vertices.map(function (vertex) {\n      const pos = vertex.pos\n      vertexData[verticesArrayIndex++] = pos._x\n      vertexData[verticesArrayIndex++] = pos._y\n      vertexData[verticesArrayIndex++] = pos._z\n    })\n    let planesArrayIndex = 0\n    planes.map(function (plane) {\n      const normal = plane.normal\n      planeData[planesArrayIndex++] = normal._x\n      planeData[planesArrayIndex++] = normal._y\n      planeData[planesArrayIndex++] = normal._z\n      planeData[planesArrayIndex++] = plane.w\n    })\n\n    let result = {\n      'class': 'CSG',\n      numPolygons: numpolygons,\n      numVerticesPerPolygon: numVerticesPerPolygon,\n      polygonPlaneIndexes: polygonPlaneIndexes,\n      polygonSharedIndexes: polygonSharedIndexes,\n      polygonVertices: polygonVertices,\n      vertexData: vertexData,\n      planeData: planeData,\n      shared: shareds\n    }\n    return result\n  },\n\n  /** returns the triangles of this csg\n   * @returns {Polygons} triangulated polygons\n   */\n  toTriangles: function () {\n    let polygons = []\n    this.polygons.forEach(function (poly) {\n      let firstVertex = poly.vertices[0]\n      for (let i = poly.vertices.length - 3; i >= 0; i--) {\n        polygons.push(new Polygon(\n          [\n            firstVertex,\n            poly.vertices[i + 1],\n            poly.vertices[i + 2]\n          ],\n          poly.shared,\n          poly.plane))\n      }\n    })\n    return polygons\n  }\n}\n\nmodule.exports = CSG\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CSG.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}}],"sources":{"node_modules/@jscad/csg/src/core/CSG.js":"const Tree = require('./trees')\nconst Polygon = require('./math/Polygon3')\nconst Plane = require('./math/Plane')\nconst OrthoNormalBasis = require('./math/OrthoNormalBasis')\n\nconst CAG = require('./CAG') // FIXME: for some weird reason if CAG is imported AFTER frompolygons, a lot of things break???\n\nconst Properties = require('./Properties')\nconst {fromPolygons} = require('./CSGFactories') // FIXME: circular dependency !\n\nconst fixTJunctions = require('./utils/fixTJunctions')\nconst canonicalize = require('./utils/canonicalize')\nconst retesselate = require('./utils/retesellate')\nconst {bounds} = require('./utils/csgMeasurements')\nconst {projectToOrthoNormalBasis} = require('./utils/csgProjections')\n\nconst {lieFlat, getTransformationToFlatLying, getTransformationAndInverseTransformationToFlatLying} = require('../api/ops-cnc')\nconst {sectionCut, cutByPlane} = require('../api/ops-cuts')\nconst center = require('../api/center')\nconst {expand, contract, expandedShellOfCCSG} = require('../api/ops-expandContract')\n\n/** Class CSG\n * Holds a binary space partition tree representing a 3D solid. Two solids can\n * be combined using the `union()`, `subtract()`, and `intersect()` methods.\n * @constructor\n */\nlet CSG = function () {\n  this.polygons = []\n  this.properties = new Properties()\n  this.isCanonicalized = true\n  this.isRetesselated = true\n}\n\nCSG.prototype = {\n  /**\n   * Return a new CSG solid representing the space in either this solid or\n   * in the given solids. Neither this solid nor the given solids are modified.\n   * @param {CSG[]} csg - list of CSG objects\n   * @returns {CSG} new CSG object\n   * @example\n   * let C = A.union(B)\n   * @example\n   * +-------+            +-------+\n   * |       |            |       |\n   * |   A   |            |       |\n   * |    +--+----+   =   |       +----+\n   * +----+--+    |       +----+       |\n   *      |   B   |            |       |\n   *      |       |            |       |\n   *      +-------+            +-------+\n   */\n  union: function (csg) {\n    let csgs\n    if (csg instanceof Array) {\n      csgs = csg.slice(0)\n      csgs.push(this)\n    } else {\n      csgs = [this, csg]\n    }\n\n    let i\n    // combine csg pairs in a way that forms a balanced binary tree pattern\n    for (i = 1; i < csgs.length; i += 2) {\n      csgs.push(csgs[i - 1].unionSub(csgs[i]))\n    }\n    return csgs[i - 1].reTesselated().canonicalized()\n  },\n\n  unionSub: function (csg, retesselate, canonicalize) {\n    if (!this.mayOverlap(csg)) {\n      return this.unionForNonIntersecting(csg)\n    } else {\n      let a = new Tree(this.polygons)\n      let b = new Tree(csg.polygons)\n      a.clipTo(b, false)\n\n            // b.clipTo(a, true); // ERROR: this doesn't work\n      b.clipTo(a)\n      b.invert()\n      b.clipTo(a)\n      b.invert()\n\n      let newpolygons = a.allPolygons().concat(b.allPolygons())\n      let result = fromPolygons(newpolygons)\n      result.properties = this.properties._merge(csg.properties)\n      if (retesselate) result = result.reTesselated()\n      if (canonicalize) result = result.canonicalized()\n      return result\n    }\n  },\n\n  // Like union, but when we know that the two solids are not intersecting\n  // Do not use if you are not completely sure that the solids do not intersect!\n  unionForNonIntersecting: function (csg) {\n    let newpolygons = this.polygons.concat(csg.polygons)\n    let result = fromPolygons(newpolygons)\n    result.properties = this.properties._merge(csg.properties)\n    result.isCanonicalized = this.isCanonicalized && csg.isCanonicalized\n    result.isRetesselated = this.isRetesselated && csg.isRetesselated\n    return result\n  },\n\n  /**\n   * Return a new CSG solid representing space in this solid but\n   * not in the given solids. Neither this solid nor the given solids are modified.\n   * @param {CSG[]} csg - list of CSG objects\n   * @returns {CSG} new CSG object\n   * @example\n   * let C = A.subtract(B)\n   * @example\n   * +-------+            +-------+\n   * |       |            |       |\n   * |   A   |            |       |\n   * |    +--+----+   =   |    +--+\n   * +----+--+    |       +----+\n   *      |   B   |\n   *      |       |\n   *      +-------+\n   */\n  subtract: function (csg) {\n    let csgs\n    if (csg instanceof Array) {\n      csgs = csg\n    } else {\n      csgs = [csg]\n    }\n    let result = this\n    for (let i = 0; i < csgs.length; i++) {\n      let islast = (i === (csgs.length - 1))\n      result = result.subtractSub(csgs[i], islast, islast)\n    }\n    return result\n  },\n\n  subtractSub: function (csg, retesselate, canonicalize) {\n    let a = new Tree(this.polygons)\n    let b = new Tree(csg.polygons)\n    a.invert()\n    a.clipTo(b)\n    b.clipTo(a, true)\n    a.addPolygons(b.allPolygons())\n    a.invert()\n    let result = fromPolygons(a.allPolygons())\n    result.properties = this.properties._merge(csg.properties)\n    if (retesselate) result = result.reTesselated()\n    if (canonicalize) result = result.canonicalized()\n    return result\n  },\n\n  /**\n   * Return a new CSG solid representing space in both this solid and\n   * in the given solids. Neither this solid nor the given solids are modified.\n   * @param {CSG[]} csg - list of CSG objects\n   * @returns {CSG} new CSG object\n   * @example\n   * let C = A.intersect(B)\n   * @example\n   * +-------+\n   * |       |\n   * |   A   |\n   * |    +--+----+   =   +--+\n   * +----+--+    |       +--+\n   *      |   B   |\n   *      |       |\n   *      +-------+\n   */\n  intersect: function (csg) {\n    let csgs\n    if (csg instanceof Array) {\n      csgs = csg\n    } else {\n      csgs = [csg]\n    }\n    let result = this\n    for (let i = 0; i < csgs.length; i++) {\n      let islast = (i === (csgs.length - 1))\n      result = result.intersectSub(csgs[i], islast, islast)\n    }\n    return result\n  },\n\n  intersectSub: function (csg, retesselate, canonicalize) {\n    let a = new Tree(this.polygons)\n    let b = new Tree(csg.polygons)\n    a.invert()\n    b.clipTo(a)\n    b.invert()\n    a.clipTo(b)\n    b.clipTo(a)\n    a.addPolygons(b.allPolygons())\n    a.invert()\n    let result = fromPolygons(a.allPolygons())\n    result.properties = this.properties._merge(csg.properties)\n    if (retesselate) result = result.reTesselated()\n    if (canonicalize) result = result.canonicalized()\n    return result\n  },\n\n  /**\n   * Return a new CSG solid with solid and empty space switched.\n   * This solid is not modified.\n   * @returns {CSG} new CSG object\n   * @example\n   * let B = A.invert()\n   */\n  invert: function () {\n    let flippedpolygons = this.polygons.map(function (p) {\n      return p.flipped()\n    })\n    return fromPolygons(flippedpolygons)\n    // TODO: flip properties?\n  },\n\n  // Affine transformation of CSG object. Returns a new CSG object\n  transform1: function (matrix4x4) {\n    let newpolygons = this.polygons.map(function (p) {\n      return p.transform(matrix4x4)\n    })\n    let result = fromPolygons(newpolygons)\n    result.properties = this.properties._transform(matrix4x4)\n    result.isRetesselated = this.isRetesselated\n    return result\n  },\n\n  /**\n   * Return a new CSG solid that is transformed using the given Matrix.\n   * Several matrix transformations can be combined before transforming this solid.\n   * @param {CSG.Matrix4x4} matrix4x4 - matrix to be applied\n   * @returns {CSG} new CSG object\n   * @example\n   * var m = new CSG.Matrix4x4()\n   * m = m.multiply(CSG.Matrix4x4.rotationX(40))\n   * m = m.multiply(CSG.Matrix4x4.translation([-.5, 0, 0]))\n   * let B = A.transform(m)\n   */\n  transform: function (matrix4x4) {\n    let ismirror = matrix4x4.isMirroring()\n    let transformedvertices = {}\n    let transformedplanes = {}\n    let newpolygons = this.polygons.map(function (p) {\n      let newplane\n      let plane = p.plane\n      let planetag = plane.getTag()\n      if (planetag in transformedplanes) {\n        newplane = transformedplanes[planetag]\n      } else {\n        newplane = plane.transform(matrix4x4)\n        transformedplanes[planetag] = newplane\n      }\n      let newvertices = p.vertices.map(function (v) {\n        let newvertex\n        let vertextag = v.getTag()\n        if (vertextag in transformedvertices) {\n          newvertex = transformedvertices[vertextag]\n        } else {\n          newvertex = v.transform(matrix4x4)\n          transformedvertices[vertextag] = newvertex\n        }\n        return newvertex\n      })\n      if (ismirror) newvertices.reverse()\n      return new Polygon(newvertices, p.shared, newplane)\n    })\n    let result = fromPolygons(newpolygons)\n    result.properties = this.properties._transform(matrix4x4)\n    result.isRetesselated = this.isRetesselated\n    result.isCanonicalized = this.isCanonicalized\n    return result\n  },\n\n  // ALIAS !\n  center: function (axes) {\n    return center({axes: axes},[this])\n  },\n\n  // ALIAS !\n  expand: function (radius, resolution) {\n    return expand(this, radius, resolution)\n  },\n\n  // ALIAS !\n  contract: function (radius, resolution) {\n    return contract(this, radius, resolution)\n  },\n\n  // ALIAS !\n  expandedShell: function (radius, resolution, unionWithThis) {\n    return expandedShellOfCCSG(this, radius, resolution, unionWithThis)\n  },\n\n  // cut the solid at a plane, and stretch the cross-section found along plane normal\n  // note: only used in roundedCube() internally\n  stretchAtPlane: function (normal, point, length) {\n    let plane = Plane.fromNormalAndPoint(normal, point)\n    let onb = new OrthoNormalBasis(plane)\n    let crosssect = this.sectionCut(onb)\n    let midpiece = crosssect.extrudeInOrthonormalBasis(onb, length)\n    let piece1 = this.cutByPlane(plane)\n    let piece2 = this.cutByPlane(plane.flipped())\n    let result = piece1.union([midpiece, piece2.translate(plane.normal.times(length))])\n    return result\n  },\n\n  // ALIAS !\n  canonicalized: function () {\n    return canonicalize(this)\n  },\n\n  // ALIAS !\n  reTesselated: function () {\n    return retesselate(this)\n  },\n\n  // ALIAS !\n  fixTJunctions: function () {\n    return fixTJunctions(fromPolygons, this)\n  },\n\n  // ALIAS !\n  getBounds: function () {\n    return bounds(this)\n  },\n\n  /** returns true if there is a possibility that the two solids overlap\n   * returns false if we can be sure that they do not overlap\n   * NOTE: this is critical as it is used in UNIONs\n   * @param  {CSG} csg\n   */\n  mayOverlap: function (csg) {\n    if ((this.polygons.length === 0) || (csg.polygons.length === 0)) {\n      return false\n    } else {\n      let mybounds = bounds(this)\n      let otherbounds = bounds(csg)\n      if (mybounds[1].x < otherbounds[0].x) return false\n      if (mybounds[0].x > otherbounds[1].x) return false\n      if (mybounds[1].y < otherbounds[0].y) return false\n      if (mybounds[0].y > otherbounds[1].y) return false\n      if (mybounds[1].z < otherbounds[0].z) return false\n      if (mybounds[0].z > otherbounds[1].z) return false\n      return true\n    }\n  },\n\n  // ALIAS !\n  cutByPlane: function (plane) {\n    return cutByPlane(this, plane)\n  },\n\n  /**\n   * Connect a solid to another solid, such that two Connectors become connected\n   * @param  {Connector} myConnector a Connector of this solid\n   * @param  {Connector} otherConnector a Connector to which myConnector should be connected\n   * @param  {Boolean} mirror false: the 'axis' vectors of the connectors should point in the same direction\n   * true: the 'axis' vectors of the connectors should point in opposite direction\n   * @param  {Float} normalrotation degrees of rotation between the 'normal' vectors of the two\n   * connectors\n   * @returns {CSG} this csg, tranformed accordingly\n   */\n  connectTo: function (myConnector, otherConnector, mirror, normalrotation) {\n    let matrix = myConnector.getTransformationTo(otherConnector, mirror, normalrotation)\n    return this.transform(matrix)\n  },\n\n  /**\n   * set the .shared property of all polygons\n   * @param  {Object} shared\n   * @returns {CSG} Returns a new CSG solid, the original is unmodified!\n   */\n  setShared: function (shared) {\n    let polygons = this.polygons.map(function (p) {\n      return new Polygon(p.vertices, shared, p.plane)\n    })\n    let result = fromPolygons(polygons)\n    result.properties = this.properties // keep original properties\n    result.isRetesselated = this.isRetesselated\n    result.isCanonicalized = this.isCanonicalized\n    return result\n  },\n\n  /** sets the color of this csg: non mutating, returns a new CSG\n   * @param  {Object} args\n   * @returns {CSG} a copy of this CSG, with the given color\n   */\n  setColor: function (args) {\n    let newshared = Polygon.Shared.fromColor.apply(this, arguments)\n    return this.setShared(newshared)\n  },\n\n  // ALIAS !\n  getTransformationAndInverseTransformationToFlatLying: function () {\n    return getTransformationAndInverseTransformationToFlatLying(this)\n  },\n\n  // ALIAS !\n  getTransformationToFlatLying: function () {\n    return getTransformationToFlatLying(this)\n  },\n\n  // ALIAS !\n  lieFlat: function () {\n    return lieFlat(this)\n  },\n\n  // project the 3D CSG onto a plane\n  // This returns a 2D CAG with the 'shadow' shape of the 3D solid when projected onto the\n  // plane represented by the orthonormal basis\n  projectToOrthoNormalBasis: function (orthobasis) {\n    // FIXME:  DEPENDS ON CAG !!\n    return projectToOrthoNormalBasis(this, orthobasis)\n  },\n\n  // FIXME: not finding any uses within our code ?\n  sectionCut: function (orthobasis) {\n    return sectionCut(this, orthobasis)\n  },\n\n  /**\n   * Returns an array of values for the requested features of this solid.\n   * Supported Features: 'volume', 'area'\n   * @param {String[]} features - list of features to calculate\n   * @returns {Float[]} values\n   * @example\n   * let volume = A.getFeatures('volume')\n   * let values = A.getFeatures('area','volume')\n   */\n  getFeatures: function (features) {\n    if (!(features instanceof Array)) {\n      features = [features]\n    }\n    let result = this.toTriangles().map(function (triPoly) {\n      return triPoly.getTetraFeatures(features)\n    })\n    .reduce(function (pv, v) {\n      return v.map(function (feat, i) {\n        return feat + (pv === 0 ? 0 : pv[i])\n      })\n    }, 0)\n    return (result.length === 1) ? result[0] : result\n  },\n  /** @return {Polygon[]} The list of polygons. */\n  toPolygons: function () {\n    return this.polygons\n  },\n\n  toString: function () {\n    let result = 'CSG solid:\\n'\n    this.polygons.map(function (p) {\n      result += p.toString()\n    })\n    return result\n  },\n\n  /** returns a compact binary representation of this csg\n   * usually used to transfer CSG objects to/from webworkes\n   * NOTE: very interesting compact format, with a lot of reusable ideas\n   * @returns {Object} compact binary representation of a CSG\n   */\n  toCompactBinary: function () {\n    let csg = this.canonicalized()\n    let numpolygons = csg.polygons.length\n    let numpolygonvertices = 0\n\n    let numvertices = 0\n    let vertexmap = {}\n    let vertices = []\n\n    let numplanes = 0\n    let planemap = {}\n    let planes = []\n\n    let shareds = []\n    let sharedmap = {}\n    let numshared = 0\n        // for (let i = 0, iMax = csg.polygons.length; i < iMax; i++) {\n        //  let p = csg.polygons[i];\n        //  for (let j = 0, jMax = p.length; j < jMax; j++) {\n        //      ++numpolygonvertices;\n        //      let vertextag = p[j].getTag();\n        //      if(!(vertextag in vertexmap)) {\n        //          vertexmap[vertextag] = numvertices++;\n        //          vertices.push(p[j]);\n        //      }\n        //  }\n    csg.polygons.map(function (polygon) {\n      // FIXME: why use map if we do not return anything ?\n      // either for... or forEach\n      polygon.vertices.map(function (vertex) {\n        ++numpolygonvertices\n        let vertextag = vertex.getTag()\n        if (!(vertextag in vertexmap)) {\n          vertexmap[vertextag] = numvertices++\n          vertices.push(vertex)\n        }\n      })\n\n      let planetag = polygon.plane.getTag()\n      if (!(planetag in planemap)) {\n        planemap[planetag] = numplanes++\n        planes.push(polygon.plane)\n      }\n      let sharedtag = polygon.shared.getTag()\n      if (!(sharedtag in sharedmap)) {\n        sharedmap[sharedtag] = numshared++\n        shareds.push(polygon.shared)\n      }\n    })\n\n    let numVerticesPerPolygon = new Uint32Array(numpolygons)\n    let polygonSharedIndexes = new Uint32Array(numpolygons)\n    let polygonVertices = new Uint32Array(numpolygonvertices)\n    let polygonPlaneIndexes = new Uint32Array(numpolygons)\n    let vertexData = new Float64Array(numvertices * 3)\n    let planeData = new Float64Array(numplanes * 4)\n    let polygonVerticesIndex = 0\n\n    // FIXME: doublecheck : why does it go through the whole polygons again?\n    // can we optimise that ? (perhap due to needing size to init buffers above)\n    for (let polygonindex = 0; polygonindex < numpolygons; ++polygonindex) {\n      let polygon = csg.polygons[polygonindex]\n      numVerticesPerPolygon[polygonindex] = polygon.vertices.length\n      polygon.vertices.map(function (vertex) {\n        let vertextag = vertex.getTag()\n        let vertexindex = vertexmap[vertextag]\n        polygonVertices[polygonVerticesIndex++] = vertexindex\n      })\n      let planetag = polygon.plane.getTag()\n      let planeindex = planemap[planetag]\n      polygonPlaneIndexes[polygonindex] = planeindex\n      let sharedtag = polygon.shared.getTag()\n      let sharedindex = sharedmap[sharedtag]\n      polygonSharedIndexes[polygonindex] = sharedindex\n    }\n    let verticesArrayIndex = 0\n    vertices.map(function (vertex) {\n      const pos = vertex.pos\n      vertexData[verticesArrayIndex++] = pos._x\n      vertexData[verticesArrayIndex++] = pos._y\n      vertexData[verticesArrayIndex++] = pos._z\n    })\n    let planesArrayIndex = 0\n    planes.map(function (plane) {\n      const normal = plane.normal\n      planeData[planesArrayIndex++] = normal._x\n      planeData[planesArrayIndex++] = normal._y\n      planeData[planesArrayIndex++] = normal._z\n      planeData[planesArrayIndex++] = plane.w\n    })\n\n    let result = {\n      'class': 'CSG',\n      numPolygons: numpolygons,\n      numVerticesPerPolygon: numVerticesPerPolygon,\n      polygonPlaneIndexes: polygonPlaneIndexes,\n      polygonSharedIndexes: polygonSharedIndexes,\n      polygonVertices: polygonVertices,\n      vertexData: vertexData,\n      planeData: planeData,\n      shared: shareds\n    }\n    return result\n  },\n\n  /** returns the triangles of this csg\n   * @returns {Polygons} triangulated polygons\n   */\n  toTriangles: function () {\n    let polygons = []\n    this.polygons.forEach(function (poly) {\n      let firstVertex = poly.vertices[0]\n      for (let i = poly.vertices.length - 3; i >= 0; i--) {\n        polygons.push(new Polygon(\n          [\n            firstVertex,\n            poly.vertices[i + 1],\n            poly.vertices[i + 2]\n          ],\n          poly.shared,\n          poly.plane))\n      }\n    })\n    return polygons\n  }\n}\n\nmodule.exports = CSG\n"},"lineCount":587}},"error":null,"hash":"f46a2e1c7110204d7a777b54f9ee2951","cacheData":{"env":{}}}