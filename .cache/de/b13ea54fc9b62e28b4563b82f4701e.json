{"id":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","dependencies":[{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\package.json","includedInParent":true,"mtime":1695809278048},{"name":"./rotate","loc":{"line":1,"column":23,"index":23},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\maths\\vec2\\normal.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\maths\\vec2\\rotate.js"}],"generated":{"js":"const rotate = require('./rotate')\n\n/**\n * Calculates the normal of the given vector.\n * The normal value is the given vector rotated 90 degress.\n *\n * @param {vec2} [out] - receiving vector\n * @param {vec2} vec - given value\n * @returns {vec2} a new vector\n * @alias module:modeling/maths/vec2.normal\n */\nconst normal = (...params) => {\n  if (params.length === 1) {\n    const vec = params[0]\n    return rotate((Math.PI / 2), vec)\n  } else {\n    const out = params[0]\n    const vec = params[1]\n    return rotate(out, (Math.PI / 2), vec)\n  }\n}\n\nmodule.exports = normal\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec2/normal.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}}],"sources":{"node_modules/@jscad/modeling/src/maths/vec2/normal.js":"const rotate = require('./rotate')\n\n/**\n * Calculates the normal of the given vector.\n * The normal value is the given vector rotated 90 degress.\n *\n * @param {vec2} [out] - receiving vector\n * @param {vec2} vec - given value\n * @returns {vec2} a new vector\n * @alias module:modeling/maths/vec2.normal\n */\nconst normal = (...params) => {\n  if (params.length === 1) {\n    const vec = params[0]\n    return rotate((Math.PI / 2), vec)\n  } else {\n    const out = params[0]\n    const vec = params[1]\n    return rotate(out, (Math.PI / 2), vec)\n  }\n}\n\nmodule.exports = normal\n"},"lineCount":24}},"error":null,"hash":"d87fdc2305f1767f33d03c8b76af15e5","cacheData":{"env":{}}}