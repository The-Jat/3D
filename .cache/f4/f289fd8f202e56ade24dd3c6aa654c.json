{"id":"node_modules/@jscad/csg/src/core/CAG.js","dependencies":[{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\package.json","includedInParent":true,"mtime":1695872748353},{"name":"./connectors","loc":{"line":1,"column":28,"index":28},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\connectors.js"},{"name":"./math/Vertex3","loc":{"line":2,"column":25,"index":69},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Vertex3.js"},{"name":"./math/Vector2","loc":{"line":3,"column":25,"index":112},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Vector2.js"},{"name":"./math/Vector3","loc":{"line":4,"column":25,"index":155},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Vector3.js"},{"name":"./math/Polygon3","loc":{"line":5,"column":24,"index":197},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Polygon3.js"},{"name":"./CSGFactories","loc":{"line":7,"column":31,"index":248},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CSGFactories.js"},{"name":"./CAGFactories","loc":{"line":8,"column":41,"index":307},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAGFactories.js"},{"name":"./utils/canonicalize","loc":{"line":10,"column":29,"index":355},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\utils\\canonicalize.js"},{"name":"./utils/retesellate","loc":{"line":11,"column":28,"index":407},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\utils\\retesellate.js"},{"name":"./utils/cagValidation","loc":{"line":12,"column":65,"index":495},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\utils\\cagValidation.js"},{"name":"./utils/cagMeasurements","loc":{"line":13,"column":34,"index":554},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\utils\\cagMeasurements.js"},{"name":"../api/ops-cnc","loc":{"line":16,"column":39,"index":728},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\ops-cnc.js"},{"name":"../api/ops-extrusions","loc":{"line":17,"column":84,"index":830},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\ops-extrusions.js"},{"name":"../api/cagOutlinePaths","loc":{"line":18,"column":32,"index":887},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\cagOutlinePaths.js"},{"name":"../api/center","loc":{"line":19,"column":23,"index":936},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\center.js"},{"name":"../api/ops-expandContract","loc":{"line":20,"column":55,"index":1008},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CAG.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\ops-expandContract.js"}],"generated":{"js":"const {Connector} = require('./connectors')\nconst Vertex3D = require('./math/Vertex3')\nconst Vector2D = require('./math/Vector2')\nconst Vector3D = require('./math/Vector3')\nconst Polygon = require('./math/Polygon3')\n\nconst {fromPolygons} = require('./CSGFactories')\nconst {fromSides, fromFakeCSG} = require('./CAGFactories')\n\nconst canonicalize = require('./utils/canonicalize')\nconst retesselate = require('./utils/retesellate')\nconst {isCAGValid, isSelfIntersecting, hasPointInside} = require('./utils/cagValidation')\nconst {area, getBounds} = require('./utils/cagMeasurements')\n\n// all of these are good candidates for elimination in this scope, since they are part of a functional api\nconst {overCutInsideCorners} = require('../api/ops-cnc')\nconst {extrudeInOrthonormalBasis, extrudeInPlane, extrude, rotateExtrude} = require('../api/ops-extrusions')\nconst cagoutlinePaths = require('../api/cagOutlinePaths')\nconst center = require('../api/center')\nconst {expand, contract, expandedShellOfCAG} = require('../api/ops-expandContract')\n/**\n * Class CAG\n * Holds a solid area geometry like CSG but 2D.\n * Each area consists of a number of sides.\n * Each side is a line between 2 points.\n * @constructor\n */\nlet CAG = function () {\n  this.sides = []\n  this.isCanonicalized = false\n}\n\nCAG.prototype = {\n  union: function (cag) {\n    let cags\n    if (cag instanceof Array) {\n      cags = cag\n    } else {\n      cags = [cag]\n    }\n    let r = this._toCSGWall(-1, 1)\n    r = r.union(\n            cags.map(function (cag) {\n              return cag._toCSGWall(-1, 1).reTesselated()\n            }), false, false)\n    return fromFakeCSG(r).canonicalized()\n  },\n\n  subtract: function (cag) {\n    let cags\n    if (cag instanceof Array) {\n      cags = cag\n    } else {\n      cags = [cag]\n    }\n    let r = this._toCSGWall(-1, 1)\n    cags.map(function (cag) {\n      r = r.subtractSub(cag._toCSGWall(-1, 1), false, false)\n    })\n    r = r.reTesselated()\n    r = r.canonicalized()\n    r = fromFakeCSG(r)\n    r = r.canonicalized()\n    return r\n  },\n\n  intersect: function (cag) {\n    let cags\n    if (cag instanceof Array) {\n      cags = cag\n    } else {\n      cags = [cag]\n    }\n    let r = this._toCSGWall(-1, 1)\n    cags.map(function (cag) {\n      r = r.intersectSub(cag._toCSGWall(-1, 1), false, false)\n    })\n    r = r.reTesselated()\n    r = r.canonicalized()\n    r = fromFakeCSG(r)\n    r = r.canonicalized()\n    return r\n  },\n\n  transform: function (matrix4x4) {\n    let ismirror = matrix4x4.isMirroring()\n    let newsides = this.sides.map(function (side) {\n      return side.transform(matrix4x4)\n    })\n    let result = fromSides(newsides)\n    if (ismirror) {\n      result = result.flipped()\n    }\n    return result\n  },\n\n  flipped: function () {\n    let newsides = this.sides.map(function (side) {\n      return side.flipped()\n    })\n    newsides.reverse()\n    return fromSides(newsides)\n  },\n\n  // ALIAS !\n  center: function (axes) {\n    return center({axes: axes}, [this])\n  },\n\n  // ALIAS !\n  expandedShell: function (radius, resolution) {\n    return expandedShellOfCAG(this, radius, resolution)\n  },\n\n  // ALIAS !\n  expand: function (radius, resolution) {\n    return expand(this, radius, resolution)\n  },\n\n  contract: function (radius, resolution) {\n    return contract(this, radius, resolution)\n  },\n\n  // ALIAS !\n  area: function () {\n    return area(this)\n  },\n\n  // ALIAS !\n  getBounds: function () {\n    return getBounds(this)\n  },\n  // ALIAS !\n  isSelfIntersecting: function (debug) {\n    return isSelfIntersecting(this, debug)\n  },\n  // extrusion: all aliases to simple functions\n  extrudeInOrthonormalBasis: function (orthonormalbasis, depth, options) {\n    return extrudeInOrthonormalBasis(this, orthonormalbasis, depth, options)\n  },\n\n  // ALIAS !\n  extrudeInPlane: function (axis1, axis2, depth, options) {\n    return extrudeInPlane(this, axis1, axis2, depth, options)\n  },\n\n  // ALIAS !\n  extrude: function (options) {\n    return extrude(this, options)\n  },\n\n  // ALIAS !\n  rotateExtrude: function (options) { // FIXME options should be optional\n    return rotateExtrude(this, options)\n  },\n\n  // ALIAS !\n  check: function () {\n    return isCAGValid(this)\n  },\n\n  // ALIAS !\n  canonicalized: function () {\n    return canonicalize(this)\n  },\n\n  // ALIAS !\n  reTesselated: function () {\n    return retesselate(this)\n  },\n\n  // ALIAS !\n  getOutlinePaths: function () {\n    return cagoutlinePaths(this)\n  },\n\n  // ALIAS !\n  overCutInsideCorners: function (cutterradius) {\n    return overCutInsideCorners(this, cutterradius)\n  },\n\n  // ALIAS !\n  hasPointInside: function (point) {\n    return hasPointInside(this, point)\n  },\n\n  // All the toXXX functions\n  toString: function () {\n    let result = 'CAG (' + this.sides.length + ' sides):\\n'\n    this.sides.map(function (side) {\n      result += '  ' + side.toString() + '\\n'\n    })\n    return result\n  },\n\n  _toCSGWall: function (z0, z1) {\n    let polygons = this.sides.map(function (side) {\n      return side.toPolygon3D(z0, z1)\n    })\n    return fromPolygons(polygons)\n  },\n\n  _toVector3DPairs: function (m) {\n        // transform m\n    let pairs = this.sides.map(function (side) {\n      let p0 = side.vertex0.pos\n      let p1 = side.vertex1.pos\n      return [Vector3D.Create(p0.x, p0.y, 0),\n        Vector3D.Create(p1.x, p1.y, 0)]\n    })\n    if (typeof m !== 'undefined') {\n      pairs = pairs.map(function (pair) {\n        return pair.map(function (v) {\n          return v.transform(m)\n        })\n      })\n    }\n    return pairs\n  },\n\n  /*\n    * transform a cag into the polygons of a corresponding 3d plane, positioned per options\n    * Accepts a connector for plane positioning, or optionally\n    * single translation, axisVector, normalVector arguments\n    * (toConnector has precedence over single arguments if provided)\n    */\n  _toPlanePolygons: function (options) {\n    const defaults = {\n      flipped: false\n    }\n    options = Object.assign({}, defaults, options)\n    let {flipped} = options\n    // reference connector for transformation\n    let origin = [0, 0, 0]\n    let defaultAxis = [0, 0, 1]\n    let defaultNormal = [0, 1, 0]\n    let thisConnector = new Connector(origin, defaultAxis, defaultNormal)\n    // translated connector per options\n    let translation = options.translation || origin\n    let axisVector = options.axisVector || defaultAxis\n    let normalVector = options.normalVector || defaultNormal\n    // will override above if options has toConnector\n    let toConnector = options.toConnector ||\n            new Connector(translation, axisVector, normalVector)\n    // resulting transform\n    let m = thisConnector.getTransformationTo(toConnector, false, 0)\n    // create plane as a (partial non-closed) CSG in XY plane\n    let bounds = this.getBounds()\n    bounds[0] = bounds[0].minus(new Vector2D(1, 1))\n    bounds[1] = bounds[1].plus(new Vector2D(1, 1))\n    let csgshell = this._toCSGWall(-1, 1)\n    let csgplane = fromPolygons([new Polygon([\n      new Vertex3D(new Vector3D(bounds[0].x, bounds[0].y, 0)),\n      new Vertex3D(new Vector3D(bounds[1].x, bounds[0].y, 0)),\n      new Vertex3D(new Vector3D(bounds[1].x, bounds[1].y, 0)),\n      new Vertex3D(new Vector3D(bounds[0].x, bounds[1].y, 0))\n    ])])\n    if (flipped) {\n      csgplane = csgplane.invert()\n    }\n    // intersectSub -> prevent premature retesselate/canonicalize\n    csgplane = csgplane.intersectSub(csgshell)\n    // only keep the polygons in the z plane:\n    let polys = csgplane.polygons.filter(function (polygon) {\n      return Math.abs(polygon.plane.normal.z) > 0.99\n    })\n    // finally, position the plane per passed transformations\n    return polys.map(function (poly) {\n      return poly.transform(m)\n    })\n  },\n\n  /*\n    * given 2 connectors, this returns all polygons of a \"wall\" between 2\n    * copies of this cag, positioned in 3d space as \"bottom\" and\n    * \"top\" plane per connectors toConnector1, and toConnector2, respectively\n    */\n  _toWallPolygons: function (options) {\n        // normals are going to be correct as long as toConn2.point - toConn1.point\n        // points into cag normal direction (check in caller)\n        // arguments: options.toConnector1, options.toConnector2, options.cag\n        //     walls go from toConnector1 to toConnector2\n        //     optionally, target cag to point to - cag needs to have same number of sides as this!\n    let origin = [0, 0, 0]\n    let defaultAxis = [0, 0, 1]\n    let defaultNormal = [0, 1, 0]\n    let thisConnector = new Connector(origin, defaultAxis, defaultNormal)\n        // arguments:\n    let toConnector1 = options.toConnector1\n        // let toConnector2 = new Connector([0, 0, -30], defaultAxis, defaultNormal);\n    let toConnector2 = options.toConnector2\n    if (!(toConnector1 instanceof Connector && toConnector2 instanceof Connector)) {\n      throw new Error('could not parse Connector arguments toConnector1 or toConnector2')\n    }\n    if (options.cag) {\n      if (options.cag.sides.length !== this.sides.length) {\n        throw new Error('target cag needs same sides count as start cag')\n      }\n    }\n        // target cag is same as this unless specified\n    let toCag = options.cag || this\n    let m1 = thisConnector.getTransformationTo(toConnector1, false, 0)\n    let m2 = thisConnector.getTransformationTo(toConnector2, false, 0)\n    let vps1 = this._toVector3DPairs(m1)\n    let vps2 = toCag._toVector3DPairs(m2)\n\n    let polygons = []\n    vps1.forEach(function (vp1, i) {\n      polygons.push(new Polygon([\n        new Vertex3D(vps2[i][1]), new Vertex3D(vps2[i][0]), new Vertex3D(vp1[0])]))\n      polygons.push(new Polygon([\n        new Vertex3D(vps2[i][1]), new Vertex3D(vp1[0]), new Vertex3D(vp1[1])]))\n    })\n    return polygons\n  },\n\n    /**\n     * Convert to a list of points.\n     * @return {points[]} list of points in 2D space\n     */\n  toPoints: function () {\n    let points = this.sides.map(function (side) {\n      let v0 = side.vertex0\n      // let v1 = side.vertex1\n      return v0.pos\n    })\n    // due to the logic of fromPoints()\n    // move the first point to the last\n    if (points.length > 0) {\n      points.push(points.shift())\n    }\n    return points\n  },\n\n    /** Convert to compact binary form.\n   * See fromCompactBinary.\n   * @return {CompactBinary}\n   */\n  toCompactBinary: function () {\n    let cag = this.canonicalized()\n    let numsides = cag.sides.length\n    let vertexmap = {}\n    let vertices = []\n    let numvertices = 0\n    let sideVertexIndices = new Uint32Array(2 * numsides)\n    let sidevertexindicesindex = 0\n    cag.sides.map(function (side) {\n      [side.vertex0, side.vertex1].map(function (v) {\n        let vertextag = v.getTag()\n        let vertexindex\n        if (!(vertextag in vertexmap)) {\n          vertexindex = numvertices++\n          vertexmap[vertextag] = vertexindex\n          vertices.push(v)\n        } else {\n          vertexindex = vertexmap[vertextag]\n        }\n        sideVertexIndices[sidevertexindicesindex++] = vertexindex\n      })\n    })\n    let vertexData = new Float64Array(numvertices * 2)\n    let verticesArrayIndex = 0\n    vertices.map(function (v) {\n      let pos = v.pos\n      vertexData[verticesArrayIndex++] = pos._x\n      vertexData[verticesArrayIndex++] = pos._y\n    })\n    let result = {\n      'class': 'CAG',\n      sideVertexIndices: sideVertexIndices,\n      vertexData: vertexData\n    }\n    return result\n  }\n}\n\nmodule.exports = CAG\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/@jscad/csg/src/core/CAG.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}}],"sources":{"node_modules/@jscad/csg/src/core/CAG.js":"const {Connector} = require('./connectors')\nconst Vertex3D = require('./math/Vertex3')\nconst Vector2D = require('./math/Vector2')\nconst Vector3D = require('./math/Vector3')\nconst Polygon = require('./math/Polygon3')\n\nconst {fromPolygons} = require('./CSGFactories')\nconst {fromSides, fromFakeCSG} = require('./CAGFactories')\n\nconst canonicalize = require('./utils/canonicalize')\nconst retesselate = require('./utils/retesellate')\nconst {isCAGValid, isSelfIntersecting, hasPointInside} = require('./utils/cagValidation')\nconst {area, getBounds} = require('./utils/cagMeasurements')\n\n// all of these are good candidates for elimination in this scope, since they are part of a functional api\nconst {overCutInsideCorners} = require('../api/ops-cnc')\nconst {extrudeInOrthonormalBasis, extrudeInPlane, extrude, rotateExtrude} = require('../api/ops-extrusions')\nconst cagoutlinePaths = require('../api/cagOutlinePaths')\nconst center = require('../api/center')\nconst {expand, contract, expandedShellOfCAG} = require('../api/ops-expandContract')\n/**\n * Class CAG\n * Holds a solid area geometry like CSG but 2D.\n * Each area consists of a number of sides.\n * Each side is a line between 2 points.\n * @constructor\n */\nlet CAG = function () {\n  this.sides = []\n  this.isCanonicalized = false\n}\n\nCAG.prototype = {\n  union: function (cag) {\n    let cags\n    if (cag instanceof Array) {\n      cags = cag\n    } else {\n      cags = [cag]\n    }\n    let r = this._toCSGWall(-1, 1)\n    r = r.union(\n            cags.map(function (cag) {\n              return cag._toCSGWall(-1, 1).reTesselated()\n            }), false, false)\n    return fromFakeCSG(r).canonicalized()\n  },\n\n  subtract: function (cag) {\n    let cags\n    if (cag instanceof Array) {\n      cags = cag\n    } else {\n      cags = [cag]\n    }\n    let r = this._toCSGWall(-1, 1)\n    cags.map(function (cag) {\n      r = r.subtractSub(cag._toCSGWall(-1, 1), false, false)\n    })\n    r = r.reTesselated()\n    r = r.canonicalized()\n    r = fromFakeCSG(r)\n    r = r.canonicalized()\n    return r\n  },\n\n  intersect: function (cag) {\n    let cags\n    if (cag instanceof Array) {\n      cags = cag\n    } else {\n      cags = [cag]\n    }\n    let r = this._toCSGWall(-1, 1)\n    cags.map(function (cag) {\n      r = r.intersectSub(cag._toCSGWall(-1, 1), false, false)\n    })\n    r = r.reTesselated()\n    r = r.canonicalized()\n    r = fromFakeCSG(r)\n    r = r.canonicalized()\n    return r\n  },\n\n  transform: function (matrix4x4) {\n    let ismirror = matrix4x4.isMirroring()\n    let newsides = this.sides.map(function (side) {\n      return side.transform(matrix4x4)\n    })\n    let result = fromSides(newsides)\n    if (ismirror) {\n      result = result.flipped()\n    }\n    return result\n  },\n\n  flipped: function () {\n    let newsides = this.sides.map(function (side) {\n      return side.flipped()\n    })\n    newsides.reverse()\n    return fromSides(newsides)\n  },\n\n  // ALIAS !\n  center: function (axes) {\n    return center({axes: axes}, [this])\n  },\n\n  // ALIAS !\n  expandedShell: function (radius, resolution) {\n    return expandedShellOfCAG(this, radius, resolution)\n  },\n\n  // ALIAS !\n  expand: function (radius, resolution) {\n    return expand(this, radius, resolution)\n  },\n\n  contract: function (radius, resolution) {\n    return contract(this, radius, resolution)\n  },\n\n  // ALIAS !\n  area: function () {\n    return area(this)\n  },\n\n  // ALIAS !\n  getBounds: function () {\n    return getBounds(this)\n  },\n  // ALIAS !\n  isSelfIntersecting: function (debug) {\n    return isSelfIntersecting(this, debug)\n  },\n  // extrusion: all aliases to simple functions\n  extrudeInOrthonormalBasis: function (orthonormalbasis, depth, options) {\n    return extrudeInOrthonormalBasis(this, orthonormalbasis, depth, options)\n  },\n\n  // ALIAS !\n  extrudeInPlane: function (axis1, axis2, depth, options) {\n    return extrudeInPlane(this, axis1, axis2, depth, options)\n  },\n\n  // ALIAS !\n  extrude: function (options) {\n    return extrude(this, options)\n  },\n\n  // ALIAS !\n  rotateExtrude: function (options) { // FIXME options should be optional\n    return rotateExtrude(this, options)\n  },\n\n  // ALIAS !\n  check: function () {\n    return isCAGValid(this)\n  },\n\n  // ALIAS !\n  canonicalized: function () {\n    return canonicalize(this)\n  },\n\n  // ALIAS !\n  reTesselated: function () {\n    return retesselate(this)\n  },\n\n  // ALIAS !\n  getOutlinePaths: function () {\n    return cagoutlinePaths(this)\n  },\n\n  // ALIAS !\n  overCutInsideCorners: function (cutterradius) {\n    return overCutInsideCorners(this, cutterradius)\n  },\n\n  // ALIAS !\n  hasPointInside: function (point) {\n    return hasPointInside(this, point)\n  },\n\n  // All the toXXX functions\n  toString: function () {\n    let result = 'CAG (' + this.sides.length + ' sides):\\n'\n    this.sides.map(function (side) {\n      result += '  ' + side.toString() + '\\n'\n    })\n    return result\n  },\n\n  _toCSGWall: function (z0, z1) {\n    let polygons = this.sides.map(function (side) {\n      return side.toPolygon3D(z0, z1)\n    })\n    return fromPolygons(polygons)\n  },\n\n  _toVector3DPairs: function (m) {\n        // transform m\n    let pairs = this.sides.map(function (side) {\n      let p0 = side.vertex0.pos\n      let p1 = side.vertex1.pos\n      return [Vector3D.Create(p0.x, p0.y, 0),\n        Vector3D.Create(p1.x, p1.y, 0)]\n    })\n    if (typeof m !== 'undefined') {\n      pairs = pairs.map(function (pair) {\n        return pair.map(function (v) {\n          return v.transform(m)\n        })\n      })\n    }\n    return pairs\n  },\n\n  /*\n    * transform a cag into the polygons of a corresponding 3d plane, positioned per options\n    * Accepts a connector for plane positioning, or optionally\n    * single translation, axisVector, normalVector arguments\n    * (toConnector has precedence over single arguments if provided)\n    */\n  _toPlanePolygons: function (options) {\n    const defaults = {\n      flipped: false\n    }\n    options = Object.assign({}, defaults, options)\n    let {flipped} = options\n    // reference connector for transformation\n    let origin = [0, 0, 0]\n    let defaultAxis = [0, 0, 1]\n    let defaultNormal = [0, 1, 0]\n    let thisConnector = new Connector(origin, defaultAxis, defaultNormal)\n    // translated connector per options\n    let translation = options.translation || origin\n    let axisVector = options.axisVector || defaultAxis\n    let normalVector = options.normalVector || defaultNormal\n    // will override above if options has toConnector\n    let toConnector = options.toConnector ||\n            new Connector(translation, axisVector, normalVector)\n    // resulting transform\n    let m = thisConnector.getTransformationTo(toConnector, false, 0)\n    // create plane as a (partial non-closed) CSG in XY plane\n    let bounds = this.getBounds()\n    bounds[0] = bounds[0].minus(new Vector2D(1, 1))\n    bounds[1] = bounds[1].plus(new Vector2D(1, 1))\n    let csgshell = this._toCSGWall(-1, 1)\n    let csgplane = fromPolygons([new Polygon([\n      new Vertex3D(new Vector3D(bounds[0].x, bounds[0].y, 0)),\n      new Vertex3D(new Vector3D(bounds[1].x, bounds[0].y, 0)),\n      new Vertex3D(new Vector3D(bounds[1].x, bounds[1].y, 0)),\n      new Vertex3D(new Vector3D(bounds[0].x, bounds[1].y, 0))\n    ])])\n    if (flipped) {\n      csgplane = csgplane.invert()\n    }\n    // intersectSub -> prevent premature retesselate/canonicalize\n    csgplane = csgplane.intersectSub(csgshell)\n    // only keep the polygons in the z plane:\n    let polys = csgplane.polygons.filter(function (polygon) {\n      return Math.abs(polygon.plane.normal.z) > 0.99\n    })\n    // finally, position the plane per passed transformations\n    return polys.map(function (poly) {\n      return poly.transform(m)\n    })\n  },\n\n  /*\n    * given 2 connectors, this returns all polygons of a \"wall\" between 2\n    * copies of this cag, positioned in 3d space as \"bottom\" and\n    * \"top\" plane per connectors toConnector1, and toConnector2, respectively\n    */\n  _toWallPolygons: function (options) {\n        // normals are going to be correct as long as toConn2.point - toConn1.point\n        // points into cag normal direction (check in caller)\n        // arguments: options.toConnector1, options.toConnector2, options.cag\n        //     walls go from toConnector1 to toConnector2\n        //     optionally, target cag to point to - cag needs to have same number of sides as this!\n    let origin = [0, 0, 0]\n    let defaultAxis = [0, 0, 1]\n    let defaultNormal = [0, 1, 0]\n    let thisConnector = new Connector(origin, defaultAxis, defaultNormal)\n        // arguments:\n    let toConnector1 = options.toConnector1\n        // let toConnector2 = new Connector([0, 0, -30], defaultAxis, defaultNormal);\n    let toConnector2 = options.toConnector2\n    if (!(toConnector1 instanceof Connector && toConnector2 instanceof Connector)) {\n      throw new Error('could not parse Connector arguments toConnector1 or toConnector2')\n    }\n    if (options.cag) {\n      if (options.cag.sides.length !== this.sides.length) {\n        throw new Error('target cag needs same sides count as start cag')\n      }\n    }\n        // target cag is same as this unless specified\n    let toCag = options.cag || this\n    let m1 = thisConnector.getTransformationTo(toConnector1, false, 0)\n    let m2 = thisConnector.getTransformationTo(toConnector2, false, 0)\n    let vps1 = this._toVector3DPairs(m1)\n    let vps2 = toCag._toVector3DPairs(m2)\n\n    let polygons = []\n    vps1.forEach(function (vp1, i) {\n      polygons.push(new Polygon([\n        new Vertex3D(vps2[i][1]), new Vertex3D(vps2[i][0]), new Vertex3D(vp1[0])]))\n      polygons.push(new Polygon([\n        new Vertex3D(vps2[i][1]), new Vertex3D(vp1[0]), new Vertex3D(vp1[1])]))\n    })\n    return polygons\n  },\n\n    /**\n     * Convert to a list of points.\n     * @return {points[]} list of points in 2D space\n     */\n  toPoints: function () {\n    let points = this.sides.map(function (side) {\n      let v0 = side.vertex0\n      // let v1 = side.vertex1\n      return v0.pos\n    })\n    // due to the logic of fromPoints()\n    // move the first point to the last\n    if (points.length > 0) {\n      points.push(points.shift())\n    }\n    return points\n  },\n\n    /** Convert to compact binary form.\n   * See fromCompactBinary.\n   * @return {CompactBinary}\n   */\n  toCompactBinary: function () {\n    let cag = this.canonicalized()\n    let numsides = cag.sides.length\n    let vertexmap = {}\n    let vertices = []\n    let numvertices = 0\n    let sideVertexIndices = new Uint32Array(2 * numsides)\n    let sidevertexindicesindex = 0\n    cag.sides.map(function (side) {\n      [side.vertex0, side.vertex1].map(function (v) {\n        let vertextag = v.getTag()\n        let vertexindex\n        if (!(vertextag in vertexmap)) {\n          vertexindex = numvertices++\n          vertexmap[vertextag] = vertexindex\n          vertices.push(v)\n        } else {\n          vertexindex = vertexmap[vertextag]\n        }\n        sideVertexIndices[sidevertexindicesindex++] = vertexindex\n      })\n    })\n    let vertexData = new Float64Array(numvertices * 2)\n    let verticesArrayIndex = 0\n    vertices.map(function (v) {\n      let pos = v.pos\n      vertexData[verticesArrayIndex++] = pos._x\n      vertexData[verticesArrayIndex++] = pos._y\n    })\n    let result = {\n      'class': 'CAG',\n      sideVertexIndices: sideVertexIndices,\n      vertexData: vertexData\n    }\n    return result\n  }\n}\n\nmodule.exports = CAG\n"},"lineCount":378}},"error":null,"hash":"8c29612c8f62e074981bee4649426fda","cacheData":{"env":{}}}