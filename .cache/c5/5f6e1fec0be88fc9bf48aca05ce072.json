{"id":"node_modules/@jscad/csg/src/api/primitives3d.js","dependencies":[{"name":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\package.json","includedInParent":true,"mtime":1695872748353},{"name":"./optionParsers","loc":{"line":1,"column":141,"index":141},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\primitives3d.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\optionParsers.js"},{"name":"../core/constants","loc":{"line":2,"column":64,"index":224},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\primitives3d.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\constants.js"},{"name":"../core/math/Vector3","loc":{"line":3,"column":24,"index":269},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\primitives3d.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Vector3.js"},{"name":"../core/math/Vertex3","loc":{"line":4,"column":24,"index":317},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\primitives3d.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Vertex3.js"},{"name":"../core/math/Polygon3","loc":{"line":5,"column":25,"index":366},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\primitives3d.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Polygon3.js"},{"name":"../core/connectors","loc":{"line":6,"column":28,"index":419},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\primitives3d.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\connectors.js"},{"name":"../core/Properties","loc":{"line":7,"column":27,"index":468},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\primitives3d.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\Properties.js"},{"name":"../core/CSGFactories","loc":{"line":8,"column":31,"index":521},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\api\\primitives3d.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CSGFactories.js"}],"generated":{"js":"const {parseOption, parseOptionAs3DVector, parseOptionAs2DVector, parseOptionAs3DVectorList, parseOptionAsFloat, parseOptionAsInt} = require('./optionParsers')\nconst {defaultResolution3D, defaultResolution2D, EPS} = require('../core/constants')\nconst Vector3 = require('../core/math/Vector3')\nconst Vertex3 = require('../core/math/Vertex3')\nconst Polygon3 = require('../core/math/Polygon3')\nconst {Connector} = require('../core/connectors')\nconst Properties = require('../core/Properties')\nconst {fromPolygons} = require('../core/CSGFactories')\n\n/** Construct an axis-aligned solid cuboid.\n * @param {Object} [options] - options for construction\n * @param {Vector3} [options.center=[0,0,0]] - center of cube\n * @param {Vector3} [options.radius=[1,1,1]] - radius of cube, single scalar also possible\n * @returns {CSG} new 3D solid\n *\n * @example\n * let cube = CSG.cube({\n *   center: [5, 5, 5],\n *   radius: 5, // scalar radius\n * });\n */\nconst cube = function (options) {\n  let c\n  let r\n  let corner1\n  let corner2\n  options = options || {}\n  if (('corner1' in options) || ('corner2' in options)) {\n    if (('center' in options) || ('radius' in options)) {\n      throw new Error('cube: should either give a radius and center parameter, or a corner1 and corner2 parameter')\n    }\n    corner1 = parseOptionAs3DVector(options, 'corner1', [0, 0, 0])\n    corner2 = parseOptionAs3DVector(options, 'corner2', [1, 1, 1])\n    c = corner1.plus(corner2).times(0.5)\n    r = corner2.minus(corner1).times(0.5)\n  } else {\n    c = parseOptionAs3DVector(options, 'center', [0, 0, 0])\n    r = parseOptionAs3DVector(options, 'radius', [1, 1, 1])\n  }\n  r = r.abs() // negative radii make no sense\n  let result = fromPolygons([\n    [\n            [0, 4, 6, 2],\n            [-1, 0, 0]\n    ],\n    [\n            [1, 3, 7, 5],\n            [+1, 0, 0]\n    ],\n    [\n            [0, 1, 5, 4],\n            [0, -1, 0]\n    ],\n    [\n            [2, 6, 7, 3],\n            [0, +1, 0]\n    ],\n    [\n            [0, 2, 3, 1],\n            [0, 0, -1]\n    ],\n    [\n            [4, 5, 7, 6],\n            [0, 0, +1]\n    ]\n  ].map(function (info) {\n    let vertices = info[0].map(function (i) {\n      let pos = new Vector3(\n                c.x + r.x * (2 * !!(i & 1) - 1), c.y + r.y * (2 * !!(i & 2) - 1), c.z + r.z * (2 * !!(i & 4) - 1))\n      return new Vertex3(pos)\n    })\n    return new Polygon3(vertices, null /* , plane */)\n  }))\n  result.properties.cube = new Properties()\n  result.properties.cube.center = new Vector3(c)\n    // add 6 connectors, at the centers of each face:\n  result.properties.cube.facecenters = [\n    new Connector(new Vector3([r.x, 0, 0]).plus(c), [1, 0, 0], [0, 0, 1]),\n    new Connector(new Vector3([-r.x, 0, 0]).plus(c), [-1, 0, 0], [0, 0, 1]),\n    new Connector(new Vector3([0, r.y, 0]).plus(c), [0, 1, 0], [0, 0, 1]),\n    new Connector(new Vector3([0, -r.y, 0]).plus(c), [0, -1, 0], [0, 0, 1]),\n    new Connector(new Vector3([0, 0, r.z]).plus(c), [0, 0, 1], [1, 0, 0]),\n    new Connector(new Vector3([0, 0, -r.z]).plus(c), [0, 0, -1], [1, 0, 0])\n  ]\n  return result\n}\n\n/** Construct a solid sphere\n * @param {Object} [options] - options for construction\n * @param {Vector3} [options.center=[0,0,0]] - center of sphere\n * @param {Number} [options.radius=1] - radius of sphere\n * @param {Number} [options.resolution=defaultResolution3D] - number of polygons per 360 degree revolution\n * @param {Array} [options.axes] -  an array with 3 vectors for the x, y and z base vectors\n * @returns {CSG} new 3D solid\n *\n *\n * @example\n * let sphere = CSG.sphere({\n *   center: [0, 0, 0],\n *   radius: 2,\n *   resolution: 32,\n * });\n*/\nconst sphere = function (options) {\n  options = options || {}\n  let center = parseOptionAs3DVector(options, 'center', [0, 0, 0])\n  let radius = parseOptionAsFloat(options, 'radius', 1)\n  let resolution = parseOptionAsInt(options, 'resolution', defaultResolution3D)\n  let xvector, yvector, zvector\n  if ('axes' in options) {\n    xvector = options.axes[0].unit().times(radius)\n    yvector = options.axes[1].unit().times(radius)\n    zvector = options.axes[2].unit().times(radius)\n  } else {\n    xvector = new Vector3([1, 0, 0]).times(radius)\n    yvector = new Vector3([0, -1, 0]).times(radius)\n    zvector = new Vector3([0, 0, 1]).times(radius)\n  }\n  if (resolution < 4) resolution = 4\n  let qresolution = Math.round(resolution / 4)\n  let prevcylinderpoint\n  let polygons = []\n  for (let slice1 = 0; slice1 <= resolution; slice1++) {\n    let angle = Math.PI * 2.0 * slice1 / resolution\n    let cylinderpoint = xvector.times(Math.cos(angle)).plus(yvector.times(Math.sin(angle)))\n    if (slice1 > 0) {\n            // cylinder vertices:\n      let vertices = []\n      let prevcospitch, prevsinpitch\n      for (let slice2 = 0; slice2 <= qresolution; slice2++) {\n        let pitch = 0.5 * Math.PI * slice2 / qresolution\n        let cospitch = Math.cos(pitch)\n        let sinpitch = Math.sin(pitch)\n        if (slice2 > 0) {\n          vertices = []\n          vertices.push(new Vertex3(center.plus(prevcylinderpoint.times(prevcospitch).minus(zvector.times(prevsinpitch)))))\n          vertices.push(new Vertex3(center.plus(cylinderpoint.times(prevcospitch).minus(zvector.times(prevsinpitch)))))\n          if (slice2 < qresolution) {\n            vertices.push(new Vertex3(center.plus(cylinderpoint.times(cospitch).minus(zvector.times(sinpitch)))))\n          }\n          vertices.push(new Vertex3(center.plus(prevcylinderpoint.times(cospitch).minus(zvector.times(sinpitch)))))\n          polygons.push(new Polygon3(vertices))\n          vertices = []\n          vertices.push(new Vertex3(center.plus(prevcylinderpoint.times(prevcospitch).plus(zvector.times(prevsinpitch)))))\n          vertices.push(new Vertex3(center.plus(cylinderpoint.times(prevcospitch).plus(zvector.times(prevsinpitch)))))\n          if (slice2 < qresolution) {\n            vertices.push(new Vertex3(center.plus(cylinderpoint.times(cospitch).plus(zvector.times(sinpitch)))))\n          }\n          vertices.push(new Vertex3(center.plus(prevcylinderpoint.times(cospitch).plus(zvector.times(sinpitch)))))\n          vertices.reverse()\n          polygons.push(new Polygon3(vertices))\n        }\n        prevcospitch = cospitch\n        prevsinpitch = sinpitch\n      }\n    }\n    prevcylinderpoint = cylinderpoint\n  }\n  let result = fromPolygons(polygons)\n  result.properties.sphere = new Properties()\n  result.properties.sphere.center = new Vector3(center)\n  result.properties.sphere.facepoint = center.plus(xvector)\n  return result\n}\n\n/** Construct a solid cylinder.\n * @param {Object} [options] - options for construction\n * @param {Vector} [options.start=[0,-1,0]] - start point of cylinder\n * @param {Vector} [options.end=[0,1,0]] - end point of cylinder\n * @param {Number} [options.radius=1] - radius of cylinder, must be scalar\n * @param {Number} [options.resolution=defaultResolution3D] - number of polygons per 360 degree revolution\n * @returns {CSG} new 3D solid\n *\n * @example\n * let cylinder = CSG.cylinder({\n *   start: [0, -10, 0],\n *   end: [0, 10, 0],\n *   radius: 10,\n *   resolution: 16\n * });\n */\nconst cylinder = function (options) {\n  let s = parseOptionAs3DVector(options, 'start', [0, -1, 0])\n  let e = parseOptionAs3DVector(options, 'end', [0, 1, 0])\n  let r = parseOptionAsFloat(options, 'radius', 1)\n  let rEnd = parseOptionAsFloat(options, 'radiusEnd', r)\n  let rStart = parseOptionAsFloat(options, 'radiusStart', r)\n  let alpha = parseOptionAsFloat(options, 'sectorAngle', 360)\n  alpha = alpha > 360 ? alpha % 360 : alpha\n\n  if ((rEnd < 0) || (rStart < 0)) {\n    throw new Error('Radius should be non-negative')\n  }\n  if ((rEnd === 0) && (rStart === 0)) {\n    throw new Error('Either radiusStart or radiusEnd should be positive')\n  }\n\n  let slices = parseOptionAsInt(options, 'resolution', defaultResolution2D) // FIXME is this 3D?\n  let ray = e.minus(s)\n  let axisZ = ray.unit() //, isY = (Math.abs(axisZ.y) > 0.5);\n  let axisX = axisZ.randomNonParallelVector().unit()\n\n    //  let axisX = new Vector3(isY, !isY, 0).cross(axisZ).unit();\n  let axisY = axisX.cross(axisZ).unit()\n  let start = new Vertex3(s)\n  let end = new Vertex3(e)\n  let polygons = []\n\n  function point (stack, slice, radius) {\n    let angle = slice * Math.PI * alpha / 180\n    let out = axisX.times(Math.cos(angle)).plus(axisY.times(Math.sin(angle)))\n    let pos = s.plus(ray.times(stack)).plus(out.times(radius))\n    return new Vertex3(pos)\n  }\n  if (alpha > 0) {\n    for (let i = 0; i < slices; i++) {\n      let t0 = i / slices\n      let t1 = (i + 1) / slices\n      if (rEnd === rStart) {\n        polygons.push(new Polygon3([start, point(0, t0, rEnd), point(0, t1, rEnd)]))\n        polygons.push(new Polygon3([point(0, t1, rEnd), point(0, t0, rEnd), point(1, t0, rEnd), point(1, t1, rEnd)]))\n        polygons.push(new Polygon3([end, point(1, t1, rEnd), point(1, t0, rEnd)]))\n      } else {\n        if (rStart > 0) {\n          polygons.push(new Polygon3([start, point(0, t0, rStart), point(0, t1, rStart)]))\n          polygons.push(new Polygon3([point(0, t0, rStart), point(1, t0, rEnd), point(0, t1, rStart)]))\n        }\n        if (rEnd > 0) {\n          polygons.push(new Polygon3([end, point(1, t1, rEnd), point(1, t0, rEnd)]))\n          polygons.push(new Polygon3([point(1, t0, rEnd), point(1, t1, rEnd), point(0, t1, rStart)]))\n        }\n      }\n    }\n    if (alpha < 360) {\n      polygons.push(new Polygon3([start, end, point(0, 0, rStart)]))\n      polygons.push(new Polygon3([point(0, 0, rStart), end, point(1, 0, rEnd)]))\n      polygons.push(new Polygon3([start, point(0, 1, rStart), end]))\n      polygons.push(new Polygon3([point(0, 1, rStart), point(1, 1, rEnd), end]))\n    }\n  }\n  let result = fromPolygons(polygons)\n  result.properties.cylinder = new Properties()\n  result.properties.cylinder.start = new Connector(s, axisZ.negated(), axisX)\n  result.properties.cylinder.end = new Connector(e, axisZ, axisX)\n  let cylCenter = s.plus(ray.times(0.5))\n  let fptVec = axisX.rotate(s, axisZ, -alpha / 2).times((rStart + rEnd) / 2)\n  let fptVec90 = fptVec.cross(axisZ)\n    // note this one is NOT a face normal for a cone. - It's horizontal from cyl perspective\n  result.properties.cylinder.facepointH = new Connector(cylCenter.plus(fptVec), fptVec, axisZ)\n  result.properties.cylinder.facepointH90 = new Connector(cylCenter.plus(fptVec90), fptVec90, axisZ)\n  return result\n}\n\n/** Construct a cylinder with rounded ends.\n * @param {Object} [options] - options for construction\n * @param {Vector3} [options.start=[0,-1,0]] - start point of cylinder\n * @param {Vector3} [options.end=[0,1,0]] - end point of cylinder\n * @param {Number} [options.radius=1] - radius of rounded ends, must be scalar\n * @param {Vector3} [options.normal] - vector determining the starting angle for tesselation. Should be non-parallel to start.minus(end)\n * @param {Number} [options.resolution=defaultResolution3D] - number of polygons per 360 degree revolution\n * @returns {CSG} new 3D solid\n *\n * @example\n * let cylinder = CSG.roundedCylinder({\n *   start: [0, -10, 0],\n *   end: [0, 10, 0],\n *   radius: 2,\n *   resolution: 16\n * });\n */\nconst roundedCylinder = function (options) {\n  let p1 = parseOptionAs3DVector(options, 'start', [0, -1, 0])\n  let p2 = parseOptionAs3DVector(options, 'end', [0, 1, 0])\n  let radius = parseOptionAsFloat(options, 'radius', 1)\n  let direction = p2.minus(p1)\n  let defaultnormal\n  if (Math.abs(direction.x) > Math.abs(direction.y)) {\n    defaultnormal = new Vector3(0, 1, 0)\n  } else {\n    defaultnormal = new Vector3(1, 0, 0)\n  }\n  let normal = parseOptionAs3DVector(options, 'normal', defaultnormal)\n  let resolution = parseOptionAsInt(options, 'resolution', defaultResolution3D)\n  if (resolution < 4) resolution = 4\n  let polygons = []\n  let qresolution = Math.floor(0.25 * resolution)\n  let length = direction.length()\n  if (length < EPS) {\n    return sphere({\n      center: p1,\n      radius: radius,\n      resolution: resolution\n    })\n  }\n  let zvector = direction.unit().times(radius)\n  let xvector = zvector.cross(normal).unit().times(radius)\n  let yvector = xvector.cross(zvector).unit().times(radius)\n  let prevcylinderpoint\n  for (let slice1 = 0; slice1 <= resolution; slice1++) {\n    let angle = Math.PI * 2.0 * slice1 / resolution\n    let cylinderpoint = xvector.times(Math.cos(angle)).plus(yvector.times(Math.sin(angle)))\n    if (slice1 > 0) {\n            // cylinder vertices:\n      let vertices = []\n      vertices.push(new Vertex3(p1.plus(cylinderpoint)))\n      vertices.push(new Vertex3(p1.plus(prevcylinderpoint)))\n      vertices.push(new Vertex3(p2.plus(prevcylinderpoint)))\n      vertices.push(new Vertex3(p2.plus(cylinderpoint)))\n      polygons.push(new Polygon3(vertices))\n      let prevcospitch, prevsinpitch\n      for (let slice2 = 0; slice2 <= qresolution; slice2++) {\n        let pitch = 0.5 * Math.PI * slice2 / qresolution\n                // let pitch = Math.asin(slice2/qresolution);\n        let cospitch = Math.cos(pitch)\n        let sinpitch = Math.sin(pitch)\n        if (slice2 > 0) {\n          vertices = []\n          vertices.push(new Vertex3(p1.plus(prevcylinderpoint.times(prevcospitch).minus(zvector.times(prevsinpitch)))))\n          vertices.push(new Vertex3(p1.plus(cylinderpoint.times(prevcospitch).minus(zvector.times(prevsinpitch)))))\n          if (slice2 < qresolution) {\n            vertices.push(new Vertex3(p1.plus(cylinderpoint.times(cospitch).minus(zvector.times(sinpitch)))))\n          }\n          vertices.push(new Vertex3(p1.plus(prevcylinderpoint.times(cospitch).minus(zvector.times(sinpitch)))))\n          polygons.push(new Polygon3(vertices))\n          vertices = []\n          vertices.push(new Vertex3(p2.plus(prevcylinderpoint.times(prevcospitch).plus(zvector.times(prevsinpitch)))))\n          vertices.push(new Vertex3(p2.plus(cylinderpoint.times(prevcospitch).plus(zvector.times(prevsinpitch)))))\n          if (slice2 < qresolution) {\n            vertices.push(new Vertex3(p2.plus(cylinderpoint.times(cospitch).plus(zvector.times(sinpitch)))))\n          }\n          vertices.push(new Vertex3(p2.plus(prevcylinderpoint.times(cospitch).plus(zvector.times(sinpitch)))))\n          vertices.reverse()\n          polygons.push(new Polygon3(vertices))\n        }\n        prevcospitch = cospitch\n        prevsinpitch = sinpitch\n      }\n    }\n    prevcylinderpoint = cylinderpoint\n  }\n  let result = fromPolygons(polygons)\n  let ray = zvector.unit()\n  let axisX = xvector.unit()\n  result.properties.roundedCylinder = new Properties()\n  result.properties.roundedCylinder.start = new Connector(p1, ray.negated(), axisX)\n  result.properties.roundedCylinder.end = new Connector(p2, ray, axisX)\n  result.properties.roundedCylinder.facepoint = p1.plus(xvector)\n  return result\n}\n\n/** Construct an elliptic cylinder.\n * @param {Object} [options] - options for construction\n * @param {Vector3} [options.start=[0,-1,0]] - start point of cylinder\n * @param {Vector3} [options.end=[0,1,0]] - end point of cylinder\n * @param {Vector2D} [options.radius=[1,1]] - radius of rounded ends, must be two dimensional array\n * @param {Vector2D} [options.radiusStart=[1,1]] - OPTIONAL radius of rounded start, must be two dimensional array\n * @param {Vector2D} [options.radiusEnd=[1,1]] - OPTIONAL radius of rounded end, must be two dimensional array\n * @param {Number} [options.resolution=defaultResolution2D] - number of polygons per 360 degree revolution\n * @returns {CSG} new 3D solid\n *\n * @example\n *     let cylinder = CSG.cylinderElliptic({\n *       start: [0, -10, 0],\n *       end: [0, 10, 0],\n *       radiusStart: [10,5],\n *       radiusEnd: [8,3],\n *       resolution: 16\n *     });\n */\n\nconst cylinderElliptic = function (options) {\n  let s = parseOptionAs3DVector(options, 'start', [0, -1, 0])\n  let e = parseOptionAs3DVector(options, 'end', [0, 1, 0])\n  let r = parseOptionAs2DVector(options, 'radius', [1, 1])\n  let rEnd = parseOptionAs2DVector(options, 'radiusEnd', r)\n  let rStart = parseOptionAs2DVector(options, 'radiusStart', r)\n\n  if ((rEnd._x < 0) || (rStart._x < 0) || (rEnd._y < 0) || (rStart._y < 0)) {\n    throw new Error('Radius should be non-negative')\n  }\n  if ((rEnd._x === 0 || rEnd._y === 0) && (rStart._x === 0 || rStart._y === 0)) {\n    throw new Error('Either radiusStart or radiusEnd should be positive')\n  }\n\n  let slices = parseOptionAsInt(options, 'resolution', defaultResolution2D) // FIXME is this correct?\n  let ray = e.minus(s)\n  let axisZ = ray.unit() //, isY = (Math.abs(axisZ.y) > 0.5);\n  let axisX = axisZ.randomNonParallelVector().unit()\n\n    //  let axisX = new Vector3(isY, !isY, 0).cross(axisZ).unit();\n  let axisY = axisX.cross(axisZ).unit()\n  let start = new Vertex3(s)\n  let end = new Vertex3(e)\n  let polygons = []\n\n  function point (stack, slice, radius) {\n    let angle = slice * Math.PI * 2\n    let out = axisX.times(radius._x * Math.cos(angle)).plus(axisY.times(radius._y * Math.sin(angle)))\n    let pos = s.plus(ray.times(stack)).plus(out)\n    return new Vertex3(pos)\n  }\n  for (let i = 0; i < slices; i++) {\n    let t0 = i / slices\n    let t1 = (i + 1) / slices\n\n    if (rEnd._x === rStart._x && rEnd._y === rStart._y) {\n      polygons.push(new Polygon3([start, point(0, t0, rEnd), point(0, t1, rEnd)]))\n      polygons.push(new Polygon3([point(0, t1, rEnd), point(0, t0, rEnd), point(1, t0, rEnd), point(1, t1, rEnd)]))\n      polygons.push(new Polygon3([end, point(1, t1, rEnd), point(1, t0, rEnd)]))\n    } else {\n      if (rStart._x > 0) {\n        polygons.push(new Polygon3([start, point(0, t0, rStart), point(0, t1, rStart)]))\n        polygons.push(new Polygon3([point(0, t0, rStart), point(1, t0, rEnd), point(0, t1, rStart)]))\n      }\n      if (rEnd._x > 0) {\n        polygons.push(new Polygon3([end, point(1, t1, rEnd), point(1, t0, rEnd)]))\n        polygons.push(new Polygon3([point(1, t0, rEnd), point(1, t1, rEnd), point(0, t1, rStart)]))\n      }\n    }\n  }\n  let result = fromPolygons(polygons)\n  result.properties.cylinder = new Properties()\n  result.properties.cylinder.start = new Connector(s, axisZ.negated(), axisX)\n  result.properties.cylinder.end = new Connector(e, axisZ, axisX)\n  result.properties.cylinder.facepoint = s.plus(axisX.times(rStart))\n  return result\n}\n\n/** Construct an axis-aligned solid rounded cuboid.\n * @param {Object} [options] - options for construction\n * @param {Vector3} [options.center=[0,0,0]] - center of rounded cube\n * @param {Vector3} [options.radius=[1,1,1]] - radius of rounded cube, single scalar is possible\n * @param {Number} [options.roundradius=0.2] - radius of rounded edges\n * @param {Number} [options.resolution=defaultResolution3D] - number of polygons per 360 degree revolution\n * @returns {CSG} new 3D solid\n *\n * @example\n * let cube = CSG.roundedCube({\n *   center: [2, 0, 2],\n *   radius: 15,\n *   roundradius: 2,\n *   resolution: 36,\n * });\n */\nconst roundedCube = function (options) {\n  let minRR = 1e-2 // minroundradius 1e-3 gives rounding errors already\n  let center\n  let cuberadius\n  let corner1\n  let corner2\n  options = options || {}\n  if (('corner1' in options) || ('corner2' in options)) {\n    if (('center' in options) || ('radius' in options)) {\n      throw new Error('roundedCube: should either give a radius and center parameter, or a corner1 and corner2 parameter')\n    }\n    corner1 = parseOptionAs3DVector(options, 'corner1', [0, 0, 0])\n    corner2 = parseOptionAs3DVector(options, 'corner2', [1, 1, 1])\n    center = corner1.plus(corner2).times(0.5)\n    cuberadius = corner2.minus(corner1).times(0.5)\n  } else {\n    center = parseOptionAs3DVector(options, 'center', [0, 0, 0])\n    cuberadius = parseOptionAs3DVector(options, 'radius', [1, 1, 1])\n  }\n  cuberadius = cuberadius.abs() // negative radii make no sense\n  let resolution = parseOptionAsInt(options, 'resolution', defaultResolution3D)\n  if (resolution < 4) resolution = 4\n  if (resolution % 2 === 1 && resolution < 8) resolution = 8 // avoid ugly\n  let roundradius = parseOptionAs3DVector(options, 'roundradius', [0.2, 0.2, 0.2])\n    // slight hack for now - total radius stays ok\n  roundradius = Vector3.Create(Math.max(roundradius.x, minRR), Math.max(roundradius.y, minRR), Math.max(roundradius.z, minRR))\n  let innerradius = cuberadius.minus(roundradius)\n  if (innerradius.x < 0 || innerradius.y < 0 || innerradius.z < 0) {\n    throw new Error('roundradius <= radius!')\n  }\n  let res = sphere({radius: 1, resolution: resolution})\n  res = res.scale(roundradius)\n  innerradius.x > EPS && (res = res.stretchAtPlane([1, 0, 0], [0, 0, 0], 2 * innerradius.x))\n  innerradius.y > EPS && (res = res.stretchAtPlane([0, 1, 0], [0, 0, 0], 2 * innerradius.y))\n  innerradius.z > EPS && (res = res.stretchAtPlane([0, 0, 1], [0, 0, 0], 2 * innerradius.z))\n  res = res.translate([-innerradius.x + center.x, -innerradius.y + center.y, -innerradius.z + center.z])\n  res = res.reTesselated()\n  res.properties.roundedCube = new Properties()\n  res.properties.roundedCube.center = new Vertex3(center)\n  res.properties.roundedCube.facecenters = [\n    new Connector(new Vector3([cuberadius.x, 0, 0]).plus(center), [1, 0, 0], [0, 0, 1]),\n    new Connector(new Vector3([-cuberadius.x, 0, 0]).plus(center), [-1, 0, 0], [0, 0, 1]),\n    new Connector(new Vector3([0, cuberadius.y, 0]).plus(center), [0, 1, 0], [0, 0, 1]),\n    new Connector(new Vector3([0, -cuberadius.y, 0]).plus(center), [0, -1, 0], [0, 0, 1]),\n    new Connector(new Vector3([0, 0, cuberadius.z]).plus(center), [0, 0, 1], [1, 0, 0]),\n    new Connector(new Vector3([0, 0, -cuberadius.z]).plus(center), [0, 0, -1], [1, 0, 0])\n  ]\n  return res\n}\n\n/** Create a polyhedron using Openscad style arguments.\n * Define face vertices clockwise looking from outside.\n * @param {Object} [options] - options for construction\n * @returns {CSG} new 3D solid\n */\nconst polyhedron = function (options) {\n  options = options || {}\n  if (('points' in options) !== ('faces' in options)) {\n    throw new Error(\"polyhedron needs 'points' and 'faces' arrays\")\n  }\n  let vertices = parseOptionAs3DVectorList(options, 'points', [\n            [1, 1, 0],\n            [1, -1, 0],\n            [-1, -1, 0],\n            [-1, 1, 0],\n            [0, 0, 1]\n  ])\n        .map(function (pt) {\n          return new Vertex3(pt)\n        })\n  let faces = parseOption(options, 'faces', [\n            [0, 1, 4],\n            [1, 2, 4],\n            [2, 3, 4],\n            [3, 0, 4],\n            [1, 0, 3],\n            [2, 1, 3]\n  ])\n    // Openscad convention defines inward normals - so we have to invert here\n  faces.forEach(function (face) {\n    face.reverse()\n  })\n  let polygons = faces.map(function (face) {\n    return new Polygon3(face.map(function (idx) {\n      return vertices[idx]\n    }))\n  })\n\n    // TODO: facecenters as connectors? probably overkill. Maybe centroid\n    // the re-tesselation here happens because it's so easy for a user to\n    // create parametrized polyhedrons that end up with 1-2 dimensional polygons.\n    // These will create infinite loops at CSG.Tree()\n  return fromPolygons(polygons).reTesselated()\n}\n\nmodule.exports = {\n  cube,\n  sphere,\n  roundedCube,\n  cylinder,\n  roundedCylinder,\n  cylinderElliptic,\n  polyhedron\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/@jscad/csg/src/api/primitives3d.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}}],"sources":{"node_modules/@jscad/csg/src/api/primitives3d.js":"const {parseOption, parseOptionAs3DVector, parseOptionAs2DVector, parseOptionAs3DVectorList, parseOptionAsFloat, parseOptionAsInt} = require('./optionParsers')\nconst {defaultResolution3D, defaultResolution2D, EPS} = require('../core/constants')\nconst Vector3 = require('../core/math/Vector3')\nconst Vertex3 = require('../core/math/Vertex3')\nconst Polygon3 = require('../core/math/Polygon3')\nconst {Connector} = require('../core/connectors')\nconst Properties = require('../core/Properties')\nconst {fromPolygons} = require('../core/CSGFactories')\n\n/** Construct an axis-aligned solid cuboid.\n * @param {Object} [options] - options for construction\n * @param {Vector3} [options.center=[0,0,0]] - center of cube\n * @param {Vector3} [options.radius=[1,1,1]] - radius of cube, single scalar also possible\n * @returns {CSG} new 3D solid\n *\n * @example\n * let cube = CSG.cube({\n *   center: [5, 5, 5],\n *   radius: 5, // scalar radius\n * });\n */\nconst cube = function (options) {\n  let c\n  let r\n  let corner1\n  let corner2\n  options = options || {}\n  if (('corner1' in options) || ('corner2' in options)) {\n    if (('center' in options) || ('radius' in options)) {\n      throw new Error('cube: should either give a radius and center parameter, or a corner1 and corner2 parameter')\n    }\n    corner1 = parseOptionAs3DVector(options, 'corner1', [0, 0, 0])\n    corner2 = parseOptionAs3DVector(options, 'corner2', [1, 1, 1])\n    c = corner1.plus(corner2).times(0.5)\n    r = corner2.minus(corner1).times(0.5)\n  } else {\n    c = parseOptionAs3DVector(options, 'center', [0, 0, 0])\n    r = parseOptionAs3DVector(options, 'radius', [1, 1, 1])\n  }\n  r = r.abs() // negative radii make no sense\n  let result = fromPolygons([\n    [\n            [0, 4, 6, 2],\n            [-1, 0, 0]\n    ],\n    [\n            [1, 3, 7, 5],\n            [+1, 0, 0]\n    ],\n    [\n            [0, 1, 5, 4],\n            [0, -1, 0]\n    ],\n    [\n            [2, 6, 7, 3],\n            [0, +1, 0]\n    ],\n    [\n            [0, 2, 3, 1],\n            [0, 0, -1]\n    ],\n    [\n            [4, 5, 7, 6],\n            [0, 0, +1]\n    ]\n  ].map(function (info) {\n    let vertices = info[0].map(function (i) {\n      let pos = new Vector3(\n                c.x + r.x * (2 * !!(i & 1) - 1), c.y + r.y * (2 * !!(i & 2) - 1), c.z + r.z * (2 * !!(i & 4) - 1))\n      return new Vertex3(pos)\n    })\n    return new Polygon3(vertices, null /* , plane */)\n  }))\n  result.properties.cube = new Properties()\n  result.properties.cube.center = new Vector3(c)\n    // add 6 connectors, at the centers of each face:\n  result.properties.cube.facecenters = [\n    new Connector(new Vector3([r.x, 0, 0]).plus(c), [1, 0, 0], [0, 0, 1]),\n    new Connector(new Vector3([-r.x, 0, 0]).plus(c), [-1, 0, 0], [0, 0, 1]),\n    new Connector(new Vector3([0, r.y, 0]).plus(c), [0, 1, 0], [0, 0, 1]),\n    new Connector(new Vector3([0, -r.y, 0]).plus(c), [0, -1, 0], [0, 0, 1]),\n    new Connector(new Vector3([0, 0, r.z]).plus(c), [0, 0, 1], [1, 0, 0]),\n    new Connector(new Vector3([0, 0, -r.z]).plus(c), [0, 0, -1], [1, 0, 0])\n  ]\n  return result\n}\n\n/** Construct a solid sphere\n * @param {Object} [options] - options for construction\n * @param {Vector3} [options.center=[0,0,0]] - center of sphere\n * @param {Number} [options.radius=1] - radius of sphere\n * @param {Number} [options.resolution=defaultResolution3D] - number of polygons per 360 degree revolution\n * @param {Array} [options.axes] -  an array with 3 vectors for the x, y and z base vectors\n * @returns {CSG} new 3D solid\n *\n *\n * @example\n * let sphere = CSG.sphere({\n *   center: [0, 0, 0],\n *   radius: 2,\n *   resolution: 32,\n * });\n*/\nconst sphere = function (options) {\n  options = options || {}\n  let center = parseOptionAs3DVector(options, 'center', [0, 0, 0])\n  let radius = parseOptionAsFloat(options, 'radius', 1)\n  let resolution = parseOptionAsInt(options, 'resolution', defaultResolution3D)\n  let xvector, yvector, zvector\n  if ('axes' in options) {\n    xvector = options.axes[0].unit().times(radius)\n    yvector = options.axes[1].unit().times(radius)\n    zvector = options.axes[2].unit().times(radius)\n  } else {\n    xvector = new Vector3([1, 0, 0]).times(radius)\n    yvector = new Vector3([0, -1, 0]).times(radius)\n    zvector = new Vector3([0, 0, 1]).times(radius)\n  }\n  if (resolution < 4) resolution = 4\n  let qresolution = Math.round(resolution / 4)\n  let prevcylinderpoint\n  let polygons = []\n  for (let slice1 = 0; slice1 <= resolution; slice1++) {\n    let angle = Math.PI * 2.0 * slice1 / resolution\n    let cylinderpoint = xvector.times(Math.cos(angle)).plus(yvector.times(Math.sin(angle)))\n    if (slice1 > 0) {\n            // cylinder vertices:\n      let vertices = []\n      let prevcospitch, prevsinpitch\n      for (let slice2 = 0; slice2 <= qresolution; slice2++) {\n        let pitch = 0.5 * Math.PI * slice2 / qresolution\n        let cospitch = Math.cos(pitch)\n        let sinpitch = Math.sin(pitch)\n        if (slice2 > 0) {\n          vertices = []\n          vertices.push(new Vertex3(center.plus(prevcylinderpoint.times(prevcospitch).minus(zvector.times(prevsinpitch)))))\n          vertices.push(new Vertex3(center.plus(cylinderpoint.times(prevcospitch).minus(zvector.times(prevsinpitch)))))\n          if (slice2 < qresolution) {\n            vertices.push(new Vertex3(center.plus(cylinderpoint.times(cospitch).minus(zvector.times(sinpitch)))))\n          }\n          vertices.push(new Vertex3(center.plus(prevcylinderpoint.times(cospitch).minus(zvector.times(sinpitch)))))\n          polygons.push(new Polygon3(vertices))\n          vertices = []\n          vertices.push(new Vertex3(center.plus(prevcylinderpoint.times(prevcospitch).plus(zvector.times(prevsinpitch)))))\n          vertices.push(new Vertex3(center.plus(cylinderpoint.times(prevcospitch).plus(zvector.times(prevsinpitch)))))\n          if (slice2 < qresolution) {\n            vertices.push(new Vertex3(center.plus(cylinderpoint.times(cospitch).plus(zvector.times(sinpitch)))))\n          }\n          vertices.push(new Vertex3(center.plus(prevcylinderpoint.times(cospitch).plus(zvector.times(sinpitch)))))\n          vertices.reverse()\n          polygons.push(new Polygon3(vertices))\n        }\n        prevcospitch = cospitch\n        prevsinpitch = sinpitch\n      }\n    }\n    prevcylinderpoint = cylinderpoint\n  }\n  let result = fromPolygons(polygons)\n  result.properties.sphere = new Properties()\n  result.properties.sphere.center = new Vector3(center)\n  result.properties.sphere.facepoint = center.plus(xvector)\n  return result\n}\n\n/** Construct a solid cylinder.\n * @param {Object} [options] - options for construction\n * @param {Vector} [options.start=[0,-1,0]] - start point of cylinder\n * @param {Vector} [options.end=[0,1,0]] - end point of cylinder\n * @param {Number} [options.radius=1] - radius of cylinder, must be scalar\n * @param {Number} [options.resolution=defaultResolution3D] - number of polygons per 360 degree revolution\n * @returns {CSG} new 3D solid\n *\n * @example\n * let cylinder = CSG.cylinder({\n *   start: [0, -10, 0],\n *   end: [0, 10, 0],\n *   radius: 10,\n *   resolution: 16\n * });\n */\nconst cylinder = function (options) {\n  let s = parseOptionAs3DVector(options, 'start', [0, -1, 0])\n  let e = parseOptionAs3DVector(options, 'end', [0, 1, 0])\n  let r = parseOptionAsFloat(options, 'radius', 1)\n  let rEnd = parseOptionAsFloat(options, 'radiusEnd', r)\n  let rStart = parseOptionAsFloat(options, 'radiusStart', r)\n  let alpha = parseOptionAsFloat(options, 'sectorAngle', 360)\n  alpha = alpha > 360 ? alpha % 360 : alpha\n\n  if ((rEnd < 0) || (rStart < 0)) {\n    throw new Error('Radius should be non-negative')\n  }\n  if ((rEnd === 0) && (rStart === 0)) {\n    throw new Error('Either radiusStart or radiusEnd should be positive')\n  }\n\n  let slices = parseOptionAsInt(options, 'resolution', defaultResolution2D) // FIXME is this 3D?\n  let ray = e.minus(s)\n  let axisZ = ray.unit() //, isY = (Math.abs(axisZ.y) > 0.5);\n  let axisX = axisZ.randomNonParallelVector().unit()\n\n    //  let axisX = new Vector3(isY, !isY, 0).cross(axisZ).unit();\n  let axisY = axisX.cross(axisZ).unit()\n  let start = new Vertex3(s)\n  let end = new Vertex3(e)\n  let polygons = []\n\n  function point (stack, slice, radius) {\n    let angle = slice * Math.PI * alpha / 180\n    let out = axisX.times(Math.cos(angle)).plus(axisY.times(Math.sin(angle)))\n    let pos = s.plus(ray.times(stack)).plus(out.times(radius))\n    return new Vertex3(pos)\n  }\n  if (alpha > 0) {\n    for (let i = 0; i < slices; i++) {\n      let t0 = i / slices\n      let t1 = (i + 1) / slices\n      if (rEnd === rStart) {\n        polygons.push(new Polygon3([start, point(0, t0, rEnd), point(0, t1, rEnd)]))\n        polygons.push(new Polygon3([point(0, t1, rEnd), point(0, t0, rEnd), point(1, t0, rEnd), point(1, t1, rEnd)]))\n        polygons.push(new Polygon3([end, point(1, t1, rEnd), point(1, t0, rEnd)]))\n      } else {\n        if (rStart > 0) {\n          polygons.push(new Polygon3([start, point(0, t0, rStart), point(0, t1, rStart)]))\n          polygons.push(new Polygon3([point(0, t0, rStart), point(1, t0, rEnd), point(0, t1, rStart)]))\n        }\n        if (rEnd > 0) {\n          polygons.push(new Polygon3([end, point(1, t1, rEnd), point(1, t0, rEnd)]))\n          polygons.push(new Polygon3([point(1, t0, rEnd), point(1, t1, rEnd), point(0, t1, rStart)]))\n        }\n      }\n    }\n    if (alpha < 360) {\n      polygons.push(new Polygon3([start, end, point(0, 0, rStart)]))\n      polygons.push(new Polygon3([point(0, 0, rStart), end, point(1, 0, rEnd)]))\n      polygons.push(new Polygon3([start, point(0, 1, rStart), end]))\n      polygons.push(new Polygon3([point(0, 1, rStart), point(1, 1, rEnd), end]))\n    }\n  }\n  let result = fromPolygons(polygons)\n  result.properties.cylinder = new Properties()\n  result.properties.cylinder.start = new Connector(s, axisZ.negated(), axisX)\n  result.properties.cylinder.end = new Connector(e, axisZ, axisX)\n  let cylCenter = s.plus(ray.times(0.5))\n  let fptVec = axisX.rotate(s, axisZ, -alpha / 2).times((rStart + rEnd) / 2)\n  let fptVec90 = fptVec.cross(axisZ)\n    // note this one is NOT a face normal for a cone. - It's horizontal from cyl perspective\n  result.properties.cylinder.facepointH = new Connector(cylCenter.plus(fptVec), fptVec, axisZ)\n  result.properties.cylinder.facepointH90 = new Connector(cylCenter.plus(fptVec90), fptVec90, axisZ)\n  return result\n}\n\n/** Construct a cylinder with rounded ends.\n * @param {Object} [options] - options for construction\n * @param {Vector3} [options.start=[0,-1,0]] - start point of cylinder\n * @param {Vector3} [options.end=[0,1,0]] - end point of cylinder\n * @param {Number} [options.radius=1] - radius of rounded ends, must be scalar\n * @param {Vector3} [options.normal] - vector determining the starting angle for tesselation. Should be non-parallel to start.minus(end)\n * @param {Number} [options.resolution=defaultResolution3D] - number of polygons per 360 degree revolution\n * @returns {CSG} new 3D solid\n *\n * @example\n * let cylinder = CSG.roundedCylinder({\n *   start: [0, -10, 0],\n *   end: [0, 10, 0],\n *   radius: 2,\n *   resolution: 16\n * });\n */\nconst roundedCylinder = function (options) {\n  let p1 = parseOptionAs3DVector(options, 'start', [0, -1, 0])\n  let p2 = parseOptionAs3DVector(options, 'end', [0, 1, 0])\n  let radius = parseOptionAsFloat(options, 'radius', 1)\n  let direction = p2.minus(p1)\n  let defaultnormal\n  if (Math.abs(direction.x) > Math.abs(direction.y)) {\n    defaultnormal = new Vector3(0, 1, 0)\n  } else {\n    defaultnormal = new Vector3(1, 0, 0)\n  }\n  let normal = parseOptionAs3DVector(options, 'normal', defaultnormal)\n  let resolution = parseOptionAsInt(options, 'resolution', defaultResolution3D)\n  if (resolution < 4) resolution = 4\n  let polygons = []\n  let qresolution = Math.floor(0.25 * resolution)\n  let length = direction.length()\n  if (length < EPS) {\n    return sphere({\n      center: p1,\n      radius: radius,\n      resolution: resolution\n    })\n  }\n  let zvector = direction.unit().times(radius)\n  let xvector = zvector.cross(normal).unit().times(radius)\n  let yvector = xvector.cross(zvector).unit().times(radius)\n  let prevcylinderpoint\n  for (let slice1 = 0; slice1 <= resolution; slice1++) {\n    let angle = Math.PI * 2.0 * slice1 / resolution\n    let cylinderpoint = xvector.times(Math.cos(angle)).plus(yvector.times(Math.sin(angle)))\n    if (slice1 > 0) {\n            // cylinder vertices:\n      let vertices = []\n      vertices.push(new Vertex3(p1.plus(cylinderpoint)))\n      vertices.push(new Vertex3(p1.plus(prevcylinderpoint)))\n      vertices.push(new Vertex3(p2.plus(prevcylinderpoint)))\n      vertices.push(new Vertex3(p2.plus(cylinderpoint)))\n      polygons.push(new Polygon3(vertices))\n      let prevcospitch, prevsinpitch\n      for (let slice2 = 0; slice2 <= qresolution; slice2++) {\n        let pitch = 0.5 * Math.PI * slice2 / qresolution\n                // let pitch = Math.asin(slice2/qresolution);\n        let cospitch = Math.cos(pitch)\n        let sinpitch = Math.sin(pitch)\n        if (slice2 > 0) {\n          vertices = []\n          vertices.push(new Vertex3(p1.plus(prevcylinderpoint.times(prevcospitch).minus(zvector.times(prevsinpitch)))))\n          vertices.push(new Vertex3(p1.plus(cylinderpoint.times(prevcospitch).minus(zvector.times(prevsinpitch)))))\n          if (slice2 < qresolution) {\n            vertices.push(new Vertex3(p1.plus(cylinderpoint.times(cospitch).minus(zvector.times(sinpitch)))))\n          }\n          vertices.push(new Vertex3(p1.plus(prevcylinderpoint.times(cospitch).minus(zvector.times(sinpitch)))))\n          polygons.push(new Polygon3(vertices))\n          vertices = []\n          vertices.push(new Vertex3(p2.plus(prevcylinderpoint.times(prevcospitch).plus(zvector.times(prevsinpitch)))))\n          vertices.push(new Vertex3(p2.plus(cylinderpoint.times(prevcospitch).plus(zvector.times(prevsinpitch)))))\n          if (slice2 < qresolution) {\n            vertices.push(new Vertex3(p2.plus(cylinderpoint.times(cospitch).plus(zvector.times(sinpitch)))))\n          }\n          vertices.push(new Vertex3(p2.plus(prevcylinderpoint.times(cospitch).plus(zvector.times(sinpitch)))))\n          vertices.reverse()\n          polygons.push(new Polygon3(vertices))\n        }\n        prevcospitch = cospitch\n        prevsinpitch = sinpitch\n      }\n    }\n    prevcylinderpoint = cylinderpoint\n  }\n  let result = fromPolygons(polygons)\n  let ray = zvector.unit()\n  let axisX = xvector.unit()\n  result.properties.roundedCylinder = new Properties()\n  result.properties.roundedCylinder.start = new Connector(p1, ray.negated(), axisX)\n  result.properties.roundedCylinder.end = new Connector(p2, ray, axisX)\n  result.properties.roundedCylinder.facepoint = p1.plus(xvector)\n  return result\n}\n\n/** Construct an elliptic cylinder.\n * @param {Object} [options] - options for construction\n * @param {Vector3} [options.start=[0,-1,0]] - start point of cylinder\n * @param {Vector3} [options.end=[0,1,0]] - end point of cylinder\n * @param {Vector2D} [options.radius=[1,1]] - radius of rounded ends, must be two dimensional array\n * @param {Vector2D} [options.radiusStart=[1,1]] - OPTIONAL radius of rounded start, must be two dimensional array\n * @param {Vector2D} [options.radiusEnd=[1,1]] - OPTIONAL radius of rounded end, must be two dimensional array\n * @param {Number} [options.resolution=defaultResolution2D] - number of polygons per 360 degree revolution\n * @returns {CSG} new 3D solid\n *\n * @example\n *     let cylinder = CSG.cylinderElliptic({\n *       start: [0, -10, 0],\n *       end: [0, 10, 0],\n *       radiusStart: [10,5],\n *       radiusEnd: [8,3],\n *       resolution: 16\n *     });\n */\n\nconst cylinderElliptic = function (options) {\n  let s = parseOptionAs3DVector(options, 'start', [0, -1, 0])\n  let e = parseOptionAs3DVector(options, 'end', [0, 1, 0])\n  let r = parseOptionAs2DVector(options, 'radius', [1, 1])\n  let rEnd = parseOptionAs2DVector(options, 'radiusEnd', r)\n  let rStart = parseOptionAs2DVector(options, 'radiusStart', r)\n\n  if ((rEnd._x < 0) || (rStart._x < 0) || (rEnd._y < 0) || (rStart._y < 0)) {\n    throw new Error('Radius should be non-negative')\n  }\n  if ((rEnd._x === 0 || rEnd._y === 0) && (rStart._x === 0 || rStart._y === 0)) {\n    throw new Error('Either radiusStart or radiusEnd should be positive')\n  }\n\n  let slices = parseOptionAsInt(options, 'resolution', defaultResolution2D) // FIXME is this correct?\n  let ray = e.minus(s)\n  let axisZ = ray.unit() //, isY = (Math.abs(axisZ.y) > 0.5);\n  let axisX = axisZ.randomNonParallelVector().unit()\n\n    //  let axisX = new Vector3(isY, !isY, 0).cross(axisZ).unit();\n  let axisY = axisX.cross(axisZ).unit()\n  let start = new Vertex3(s)\n  let end = new Vertex3(e)\n  let polygons = []\n\n  function point (stack, slice, radius) {\n    let angle = slice * Math.PI * 2\n    let out = axisX.times(radius._x * Math.cos(angle)).plus(axisY.times(radius._y * Math.sin(angle)))\n    let pos = s.plus(ray.times(stack)).plus(out)\n    return new Vertex3(pos)\n  }\n  for (let i = 0; i < slices; i++) {\n    let t0 = i / slices\n    let t1 = (i + 1) / slices\n\n    if (rEnd._x === rStart._x && rEnd._y === rStart._y) {\n      polygons.push(new Polygon3([start, point(0, t0, rEnd), point(0, t1, rEnd)]))\n      polygons.push(new Polygon3([point(0, t1, rEnd), point(0, t0, rEnd), point(1, t0, rEnd), point(1, t1, rEnd)]))\n      polygons.push(new Polygon3([end, point(1, t1, rEnd), point(1, t0, rEnd)]))\n    } else {\n      if (rStart._x > 0) {\n        polygons.push(new Polygon3([start, point(0, t0, rStart), point(0, t1, rStart)]))\n        polygons.push(new Polygon3([point(0, t0, rStart), point(1, t0, rEnd), point(0, t1, rStart)]))\n      }\n      if (rEnd._x > 0) {\n        polygons.push(new Polygon3([end, point(1, t1, rEnd), point(1, t0, rEnd)]))\n        polygons.push(new Polygon3([point(1, t0, rEnd), point(1, t1, rEnd), point(0, t1, rStart)]))\n      }\n    }\n  }\n  let result = fromPolygons(polygons)\n  result.properties.cylinder = new Properties()\n  result.properties.cylinder.start = new Connector(s, axisZ.negated(), axisX)\n  result.properties.cylinder.end = new Connector(e, axisZ, axisX)\n  result.properties.cylinder.facepoint = s.plus(axisX.times(rStart))\n  return result\n}\n\n/** Construct an axis-aligned solid rounded cuboid.\n * @param {Object} [options] - options for construction\n * @param {Vector3} [options.center=[0,0,0]] - center of rounded cube\n * @param {Vector3} [options.radius=[1,1,1]] - radius of rounded cube, single scalar is possible\n * @param {Number} [options.roundradius=0.2] - radius of rounded edges\n * @param {Number} [options.resolution=defaultResolution3D] - number of polygons per 360 degree revolution\n * @returns {CSG} new 3D solid\n *\n * @example\n * let cube = CSG.roundedCube({\n *   center: [2, 0, 2],\n *   radius: 15,\n *   roundradius: 2,\n *   resolution: 36,\n * });\n */\nconst roundedCube = function (options) {\n  let minRR = 1e-2 // minroundradius 1e-3 gives rounding errors already\n  let center\n  let cuberadius\n  let corner1\n  let corner2\n  options = options || {}\n  if (('corner1' in options) || ('corner2' in options)) {\n    if (('center' in options) || ('radius' in options)) {\n      throw new Error('roundedCube: should either give a radius and center parameter, or a corner1 and corner2 parameter')\n    }\n    corner1 = parseOptionAs3DVector(options, 'corner1', [0, 0, 0])\n    corner2 = parseOptionAs3DVector(options, 'corner2', [1, 1, 1])\n    center = corner1.plus(corner2).times(0.5)\n    cuberadius = corner2.minus(corner1).times(0.5)\n  } else {\n    center = parseOptionAs3DVector(options, 'center', [0, 0, 0])\n    cuberadius = parseOptionAs3DVector(options, 'radius', [1, 1, 1])\n  }\n  cuberadius = cuberadius.abs() // negative radii make no sense\n  let resolution = parseOptionAsInt(options, 'resolution', defaultResolution3D)\n  if (resolution < 4) resolution = 4\n  if (resolution % 2 === 1 && resolution < 8) resolution = 8 // avoid ugly\n  let roundradius = parseOptionAs3DVector(options, 'roundradius', [0.2, 0.2, 0.2])\n    // slight hack for now - total radius stays ok\n  roundradius = Vector3.Create(Math.max(roundradius.x, minRR), Math.max(roundradius.y, minRR), Math.max(roundradius.z, minRR))\n  let innerradius = cuberadius.minus(roundradius)\n  if (innerradius.x < 0 || innerradius.y < 0 || innerradius.z < 0) {\n    throw new Error('roundradius <= radius!')\n  }\n  let res = sphere({radius: 1, resolution: resolution})\n  res = res.scale(roundradius)\n  innerradius.x > EPS && (res = res.stretchAtPlane([1, 0, 0], [0, 0, 0], 2 * innerradius.x))\n  innerradius.y > EPS && (res = res.stretchAtPlane([0, 1, 0], [0, 0, 0], 2 * innerradius.y))\n  innerradius.z > EPS && (res = res.stretchAtPlane([0, 0, 1], [0, 0, 0], 2 * innerradius.z))\n  res = res.translate([-innerradius.x + center.x, -innerradius.y + center.y, -innerradius.z + center.z])\n  res = res.reTesselated()\n  res.properties.roundedCube = new Properties()\n  res.properties.roundedCube.center = new Vertex3(center)\n  res.properties.roundedCube.facecenters = [\n    new Connector(new Vector3([cuberadius.x, 0, 0]).plus(center), [1, 0, 0], [0, 0, 1]),\n    new Connector(new Vector3([-cuberadius.x, 0, 0]).plus(center), [-1, 0, 0], [0, 0, 1]),\n    new Connector(new Vector3([0, cuberadius.y, 0]).plus(center), [0, 1, 0], [0, 0, 1]),\n    new Connector(new Vector3([0, -cuberadius.y, 0]).plus(center), [0, -1, 0], [0, 0, 1]),\n    new Connector(new Vector3([0, 0, cuberadius.z]).plus(center), [0, 0, 1], [1, 0, 0]),\n    new Connector(new Vector3([0, 0, -cuberadius.z]).plus(center), [0, 0, -1], [1, 0, 0])\n  ]\n  return res\n}\n\n/** Create a polyhedron using Openscad style arguments.\n * Define face vertices clockwise looking from outside.\n * @param {Object} [options] - options for construction\n * @returns {CSG} new 3D solid\n */\nconst polyhedron = function (options) {\n  options = options || {}\n  if (('points' in options) !== ('faces' in options)) {\n    throw new Error(\"polyhedron needs 'points' and 'faces' arrays\")\n  }\n  let vertices = parseOptionAs3DVectorList(options, 'points', [\n            [1, 1, 0],\n            [1, -1, 0],\n            [-1, -1, 0],\n            [-1, 1, 0],\n            [0, 0, 1]\n  ])\n        .map(function (pt) {\n          return new Vertex3(pt)\n        })\n  let faces = parseOption(options, 'faces', [\n            [0, 1, 4],\n            [1, 2, 4],\n            [2, 3, 4],\n            [3, 0, 4],\n            [1, 0, 3],\n            [2, 1, 3]\n  ])\n    // Openscad convention defines inward normals - so we have to invert here\n  faces.forEach(function (face) {\n    face.reverse()\n  })\n  let polygons = faces.map(function (face) {\n    return new Polygon3(face.map(function (idx) {\n      return vertices[idx]\n    }))\n  })\n\n    // TODO: facecenters as connectors? probably overkill. Maybe centroid\n    // the re-tesselation here happens because it's so easy for a user to\n    // create parametrized polyhedrons that end up with 1-2 dimensional polygons.\n    // These will create infinite loops at CSG.Tree()\n  return fromPolygons(polygons).reTesselated()\n}\n\nmodule.exports = {\n  cube,\n  sphere,\n  roundedCube,\n  cylinder,\n  roundedCylinder,\n  cylinderElliptic,\n  polyhedron\n}\n"},"lineCount":549}},"error":null,"hash":"a0ad5626927591845950c7b3878d49d2","cacheData":{"env":{}}}