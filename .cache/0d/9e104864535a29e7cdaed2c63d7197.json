{"id":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","dependencies":[{"name":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\package.json","includedInParent":true,"mtime":1695809278048},{"name":"./create","loc":{"line":1,"column":23,"index":23},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\maths\\vec3\\unit.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\maths\\vec3\\create.js"},{"name":"./length","loc":{"line":2,"column":23,"index":58},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\maths\\vec3\\unit.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\maths\\vec3\\length.js"}],"generated":{"js":"const create = require('./create')\nconst length = require('./length')\n\n/**\n * Calculates the unit vector of the given vector.\n *\n * @param {vec3} [out] - the receiving vector\n * @param {vec3} vector - the vector for calculations\n * @returns {vec3} a new vector\n * @alias module:modeling/maths/vec3.unit\n */\nconst unit = (...params) => {\n  let out\n  let vector\n  if (params.length === 1) {\n    out = create()\n    vector = params[0]\n  } else {\n    out = params[0]\n    vector = params[1]\n  }\n  const magnitude = length(vector) // calculate the magnitude\n  out[0] = vector[0] / magnitude\n  out[1] = vector[1] / magnitude\n  out[2] = vector[2] / magnitude\n  return out\n}\n\nmodule.exports = unit\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/vec3/unit.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}}],"sources":{"node_modules/@jscad/modeling/src/maths/vec3/unit.js":"const create = require('./create')\nconst length = require('./length')\n\n/**\n * Calculates the unit vector of the given vector.\n *\n * @param {vec3} [out] - the receiving vector\n * @param {vec3} vector - the vector for calculations\n * @returns {vec3} a new vector\n * @alias module:modeling/maths/vec3.unit\n */\nconst unit = (...params) => {\n  let out\n  let vector\n  if (params.length === 1) {\n    out = create()\n    vector = params[0]\n  } else {\n    out = params[0]\n    vector = params[1]\n  }\n  const magnitude = length(vector) // calculate the magnitude\n  out[0] = vector[0] / magnitude\n  out[1] = vector[1] / magnitude\n  out[2] = vector[2] / magnitude\n  return out\n}\n\nmodule.exports = unit\n"},"lineCount":30}},"error":null,"hash":"9e127c2a095efce7ba9184c0df9ef058","cacheData":{"env":{}}}