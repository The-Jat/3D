{"id":"node_modules/@jscad/csg/src/core/utils/retesellate.js","dependencies":[{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\package.json","includedInParent":true,"mtime":1695872748353},{"name":"../FuzzyFactory3d","loc":{"line":1,"column":32,"index":32},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\utils\\retesellate.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\FuzzyFactory3d.js"},{"name":"../math/reTesselateCoplanarPolygons","loc":{"line":2,"column":44,"index":97},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\utils\\retesellate.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\reTesselateCoplanarPolygons.js"},{"name":"../CSGFactories","loc":{"line":3,"column":31,"index":167},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\utils\\retesellate.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CSGFactories.js"}],"generated":{"js":"const FuzzyCSGFactory = require('../FuzzyFactory3d')\nconst reTesselateCoplanarPolygons = require('../math/reTesselateCoplanarPolygons')\nconst {fromPolygons} = require('../CSGFactories')\n\nconst reTesselate = function (csg) {\n  if (csg.isRetesselated) {\n    return csg\n  } else {\n    let polygonsPerPlane = {}\n    let isCanonicalized = csg.isCanonicalized\n    let fuzzyfactory = new FuzzyCSGFactory()\n    csg.polygons.map(function (polygon) {\n      let plane = polygon.plane\n      let shared = polygon.shared\n      if (!isCanonicalized) {\n        // in order to identify polygons having the same plane, we need to canonicalize the planes\n        // We don't have to do a full canonizalization (including vertices), to save time only do the planes and the shared data:\n        plane = fuzzyfactory.getPlane(plane)\n        shared = fuzzyfactory.getPolygonShared(shared)\n      }\n      let tag = plane.getTag() + '/' + shared.getTag()\n      if (!(tag in polygonsPerPlane)) {\n        polygonsPerPlane[tag] = [polygon]\n      } else {\n        polygonsPerPlane[tag].push(polygon)\n      }\n    })\n    let destpolygons = []\n    for (let planetag in polygonsPerPlane) {\n      let sourcepolygons = polygonsPerPlane[planetag]\n      if (sourcepolygons.length < 2) {\n        destpolygons = destpolygons.concat(sourcepolygons)\n      } else {\n        let retesselayedpolygons = []\n        reTesselateCoplanarPolygons(sourcepolygons, retesselayedpolygons)\n        destpolygons = destpolygons.concat(retesselayedpolygons)\n      }\n    }\n    let result = fromPolygons(destpolygons)\n    result.isRetesselated = true\n    // result = result.canonicalized();\n    result.properties = csg.properties // keep original properties\n    return result\n  }\n}\n\nmodule.exports = reTesselate\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@jscad/csg/src/core/utils/retesellate.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}}],"sources":{"node_modules/@jscad/csg/src/core/utils/retesellate.js":"const FuzzyCSGFactory = require('../FuzzyFactory3d')\nconst reTesselateCoplanarPolygons = require('../math/reTesselateCoplanarPolygons')\nconst {fromPolygons} = require('../CSGFactories')\n\nconst reTesselate = function (csg) {\n  if (csg.isRetesselated) {\n    return csg\n  } else {\n    let polygonsPerPlane = {}\n    let isCanonicalized = csg.isCanonicalized\n    let fuzzyfactory = new FuzzyCSGFactory()\n    csg.polygons.map(function (polygon) {\n      let plane = polygon.plane\n      let shared = polygon.shared\n      if (!isCanonicalized) {\n        // in order to identify polygons having the same plane, we need to canonicalize the planes\n        // We don't have to do a full canonizalization (including vertices), to save time only do the planes and the shared data:\n        plane = fuzzyfactory.getPlane(plane)\n        shared = fuzzyfactory.getPolygonShared(shared)\n      }\n      let tag = plane.getTag() + '/' + shared.getTag()\n      if (!(tag in polygonsPerPlane)) {\n        polygonsPerPlane[tag] = [polygon]\n      } else {\n        polygonsPerPlane[tag].push(polygon)\n      }\n    })\n    let destpolygons = []\n    for (let planetag in polygonsPerPlane) {\n      let sourcepolygons = polygonsPerPlane[planetag]\n      if (sourcepolygons.length < 2) {\n        destpolygons = destpolygons.concat(sourcepolygons)\n      } else {\n        let retesselayedpolygons = []\n        reTesselateCoplanarPolygons(sourcepolygons, retesselayedpolygons)\n        destpolygons = destpolygons.concat(retesselayedpolygons)\n      }\n    }\n    let result = fromPolygons(destpolygons)\n    result.isRetesselated = true\n    // result = result.canonicalized();\n    result.properties = csg.properties // keep original properties\n    return result\n  }\n}\n\nmodule.exports = reTesselate\n"},"lineCount":48}},"error":null,"hash":"accef3b2fa843d4a35d96501b4ed0995","cacheData":{"env":{}}}