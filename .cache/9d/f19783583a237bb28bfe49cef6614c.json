{"id":"node_modules/@jscad/csg/src/core/connectors.js","dependencies":[{"name":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\package.json","includedInParent":true,"mtime":1695872748353},{"name":"./math/Vector3","loc":{"line":1,"column":25,"index":25},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\connectors.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Vector3.js"},{"name":"./math/Line3","loc":{"line":2,"column":23,"index":66},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\connectors.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Line3.js"},{"name":"./math/Matrix4","loc":{"line":3,"column":26,"index":108},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\connectors.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Matrix4.js"},{"name":"./math/OrthoNormalBasis","loc":{"line":4,"column":33,"index":159},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\connectors.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\OrthoNormalBasis.js"},{"name":"./math/Plane","loc":{"line":5,"column":22,"index":208},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\connectors.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Plane.js"},{"name":"./CSG","loc":{"line":165,"column":24,"index":6977},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\connectors.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\CSG.js"}],"generated":{"js":"const Vector3D = require('./math/Vector3')\nconst Line3D = require('./math/Line3')\nconst Matrix4x4 = require('./math/Matrix4')\nconst OrthoNormalBasis = require('./math/OrthoNormalBasis')\nconst Plane = require('./math/Plane')\n\n// # class Connector\n// A connector allows to attach two objects at predefined positions\n// For example a servo motor and a servo horn:\n// Both can have a Connector called 'shaft'\n// The horn can be moved and rotated such that the two connectors match\n// and the horn is attached to the servo motor at the proper position.\n// Connectors are stored in the properties of a CSG solid so they are\n// ge the same transformations applied as the solid\nconst Connector = function (point, axisvector, normalvector) {\n  this.point = new Vector3D(point)\n  this.axisvector = new Vector3D(axisvector).unit()\n  this.normalvector = new Vector3D(normalvector).unit()\n}\n\nConnector.prototype = {\n  normalized: function () {\n    let axisvector = this.axisvector.unit()\n        // make the normal vector truly normal:\n    let n = this.normalvector.cross(axisvector).unit()\n    let normalvector = axisvector.cross(n)\n    return new Connector(this.point, axisvector, normalvector)\n  },\n\n  transform: function (matrix4x4) {\n    let point = this.point.multiply4x4(matrix4x4)\n    let axisvector = this.point.plus(this.axisvector).multiply4x4(matrix4x4).minus(point)\n    let normalvector = this.point.plus(this.normalvector).multiply4x4(matrix4x4).minus(point)\n    return new Connector(point, axisvector, normalvector)\n  },\n\n    // Get the transformation matrix to connect this Connector to another connector\n    //   other: a Connector to which this connector should be connected\n    //   mirror: false: the 'axis' vectors of the connectors should point in the same direction\n    //           true: the 'axis' vectors of the connectors should point in opposite direction\n    //   normalrotation: degrees of rotation between the 'normal' vectors of the two\n    //                   connectors\n  getTransformationTo: function (other, mirror, normalrotation) {\n    mirror = mirror ? true : false\n    normalrotation = normalrotation ? Number(normalrotation) : 0\n    let us = this.normalized()\n    other = other.normalized()\n        // shift to the origin:\n    let transformation = Matrix4x4.translation(this.point.negated())\n        // construct the plane crossing through the origin and the two axes:\n    let axesplane = Plane.anyPlaneFromVector3Ds(\n            new Vector3D(0, 0, 0), us.axisvector, other.axisvector)\n    let axesbasis = new OrthoNormalBasis(axesplane)\n    let angle1 = axesbasis.to2D(us.axisvector).angle()\n    let angle2 = axesbasis.to2D(other.axisvector).angle()\n    let rotation = 180.0 * (angle2 - angle1) / Math.PI\n    if (mirror) rotation += 180.0\n    transformation = transformation.multiply(axesbasis.getProjectionMatrix())\n    transformation = transformation.multiply(Matrix4x4.rotationZ(rotation))\n    transformation = transformation.multiply(axesbasis.getInverseProjectionMatrix())\n    let usAxesAligned = us.transform(transformation)\n        // Now we have done the transformation for aligning the axes.\n        // We still need to align the normals:\n    let normalsplane = Plane.fromNormalAndPoint(other.axisvector, new Vector3D(0, 0, 0))\n    let normalsbasis = new OrthoNormalBasis(normalsplane)\n    angle1 = normalsbasis.to2D(usAxesAligned.normalvector).angle()\n    angle2 = normalsbasis.to2D(other.normalvector).angle()\n    rotation = 180.0 * (angle2 - angle1) / Math.PI\n    rotation += normalrotation\n    transformation = transformation.multiply(normalsbasis.getProjectionMatrix())\n    transformation = transformation.multiply(Matrix4x4.rotationZ(rotation))\n    transformation = transformation.multiply(normalsbasis.getInverseProjectionMatrix())\n        // and translate to the destination point:\n    transformation = transformation.multiply(Matrix4x4.translation(other.point))\n        // let usAligned = us.transform(transformation);\n    return transformation\n  },\n\n  axisLine: function () {\n    return new Line3D(this.point, this.axisvector)\n  },\n\n    // creates a new Connector, with the connection point moved in the direction of the axisvector\n  extend: function (distance) {\n    let newpoint = this.point.plus(this.axisvector.unit().times(distance))\n    return new Connector(newpoint, this.axisvector, this.normalvector)\n  }\n}\n\nconst ConnectorList = function (connectors) {\n  this.connectors_ = connectors ? connectors.slice() : []\n}\n\nConnectorList.defaultNormal = [0, 0, 1]\n\nConnectorList.fromPath2D = function (path2D, arg1, arg2) {\n  if (arguments.length === 3) {\n    return ConnectorList._fromPath2DTangents(path2D, arg1, arg2)\n  } else if (arguments.length === 2) {\n    return ConnectorList._fromPath2DExplicit(path2D, arg1)\n  } else {\n    throw new Error('call with path2D and either 2 direction vectors, or a function returning direction vectors')\n  }\n}\n\n/*\n * calculate the connector axisvectors by calculating the \"tangent\" for path2D.\n * This is undefined for start and end points, so axis for these have to be manually\n * provided.\n */\nConnectorList._fromPath2DTangents = function (path2D, start, end) {\n    // path2D\n  let axis\n  let pathLen = path2D.points.length\n  let result = new ConnectorList([new Connector(path2D.points[0],\n        start, ConnectorList.defaultNormal)])\n    // middle points\n  path2D.points.slice(1, pathLen - 1).forEach(function (p2, i) {\n    axis = path2D.points[i + 2].minus(path2D.points[i]).toVector3D(0)\n    result.appendConnector(new Connector(p2.toVector3D(0), axis,\n          ConnectorList.defaultNormal))\n  }, this)\n  result.appendConnector(new Connector(path2D.points[pathLen - 1], end,\n      ConnectorList.defaultNormal))\n  result.closed = path2D.closed\n  return result\n}\n\n/*\n * angleIsh: either a static angle, or a function(point) returning an angle\n */\nConnectorList._fromPath2DExplicit = function (path2D, angleIsh) {\n  function getAngle (angleIsh, pt, i) {\n    if (typeof angleIsh === 'function') {\n      angleIsh = angleIsh(pt, i)\n    }\n    return angleIsh\n  }\n  let result = new ConnectorList(\n        path2D.points.map(function (p2, i) {\n          return new Connector(p2.toVector3D(0),\n                Vector3D.Create(1, 0, 0).rotateZ(getAngle(angleIsh, p2, i)),\n                  ConnectorList.defaultNormal)\n        }, this)\n    )\n  result.closed = path2D.closed\n  return result\n}\n\nConnectorList.prototype = {\n  setClosed: function (closed) {\n    this.closed = !!closed\n  },\n  appendConnector: function (conn) {\n    this.connectors_.push(conn)\n  },\n    /*\n     * arguments: cagish: a cag or a function(connector) returning a cag\n     *            closed: whether the 3d path defined by connectors location\n     *              should be closed or stay open\n     *              Note: don't duplicate connectors in the path\n     * TODO: consider an option \"maySelfIntersect\" to close & force union all single segments\n     */\n  followWith: function (cagish) {\n    const CSG = require('./CSG') // FIXME , circular dependency connectors => CSG => connectors\n\n    this.verify()\n    function getCag (cagish, connector) {\n      if (typeof cagish === 'function') {\n        cagish = cagish(connector.point, connector.axisvector, connector.normalvector)\n      }\n      return cagish\n    }\n\n    let polygons = []\n    let currCag\n    let prevConnector = this.connectors_[this.connectors_.length - 1]\n    let prevCag = getCag(cagish, prevConnector)\n        // add walls\n    this.connectors_.forEach(function (connector, notFirst) {\n      currCag = getCag(cagish, connector)\n      if (notFirst || this.closed) {\n        polygons.push.apply(polygons, prevCag._toWallPolygons({\n          toConnector1: prevConnector, toConnector2: connector, cag: currCag}))\n      } else {\n                // it is the first, and shape not closed -> build start wall\n        polygons.push.apply(polygons,\n                    currCag._toPlanePolygons({toConnector: connector, flipped: true}))\n      }\n      if (notFirst === this.connectors_.length - 1 && !this.closed) {\n                // build end wall\n        polygons.push.apply(polygons,\n                    currCag._toPlanePolygons({toConnector: connector}))\n      }\n      prevCag = currCag\n      prevConnector = connector\n    }, this)\n    return CSG.fromPolygons(polygons).reTesselated().canonicalized()\n  },\n    /*\n     * general idea behind these checks: connectors need to have smooth transition from one to another\n     * TODO: add a check that 2 follow-on CAGs are not intersecting\n     */\n  verify: function () {\n    let connI\n    let connI1\n    for (let i = 0; i < this.connectors_.length - 1; i++) {\n      connI = this.connectors_[i]\n      connI1 = this.connectors_[i + 1]\n      if (connI1.point.minus(connI.point).dot(connI.axisvector) <= 0) {\n        throw new Error('Invalid ConnectorList. Each connectors position needs to be within a <90deg range of previous connectors axisvector')\n      }\n      if (connI.axisvector.dot(connI1.axisvector) <= 0) {\n        throw new Error('invalid ConnectorList. No neighboring connectors axisvectors may span a >=90deg angle')\n      }\n    }\n  }\n}\n\nmodule.exports = {Connector, ConnectorList}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@jscad/csg/src/core/connectors.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}}],"sources":{"node_modules/@jscad/csg/src/core/connectors.js":"const Vector3D = require('./math/Vector3')\nconst Line3D = require('./math/Line3')\nconst Matrix4x4 = require('./math/Matrix4')\nconst OrthoNormalBasis = require('./math/OrthoNormalBasis')\nconst Plane = require('./math/Plane')\n\n// # class Connector\n// A connector allows to attach two objects at predefined positions\n// For example a servo motor and a servo horn:\n// Both can have a Connector called 'shaft'\n// The horn can be moved and rotated such that the two connectors match\n// and the horn is attached to the servo motor at the proper position.\n// Connectors are stored in the properties of a CSG solid so they are\n// ge the same transformations applied as the solid\nconst Connector = function (point, axisvector, normalvector) {\n  this.point = new Vector3D(point)\n  this.axisvector = new Vector3D(axisvector).unit()\n  this.normalvector = new Vector3D(normalvector).unit()\n}\n\nConnector.prototype = {\n  normalized: function () {\n    let axisvector = this.axisvector.unit()\n        // make the normal vector truly normal:\n    let n = this.normalvector.cross(axisvector).unit()\n    let normalvector = axisvector.cross(n)\n    return new Connector(this.point, axisvector, normalvector)\n  },\n\n  transform: function (matrix4x4) {\n    let point = this.point.multiply4x4(matrix4x4)\n    let axisvector = this.point.plus(this.axisvector).multiply4x4(matrix4x4).minus(point)\n    let normalvector = this.point.plus(this.normalvector).multiply4x4(matrix4x4).minus(point)\n    return new Connector(point, axisvector, normalvector)\n  },\n\n    // Get the transformation matrix to connect this Connector to another connector\n    //   other: a Connector to which this connector should be connected\n    //   mirror: false: the 'axis' vectors of the connectors should point in the same direction\n    //           true: the 'axis' vectors of the connectors should point in opposite direction\n    //   normalrotation: degrees of rotation between the 'normal' vectors of the two\n    //                   connectors\n  getTransformationTo: function (other, mirror, normalrotation) {\n    mirror = mirror ? true : false\n    normalrotation = normalrotation ? Number(normalrotation) : 0\n    let us = this.normalized()\n    other = other.normalized()\n        // shift to the origin:\n    let transformation = Matrix4x4.translation(this.point.negated())\n        // construct the plane crossing through the origin and the two axes:\n    let axesplane = Plane.anyPlaneFromVector3Ds(\n            new Vector3D(0, 0, 0), us.axisvector, other.axisvector)\n    let axesbasis = new OrthoNormalBasis(axesplane)\n    let angle1 = axesbasis.to2D(us.axisvector).angle()\n    let angle2 = axesbasis.to2D(other.axisvector).angle()\n    let rotation = 180.0 * (angle2 - angle1) / Math.PI\n    if (mirror) rotation += 180.0\n    transformation = transformation.multiply(axesbasis.getProjectionMatrix())\n    transformation = transformation.multiply(Matrix4x4.rotationZ(rotation))\n    transformation = transformation.multiply(axesbasis.getInverseProjectionMatrix())\n    let usAxesAligned = us.transform(transformation)\n        // Now we have done the transformation for aligning the axes.\n        // We still need to align the normals:\n    let normalsplane = Plane.fromNormalAndPoint(other.axisvector, new Vector3D(0, 0, 0))\n    let normalsbasis = new OrthoNormalBasis(normalsplane)\n    angle1 = normalsbasis.to2D(usAxesAligned.normalvector).angle()\n    angle2 = normalsbasis.to2D(other.normalvector).angle()\n    rotation = 180.0 * (angle2 - angle1) / Math.PI\n    rotation += normalrotation\n    transformation = transformation.multiply(normalsbasis.getProjectionMatrix())\n    transformation = transformation.multiply(Matrix4x4.rotationZ(rotation))\n    transformation = transformation.multiply(normalsbasis.getInverseProjectionMatrix())\n        // and translate to the destination point:\n    transformation = transformation.multiply(Matrix4x4.translation(other.point))\n        // let usAligned = us.transform(transformation);\n    return transformation\n  },\n\n  axisLine: function () {\n    return new Line3D(this.point, this.axisvector)\n  },\n\n    // creates a new Connector, with the connection point moved in the direction of the axisvector\n  extend: function (distance) {\n    let newpoint = this.point.plus(this.axisvector.unit().times(distance))\n    return new Connector(newpoint, this.axisvector, this.normalvector)\n  }\n}\n\nconst ConnectorList = function (connectors) {\n  this.connectors_ = connectors ? connectors.slice() : []\n}\n\nConnectorList.defaultNormal = [0, 0, 1]\n\nConnectorList.fromPath2D = function (path2D, arg1, arg2) {\n  if (arguments.length === 3) {\n    return ConnectorList._fromPath2DTangents(path2D, arg1, arg2)\n  } else if (arguments.length === 2) {\n    return ConnectorList._fromPath2DExplicit(path2D, arg1)\n  } else {\n    throw new Error('call with path2D and either 2 direction vectors, or a function returning direction vectors')\n  }\n}\n\n/*\n * calculate the connector axisvectors by calculating the \"tangent\" for path2D.\n * This is undefined for start and end points, so axis for these have to be manually\n * provided.\n */\nConnectorList._fromPath2DTangents = function (path2D, start, end) {\n    // path2D\n  let axis\n  let pathLen = path2D.points.length\n  let result = new ConnectorList([new Connector(path2D.points[0],\n        start, ConnectorList.defaultNormal)])\n    // middle points\n  path2D.points.slice(1, pathLen - 1).forEach(function (p2, i) {\n    axis = path2D.points[i + 2].minus(path2D.points[i]).toVector3D(0)\n    result.appendConnector(new Connector(p2.toVector3D(0), axis,\n          ConnectorList.defaultNormal))\n  }, this)\n  result.appendConnector(new Connector(path2D.points[pathLen - 1], end,\n      ConnectorList.defaultNormal))\n  result.closed = path2D.closed\n  return result\n}\n\n/*\n * angleIsh: either a static angle, or a function(point) returning an angle\n */\nConnectorList._fromPath2DExplicit = function (path2D, angleIsh) {\n  function getAngle (angleIsh, pt, i) {\n    if (typeof angleIsh === 'function') {\n      angleIsh = angleIsh(pt, i)\n    }\n    return angleIsh\n  }\n  let result = new ConnectorList(\n        path2D.points.map(function (p2, i) {\n          return new Connector(p2.toVector3D(0),\n                Vector3D.Create(1, 0, 0).rotateZ(getAngle(angleIsh, p2, i)),\n                  ConnectorList.defaultNormal)\n        }, this)\n    )\n  result.closed = path2D.closed\n  return result\n}\n\nConnectorList.prototype = {\n  setClosed: function (closed) {\n    this.closed = !!closed\n  },\n  appendConnector: function (conn) {\n    this.connectors_.push(conn)\n  },\n    /*\n     * arguments: cagish: a cag or a function(connector) returning a cag\n     *            closed: whether the 3d path defined by connectors location\n     *              should be closed or stay open\n     *              Note: don't duplicate connectors in the path\n     * TODO: consider an option \"maySelfIntersect\" to close & force union all single segments\n     */\n  followWith: function (cagish) {\n    const CSG = require('./CSG') // FIXME , circular dependency connectors => CSG => connectors\n\n    this.verify()\n    function getCag (cagish, connector) {\n      if (typeof cagish === 'function') {\n        cagish = cagish(connector.point, connector.axisvector, connector.normalvector)\n      }\n      return cagish\n    }\n\n    let polygons = []\n    let currCag\n    let prevConnector = this.connectors_[this.connectors_.length - 1]\n    let prevCag = getCag(cagish, prevConnector)\n        // add walls\n    this.connectors_.forEach(function (connector, notFirst) {\n      currCag = getCag(cagish, connector)\n      if (notFirst || this.closed) {\n        polygons.push.apply(polygons, prevCag._toWallPolygons({\n          toConnector1: prevConnector, toConnector2: connector, cag: currCag}))\n      } else {\n                // it is the first, and shape not closed -> build start wall\n        polygons.push.apply(polygons,\n                    currCag._toPlanePolygons({toConnector: connector, flipped: true}))\n      }\n      if (notFirst === this.connectors_.length - 1 && !this.closed) {\n                // build end wall\n        polygons.push.apply(polygons,\n                    currCag._toPlanePolygons({toConnector: connector}))\n      }\n      prevCag = currCag\n      prevConnector = connector\n    }, this)\n    return CSG.fromPolygons(polygons).reTesselated().canonicalized()\n  },\n    /*\n     * general idea behind these checks: connectors need to have smooth transition from one to another\n     * TODO: add a check that 2 follow-on CAGs are not intersecting\n     */\n  verify: function () {\n    let connI\n    let connI1\n    for (let i = 0; i < this.connectors_.length - 1; i++) {\n      connI = this.connectors_[i]\n      connI1 = this.connectors_[i + 1]\n      if (connI1.point.minus(connI.point).dot(connI.axisvector) <= 0) {\n        throw new Error('Invalid ConnectorList. Each connectors position needs to be within a <90deg range of previous connectors axisvector')\n      }\n      if (connI.axisvector.dot(connI1.axisvector) <= 0) {\n        throw new Error('invalid ConnectorList. No neighboring connectors axisvectors may span a >=90deg angle')\n      }\n    }\n  }\n}\n\nmodule.exports = {Connector, ConnectorList}\n"},"lineCount":221}},"error":null,"hash":"85a57764c156629a57d745699c1713dd","cacheData":{"env":{}}}