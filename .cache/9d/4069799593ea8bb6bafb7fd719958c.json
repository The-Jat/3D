{"id":"node_modules/@jscad/csg/src/core/trees.js","dependencies":[{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\package.json","includedInParent":true,"mtime":1695872748353},{"name":"./constants","loc":{"line":1,"column":33,"index":33},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\trees.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\constants.js"},{"name":"./math/Vertex3","loc":{"line":2,"column":23,"index":71},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\trees.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Vertex3.js"},{"name":"./math/Polygon3","loc":{"line":3,"column":24,"index":113},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\trees.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Polygon3.js"}],"generated":{"js":"const {_CSGDEBUG, EPS} = require('./constants')\nconst Vertex = require('./math/Vertex3')\nconst Polygon = require('./math/Polygon3')\n\n// Returns object:\n// .type:\n//   0: coplanar-front\n//   1: coplanar-back\n//   2: front\n//   3: back\n//   4: spanning\n// In case the polygon is spanning, returns:\n// .front: a Polygon of the front part\n// .back: a Polygon of the back part\nfunction splitPolygonByPlane (plane, polygon) {\n  let result = {\n    type: null,\n    front: null,\n    back: null\n  }\n      // cache in local lets (speedup):\n  let planenormal = plane.normal\n  let vertices = polygon.vertices\n  let numvertices = vertices.length\n  if (polygon.plane.equals(plane)) {\n    result.type = 0\n  } else {\n    let thisw = plane.w\n    let hasfront = false\n    let hasback = false\n    let vertexIsBack = []\n    let MINEPS = -EPS\n    for (let i = 0; i < numvertices; i++) {\n      let t = planenormal.dot(vertices[i].pos) - thisw\n      let isback = (t < 0)\n      vertexIsBack.push(isback)\n      if (t > EPS) hasfront = true\n      if (t < MINEPS) hasback = true\n    }\n    if ((!hasfront) && (!hasback)) {\n              // all points coplanar\n      let t = planenormal.dot(polygon.plane.normal)\n      result.type = (t >= 0) ? 0 : 1\n    } else if (!hasback) {\n      result.type = 2\n    } else if (!hasfront) {\n      result.type = 3\n    } else {\n              // spanning\n      result.type = 4\n      let frontvertices = []\n      let backvertices = []\n      let isback = vertexIsBack[0]\n      for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {\n        let vertex = vertices[vertexindex]\n        let nextvertexindex = vertexindex + 1\n        if (nextvertexindex >= numvertices) nextvertexindex = 0\n        let nextisback = vertexIsBack[nextvertexindex]\n        if (isback === nextisback) {\n                      // line segment is on one side of the plane:\n          if (isback) {\n            backvertices.push(vertex)\n          } else {\n            frontvertices.push(vertex)\n          }\n        } else {\n                      // line segment intersects plane:\n          let point = vertex.pos\n          let nextpoint = vertices[nextvertexindex].pos\n          let intersectionpoint = plane.splitLineBetweenPoints(point, nextpoint)\n          let intersectionvertex = new Vertex(intersectionpoint)\n          if (isback) {\n            backvertices.push(vertex)\n            backvertices.push(intersectionvertex)\n            frontvertices.push(intersectionvertex)\n          } else {\n            frontvertices.push(vertex)\n            frontvertices.push(intersectionvertex)\n            backvertices.push(intersectionvertex)\n          }\n        }\n        isback = nextisback\n      } // for vertexindex\n              // remove duplicate vertices:\n      let EPS_SQUARED = EPS * EPS\n      if (backvertices.length >= 3) {\n        let prevvertex = backvertices[backvertices.length - 1]\n        for (let vertexindex = 0; vertexindex < backvertices.length; vertexindex++) {\n          let vertex = backvertices[vertexindex]\n          if (vertex.pos.distanceToSquared(prevvertex.pos) < EPS_SQUARED) {\n            backvertices.splice(vertexindex, 1)\n            vertexindex--\n          }\n          prevvertex = vertex\n        }\n      }\n      if (frontvertices.length >= 3) {\n        let prevvertex = frontvertices[frontvertices.length - 1]\n        for (let vertexindex = 0; vertexindex < frontvertices.length; vertexindex++) {\n          let vertex = frontvertices[vertexindex]\n          if (vertex.pos.distanceToSquared(prevvertex.pos) < EPS_SQUARED) {\n            frontvertices.splice(vertexindex, 1)\n            vertexindex--\n          }\n          prevvertex = vertex\n        }\n      }\n      if (frontvertices.length >= 3) {\n        result.front = new Polygon(frontvertices, polygon.shared, polygon.plane)\n      }\n      if (backvertices.length >= 3) {\n        result.back = new Polygon(backvertices, polygon.shared, polygon.plane)\n      }\n    }\n  }\n  return result\n}\n\n// # class PolygonTreeNode\n// This class manages hierarchical splits of polygons\n// At the top is a root node which doesn hold a polygon, only child PolygonTreeNodes\n// Below that are zero or more 'top' nodes; each holds a polygon. The polygons can be in different planes\n// splitByPlane() splits a node by a plane. If the plane intersects the polygon, two new child nodes\n// are created holding the splitted polygon.\n// getPolygons() retrieves the polygon from the tree. If for PolygonTreeNode the polygon is split but\n// the two split parts (child nodes) are still intact, then the unsplit polygon is returned.\n// This ensures that we can safely split a polygon into many fragments. If the fragments are untouched,\n//  getPolygons() will return the original unsplit polygon instead of the fragments.\n// remove() removes a polygon from the tree. Once a polygon is removed, the parent polygons are invalidated\n// since they are no longer intact.\n// constructor creates the root node:\nconst PolygonTreeNode = function () {\n  this.parent = null\n  this.children = []\n  this.polygon = null\n  this.removed = false\n}\n\nPolygonTreeNode.prototype = {\n    // fill the tree with polygons. Should be called on the root node only; child nodes must\n    // always be a derivate (split) of the parent node.\n  addPolygons: function (polygons) {\n    // new polygons can only be added to root node; children can only be splitted polygons\n    if (!this.isRootNode()) {\n      throw new Error('Assertion failed')\n    }\n    let _this = this\n    polygons.map(function (polygon) {\n      _this.addChild(polygon)\n    })\n  },\n\n    // remove a node\n    // - the siblings become toplevel nodes\n    // - the parent is removed recursively\n  remove: function () {\n    if (!this.removed) {\n      this.removed = true\n\n      if (_CSGDEBUG) {\n        if (this.isRootNode()) throw new Error('Assertion failed') // can't remove root node\n        if (this.children.length) throw new Error('Assertion failed') // we shouldn't remove nodes with children\n      }\n\n            // remove ourselves from the parent's children list:\n      let parentschildren = this.parent.children\n      let i = parentschildren.indexOf(this)\n      if (i < 0) throw new Error('Assertion failed')\n      parentschildren.splice(i, 1)\n\n            // invalidate the parent's polygon, and of all parents above it:\n      this.parent.recursivelyInvalidatePolygon()\n    }\n  },\n\n  isRemoved: function () {\n    return this.removed\n  },\n\n  isRootNode: function () {\n    return !this.parent\n  },\n\n    // invert all polygons in the tree. Call on the root node\n  invert: function () {\n    if (!this.isRootNode()) throw new Error('Assertion failed') // can only call this on the root node\n    this.invertSub()\n  },\n\n  getPolygon: function () {\n    if (!this.polygon) throw new Error('Assertion failed') // doesn't have a polygon, which means that it has been broken down\n    return this.polygon\n  },\n\n  getPolygons: function (result) {\n    let children = [this]\n    let queue = [children]\n    let i, j, l, node\n    for (i = 0; i < queue.length; ++i) { // queue size can change in loop, don't cache length\n      children = queue[i]\n      for (j = 0, l = children.length; j < l; j++) { // ok to cache length\n        node = children[j]\n        if (node.polygon) {\n                    // the polygon hasn't been broken yet. We can ignore the children and return our polygon:\n          result.push(node.polygon)\n        } else {\n                    // our polygon has been split up and broken, so gather all subpolygons from the children\n          queue.push(node.children)\n        }\n      }\n    }\n  },\n\n    // split the node by a plane; add the resulting nodes to the frontnodes and backnodes array\n    // If the plane doesn't intersect the polygon, the 'this' object is added to one of the arrays\n    // If the plane does intersect the polygon, two new child nodes are created for the front and back fragments,\n    //  and added to both arrays.\n  splitByPlane: function (plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes) {\n    if (this.children.length) {\n      let queue = [this.children]\n      let i\n      let j\n      let l\n      let node\n      let nodes\n      for (i = 0; i < queue.length; i++) { // queue.length can increase, do not cache\n        nodes = queue[i]\n        for (j = 0, l = nodes.length; j < l; j++) { // ok to cache length\n          node = nodes[j]\n          if (node.children.length) {\n            queue.push(node.children)\n          } else {\n                        // no children. Split the polygon:\n            node._splitByPlane(plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes)\n          }\n        }\n      }\n    } else {\n      this._splitByPlane(plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes)\n    }\n  },\n\n    // only to be called for nodes with no children\n  _splitByPlane: function (plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes) {\n    let polygon = this.polygon\n    if (polygon) {\n      let bound = polygon.boundingSphere()\n      let sphereradius = bound[1] + EPS // FIXME Why add imprecision?\n      let planenormal = plane.normal\n      let spherecenter = bound[0]\n      let d = planenormal.dot(spherecenter) - plane.w\n      if (d > sphereradius) {\n        frontnodes.push(this)\n      } else if (d < -sphereradius) {\n        backnodes.push(this)\n      } else {\n        let splitresult = splitPolygonByPlane(plane, polygon)\n        switch (splitresult.type) {\n          case 0:\n                        // coplanar front:\n            coplanarfrontnodes.push(this)\n            break\n\n          case 1:\n                        // coplanar back:\n            coplanarbacknodes.push(this)\n            break\n\n          case 2:\n                        // front:\n            frontnodes.push(this)\n            break\n\n          case 3:\n                        // back:\n            backnodes.push(this)\n            break\n\n          case 4:\n                        // spanning:\n            if (splitresult.front) {\n              let frontnode = this.addChild(splitresult.front)\n              frontnodes.push(frontnode)\n            }\n            if (splitresult.back) {\n              let backnode = this.addChild(splitresult.back)\n              backnodes.push(backnode)\n            }\n            break\n        }\n      }\n    }\n  },\n\n    // PRIVATE methods from here:\n    // add child to a node\n    // this should be called whenever the polygon is split\n    // a child should be created for every fragment of the split polygon\n    // returns the newly created child\n  addChild: function (polygon) {\n    let newchild = new PolygonTreeNode()\n    newchild.parent = this\n    newchild.polygon = polygon\n    this.children.push(newchild)\n    return newchild\n  },\n\n  invertSub: function () {\n    let children = [this]\n    let queue = [children]\n    let i, j, l, node\n    for (i = 0; i < queue.length; i++) {\n      children = queue[i]\n      for (j = 0, l = children.length; j < l; j++) {\n        node = children[j]\n        if (node.polygon) {\n          node.polygon = node.polygon.flipped()\n        }\n        queue.push(node.children)\n      }\n    }\n  },\n\n  recursivelyInvalidatePolygon: function () {\n    let node = this\n    while (node.polygon) {\n      node.polygon = null\n      if (node.parent) {\n        node = node.parent\n      }\n    }\n  }\n}\n\n// # class Tree\n// This is the root of a BSP tree\n// We are using this separate class for the root of the tree, to hold the PolygonTreeNode root\n// The actual tree is kept in this.rootnode\nconst Tree = function (polygons) {\n  this.polygonTree = new PolygonTreeNode()\n  this.rootnode = new Node(null)\n  if (polygons) this.addPolygons(polygons)\n}\n\nTree.prototype = {\n  invert: function () {\n    this.polygonTree.invert()\n    this.rootnode.invert()\n  },\n\n    // Remove all polygons in this BSP tree that are inside the other BSP tree\n    // `tree`.\n  clipTo: function (tree, alsoRemovecoplanarFront) {\n    alsoRemovecoplanarFront = !!alsoRemovecoplanarFront\n    this.rootnode.clipTo(tree, alsoRemovecoplanarFront)\n  },\n\n  allPolygons: function () {\n    let result = []\n    this.polygonTree.getPolygons(result)\n    return result\n  },\n\n  addPolygons: function (polygons) {\n    let _this = this\n    let polygontreenodes = polygons.map(function (p) {\n      return _this.polygonTree.addChild(p)\n    })\n    this.rootnode.addPolygonTreeNodes(polygontreenodes)\n  }\n}\n\n// # class Node\n// Holds a node in a BSP tree. A BSP tree is built from a collection of polygons\n// by picking a polygon to split along.\n// Polygons are not stored directly in the tree, but in PolygonTreeNodes, stored in\n// this.polygontreenodes. Those PolygonTreeNodes are children of the owning\n// Tree.polygonTree\n// This is not a leafy BSP tree since there is\n// no distinction between internal and leaf nodes.\nconst Node = function (parent) {\n  this.plane = null\n  this.front = null\n  this.back = null\n  this.polygontreenodes = []\n  this.parent = parent\n}\n\nNode.prototype = {\n    // Convert solid space to empty space and empty space to solid space.\n  invert: function () {\n    let queue = [this]\n    let node\n    for (let i = 0; i < queue.length; i++) {\n      node = queue[i]\n      if (node.plane) node.plane = node.plane.flipped()\n      if (node.front) queue.push(node.front)\n      if (node.back) queue.push(node.back)\n      let temp = node.front\n      node.front = node.back\n      node.back = temp\n    }\n  },\n\n    // clip polygontreenodes to our plane\n    // calls remove() for all clipped PolygonTreeNodes\n  clipPolygons: function (polygontreenodes, alsoRemovecoplanarFront) {\n    let args = {'node': this, 'polygontreenodes': polygontreenodes}\n    let node\n    let stack = []\n\n    do {\n      node = args.node\n      polygontreenodes = args.polygontreenodes\n\n            // begin \"function\"\n      if (node.plane) {\n        let backnodes = []\n        let frontnodes = []\n        let coplanarfrontnodes = alsoRemovecoplanarFront ? backnodes : frontnodes\n        let plane = node.plane\n        let numpolygontreenodes = polygontreenodes.length\n        for (let i = 0; i < numpolygontreenodes; i++) {\n          let node1 = polygontreenodes[i]\n          if (!node1.isRemoved()) {\n            node1.splitByPlane(plane, coplanarfrontnodes, backnodes, frontnodes, backnodes)\n          }\n        }\n\n        if (node.front && (frontnodes.length > 0)) {\n          stack.push({'node': node.front, 'polygontreenodes': frontnodes})\n        }\n        let numbacknodes = backnodes.length\n        if (node.back && (numbacknodes > 0)) {\n          stack.push({'node': node.back, 'polygontreenodes': backnodes})\n        } else {\n                    // there's nothing behind this plane. Delete the nodes behind this plane:\n          for (let i = 0; i < numbacknodes; i++) {\n            backnodes[i].remove()\n          }\n        }\n      }\n      args = stack.pop()\n    } while (typeof (args) !== 'undefined')\n  },\n\n    // Remove all polygons in this BSP tree that are inside the other BSP tree\n    // `tree`.\n  clipTo: function (tree, alsoRemovecoplanarFront) {\n    let node = this\n    let stack = []\n    do {\n      if (node.polygontreenodes.length > 0) {\n        tree.rootnode.clipPolygons(node.polygontreenodes, alsoRemovecoplanarFront)\n      }\n      if (node.front) stack.push(node.front)\n      if (node.back) stack.push(node.back)\n      node = stack.pop()\n    } while (typeof (node) !== 'undefined')\n  },\n\n  addPolygonTreeNodes: function (polygontreenodes) {\n    let args = {'node': this, 'polygontreenodes': polygontreenodes}\n    let node\n    let stack = []\n    do {\n      node = args.node\n      polygontreenodes = args.polygontreenodes\n\n      if (polygontreenodes.length === 0) {\n        args = stack.pop()\n        continue\n      }\n      let _this = node\n      if (!node.plane) {\n        let bestplane = polygontreenodes[0].getPolygon().plane\n        node.plane = bestplane\n      }\n      let frontnodes = []\n      let backnodes = []\n\n      for (let i = 0, n = polygontreenodes.length; i < n; ++i) {\n        polygontreenodes[i].splitByPlane(_this.plane, _this.polygontreenodes, backnodes, frontnodes, backnodes)\n      }\n\n      if (frontnodes.length > 0) {\n        if (!node.front) node.front = new Node(node)\n        stack.push({'node': node.front, 'polygontreenodes': frontnodes})\n      }\n      if (backnodes.length > 0) {\n        if (!node.back) node.back = new Node(node)\n        stack.push({'node': node.back, 'polygontreenodes': backnodes})\n      }\n\n      args = stack.pop()\n    } while (typeof (args) !== 'undefined')\n  },\n\n  getParentPlaneNormals: function (normals, maxdepth) {\n    if (maxdepth > 0) {\n      if (this.parent) {\n        normals.push(this.parent.plane.normal)\n        this.parent.getParentPlaneNormals(normals, maxdepth - 1)\n      }\n    }\n  }\n}\n\nmodule.exports = Tree\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/@jscad/csg/src/core/trees.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}}],"sources":{"node_modules/@jscad/csg/src/core/trees.js":"const {_CSGDEBUG, EPS} = require('./constants')\nconst Vertex = require('./math/Vertex3')\nconst Polygon = require('./math/Polygon3')\n\n// Returns object:\n// .type:\n//   0: coplanar-front\n//   1: coplanar-back\n//   2: front\n//   3: back\n//   4: spanning\n// In case the polygon is spanning, returns:\n// .front: a Polygon of the front part\n// .back: a Polygon of the back part\nfunction splitPolygonByPlane (plane, polygon) {\n  let result = {\n    type: null,\n    front: null,\n    back: null\n  }\n      // cache in local lets (speedup):\n  let planenormal = plane.normal\n  let vertices = polygon.vertices\n  let numvertices = vertices.length\n  if (polygon.plane.equals(plane)) {\n    result.type = 0\n  } else {\n    let thisw = plane.w\n    let hasfront = false\n    let hasback = false\n    let vertexIsBack = []\n    let MINEPS = -EPS\n    for (let i = 0; i < numvertices; i++) {\n      let t = planenormal.dot(vertices[i].pos) - thisw\n      let isback = (t < 0)\n      vertexIsBack.push(isback)\n      if (t > EPS) hasfront = true\n      if (t < MINEPS) hasback = true\n    }\n    if ((!hasfront) && (!hasback)) {\n              // all points coplanar\n      let t = planenormal.dot(polygon.plane.normal)\n      result.type = (t >= 0) ? 0 : 1\n    } else if (!hasback) {\n      result.type = 2\n    } else if (!hasfront) {\n      result.type = 3\n    } else {\n              // spanning\n      result.type = 4\n      let frontvertices = []\n      let backvertices = []\n      let isback = vertexIsBack[0]\n      for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {\n        let vertex = vertices[vertexindex]\n        let nextvertexindex = vertexindex + 1\n        if (nextvertexindex >= numvertices) nextvertexindex = 0\n        let nextisback = vertexIsBack[nextvertexindex]\n        if (isback === nextisback) {\n                      // line segment is on one side of the plane:\n          if (isback) {\n            backvertices.push(vertex)\n          } else {\n            frontvertices.push(vertex)\n          }\n        } else {\n                      // line segment intersects plane:\n          let point = vertex.pos\n          let nextpoint = vertices[nextvertexindex].pos\n          let intersectionpoint = plane.splitLineBetweenPoints(point, nextpoint)\n          let intersectionvertex = new Vertex(intersectionpoint)\n          if (isback) {\n            backvertices.push(vertex)\n            backvertices.push(intersectionvertex)\n            frontvertices.push(intersectionvertex)\n          } else {\n            frontvertices.push(vertex)\n            frontvertices.push(intersectionvertex)\n            backvertices.push(intersectionvertex)\n          }\n        }\n        isback = nextisback\n      } // for vertexindex\n              // remove duplicate vertices:\n      let EPS_SQUARED = EPS * EPS\n      if (backvertices.length >= 3) {\n        let prevvertex = backvertices[backvertices.length - 1]\n        for (let vertexindex = 0; vertexindex < backvertices.length; vertexindex++) {\n          let vertex = backvertices[vertexindex]\n          if (vertex.pos.distanceToSquared(prevvertex.pos) < EPS_SQUARED) {\n            backvertices.splice(vertexindex, 1)\n            vertexindex--\n          }\n          prevvertex = vertex\n        }\n      }\n      if (frontvertices.length >= 3) {\n        let prevvertex = frontvertices[frontvertices.length - 1]\n        for (let vertexindex = 0; vertexindex < frontvertices.length; vertexindex++) {\n          let vertex = frontvertices[vertexindex]\n          if (vertex.pos.distanceToSquared(prevvertex.pos) < EPS_SQUARED) {\n            frontvertices.splice(vertexindex, 1)\n            vertexindex--\n          }\n          prevvertex = vertex\n        }\n      }\n      if (frontvertices.length >= 3) {\n        result.front = new Polygon(frontvertices, polygon.shared, polygon.plane)\n      }\n      if (backvertices.length >= 3) {\n        result.back = new Polygon(backvertices, polygon.shared, polygon.plane)\n      }\n    }\n  }\n  return result\n}\n\n// # class PolygonTreeNode\n// This class manages hierarchical splits of polygons\n// At the top is a root node which doesn hold a polygon, only child PolygonTreeNodes\n// Below that are zero or more 'top' nodes; each holds a polygon. The polygons can be in different planes\n// splitByPlane() splits a node by a plane. If the plane intersects the polygon, two new child nodes\n// are created holding the splitted polygon.\n// getPolygons() retrieves the polygon from the tree. If for PolygonTreeNode the polygon is split but\n// the two split parts (child nodes) are still intact, then the unsplit polygon is returned.\n// This ensures that we can safely split a polygon into many fragments. If the fragments are untouched,\n//  getPolygons() will return the original unsplit polygon instead of the fragments.\n// remove() removes a polygon from the tree. Once a polygon is removed, the parent polygons are invalidated\n// since they are no longer intact.\n// constructor creates the root node:\nconst PolygonTreeNode = function () {\n  this.parent = null\n  this.children = []\n  this.polygon = null\n  this.removed = false\n}\n\nPolygonTreeNode.prototype = {\n    // fill the tree with polygons. Should be called on the root node only; child nodes must\n    // always be a derivate (split) of the parent node.\n  addPolygons: function (polygons) {\n    // new polygons can only be added to root node; children can only be splitted polygons\n    if (!this.isRootNode()) {\n      throw new Error('Assertion failed')\n    }\n    let _this = this\n    polygons.map(function (polygon) {\n      _this.addChild(polygon)\n    })\n  },\n\n    // remove a node\n    // - the siblings become toplevel nodes\n    // - the parent is removed recursively\n  remove: function () {\n    if (!this.removed) {\n      this.removed = true\n\n      if (_CSGDEBUG) {\n        if (this.isRootNode()) throw new Error('Assertion failed') // can't remove root node\n        if (this.children.length) throw new Error('Assertion failed') // we shouldn't remove nodes with children\n      }\n\n            // remove ourselves from the parent's children list:\n      let parentschildren = this.parent.children\n      let i = parentschildren.indexOf(this)\n      if (i < 0) throw new Error('Assertion failed')\n      parentschildren.splice(i, 1)\n\n            // invalidate the parent's polygon, and of all parents above it:\n      this.parent.recursivelyInvalidatePolygon()\n    }\n  },\n\n  isRemoved: function () {\n    return this.removed\n  },\n\n  isRootNode: function () {\n    return !this.parent\n  },\n\n    // invert all polygons in the tree. Call on the root node\n  invert: function () {\n    if (!this.isRootNode()) throw new Error('Assertion failed') // can only call this on the root node\n    this.invertSub()\n  },\n\n  getPolygon: function () {\n    if (!this.polygon) throw new Error('Assertion failed') // doesn't have a polygon, which means that it has been broken down\n    return this.polygon\n  },\n\n  getPolygons: function (result) {\n    let children = [this]\n    let queue = [children]\n    let i, j, l, node\n    for (i = 0; i < queue.length; ++i) { // queue size can change in loop, don't cache length\n      children = queue[i]\n      for (j = 0, l = children.length; j < l; j++) { // ok to cache length\n        node = children[j]\n        if (node.polygon) {\n                    // the polygon hasn't been broken yet. We can ignore the children and return our polygon:\n          result.push(node.polygon)\n        } else {\n                    // our polygon has been split up and broken, so gather all subpolygons from the children\n          queue.push(node.children)\n        }\n      }\n    }\n  },\n\n    // split the node by a plane; add the resulting nodes to the frontnodes and backnodes array\n    // If the plane doesn't intersect the polygon, the 'this' object is added to one of the arrays\n    // If the plane does intersect the polygon, two new child nodes are created for the front and back fragments,\n    //  and added to both arrays.\n  splitByPlane: function (plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes) {\n    if (this.children.length) {\n      let queue = [this.children]\n      let i\n      let j\n      let l\n      let node\n      let nodes\n      for (i = 0; i < queue.length; i++) { // queue.length can increase, do not cache\n        nodes = queue[i]\n        for (j = 0, l = nodes.length; j < l; j++) { // ok to cache length\n          node = nodes[j]\n          if (node.children.length) {\n            queue.push(node.children)\n          } else {\n                        // no children. Split the polygon:\n            node._splitByPlane(plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes)\n          }\n        }\n      }\n    } else {\n      this._splitByPlane(plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes)\n    }\n  },\n\n    // only to be called for nodes with no children\n  _splitByPlane: function (plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes) {\n    let polygon = this.polygon\n    if (polygon) {\n      let bound = polygon.boundingSphere()\n      let sphereradius = bound[1] + EPS // FIXME Why add imprecision?\n      let planenormal = plane.normal\n      let spherecenter = bound[0]\n      let d = planenormal.dot(spherecenter) - plane.w\n      if (d > sphereradius) {\n        frontnodes.push(this)\n      } else if (d < -sphereradius) {\n        backnodes.push(this)\n      } else {\n        let splitresult = splitPolygonByPlane(plane, polygon)\n        switch (splitresult.type) {\n          case 0:\n                        // coplanar front:\n            coplanarfrontnodes.push(this)\n            break\n\n          case 1:\n                        // coplanar back:\n            coplanarbacknodes.push(this)\n            break\n\n          case 2:\n                        // front:\n            frontnodes.push(this)\n            break\n\n          case 3:\n                        // back:\n            backnodes.push(this)\n            break\n\n          case 4:\n                        // spanning:\n            if (splitresult.front) {\n              let frontnode = this.addChild(splitresult.front)\n              frontnodes.push(frontnode)\n            }\n            if (splitresult.back) {\n              let backnode = this.addChild(splitresult.back)\n              backnodes.push(backnode)\n            }\n            break\n        }\n      }\n    }\n  },\n\n    // PRIVATE methods from here:\n    // add child to a node\n    // this should be called whenever the polygon is split\n    // a child should be created for every fragment of the split polygon\n    // returns the newly created child\n  addChild: function (polygon) {\n    let newchild = new PolygonTreeNode()\n    newchild.parent = this\n    newchild.polygon = polygon\n    this.children.push(newchild)\n    return newchild\n  },\n\n  invertSub: function () {\n    let children = [this]\n    let queue = [children]\n    let i, j, l, node\n    for (i = 0; i < queue.length; i++) {\n      children = queue[i]\n      for (j = 0, l = children.length; j < l; j++) {\n        node = children[j]\n        if (node.polygon) {\n          node.polygon = node.polygon.flipped()\n        }\n        queue.push(node.children)\n      }\n    }\n  },\n\n  recursivelyInvalidatePolygon: function () {\n    let node = this\n    while (node.polygon) {\n      node.polygon = null\n      if (node.parent) {\n        node = node.parent\n      }\n    }\n  }\n}\n\n// # class Tree\n// This is the root of a BSP tree\n// We are using this separate class for the root of the tree, to hold the PolygonTreeNode root\n// The actual tree is kept in this.rootnode\nconst Tree = function (polygons) {\n  this.polygonTree = new PolygonTreeNode()\n  this.rootnode = new Node(null)\n  if (polygons) this.addPolygons(polygons)\n}\n\nTree.prototype = {\n  invert: function () {\n    this.polygonTree.invert()\n    this.rootnode.invert()\n  },\n\n    // Remove all polygons in this BSP tree that are inside the other BSP tree\n    // `tree`.\n  clipTo: function (tree, alsoRemovecoplanarFront) {\n    alsoRemovecoplanarFront = !!alsoRemovecoplanarFront\n    this.rootnode.clipTo(tree, alsoRemovecoplanarFront)\n  },\n\n  allPolygons: function () {\n    let result = []\n    this.polygonTree.getPolygons(result)\n    return result\n  },\n\n  addPolygons: function (polygons) {\n    let _this = this\n    let polygontreenodes = polygons.map(function (p) {\n      return _this.polygonTree.addChild(p)\n    })\n    this.rootnode.addPolygonTreeNodes(polygontreenodes)\n  }\n}\n\n// # class Node\n// Holds a node in a BSP tree. A BSP tree is built from a collection of polygons\n// by picking a polygon to split along.\n// Polygons are not stored directly in the tree, but in PolygonTreeNodes, stored in\n// this.polygontreenodes. Those PolygonTreeNodes are children of the owning\n// Tree.polygonTree\n// This is not a leafy BSP tree since there is\n// no distinction between internal and leaf nodes.\nconst Node = function (parent) {\n  this.plane = null\n  this.front = null\n  this.back = null\n  this.polygontreenodes = []\n  this.parent = parent\n}\n\nNode.prototype = {\n    // Convert solid space to empty space and empty space to solid space.\n  invert: function () {\n    let queue = [this]\n    let node\n    for (let i = 0; i < queue.length; i++) {\n      node = queue[i]\n      if (node.plane) node.plane = node.plane.flipped()\n      if (node.front) queue.push(node.front)\n      if (node.back) queue.push(node.back)\n      let temp = node.front\n      node.front = node.back\n      node.back = temp\n    }\n  },\n\n    // clip polygontreenodes to our plane\n    // calls remove() for all clipped PolygonTreeNodes\n  clipPolygons: function (polygontreenodes, alsoRemovecoplanarFront) {\n    let args = {'node': this, 'polygontreenodes': polygontreenodes}\n    let node\n    let stack = []\n\n    do {\n      node = args.node\n      polygontreenodes = args.polygontreenodes\n\n            // begin \"function\"\n      if (node.plane) {\n        let backnodes = []\n        let frontnodes = []\n        let coplanarfrontnodes = alsoRemovecoplanarFront ? backnodes : frontnodes\n        let plane = node.plane\n        let numpolygontreenodes = polygontreenodes.length\n        for (let i = 0; i < numpolygontreenodes; i++) {\n          let node1 = polygontreenodes[i]\n          if (!node1.isRemoved()) {\n            node1.splitByPlane(plane, coplanarfrontnodes, backnodes, frontnodes, backnodes)\n          }\n        }\n\n        if (node.front && (frontnodes.length > 0)) {\n          stack.push({'node': node.front, 'polygontreenodes': frontnodes})\n        }\n        let numbacknodes = backnodes.length\n        if (node.back && (numbacknodes > 0)) {\n          stack.push({'node': node.back, 'polygontreenodes': backnodes})\n        } else {\n                    // there's nothing behind this plane. Delete the nodes behind this plane:\n          for (let i = 0; i < numbacknodes; i++) {\n            backnodes[i].remove()\n          }\n        }\n      }\n      args = stack.pop()\n    } while (typeof (args) !== 'undefined')\n  },\n\n    // Remove all polygons in this BSP tree that are inside the other BSP tree\n    // `tree`.\n  clipTo: function (tree, alsoRemovecoplanarFront) {\n    let node = this\n    let stack = []\n    do {\n      if (node.polygontreenodes.length > 0) {\n        tree.rootnode.clipPolygons(node.polygontreenodes, alsoRemovecoplanarFront)\n      }\n      if (node.front) stack.push(node.front)\n      if (node.back) stack.push(node.back)\n      node = stack.pop()\n    } while (typeof (node) !== 'undefined')\n  },\n\n  addPolygonTreeNodes: function (polygontreenodes) {\n    let args = {'node': this, 'polygontreenodes': polygontreenodes}\n    let node\n    let stack = []\n    do {\n      node = args.node\n      polygontreenodes = args.polygontreenodes\n\n      if (polygontreenodes.length === 0) {\n        args = stack.pop()\n        continue\n      }\n      let _this = node\n      if (!node.plane) {\n        let bestplane = polygontreenodes[0].getPolygon().plane\n        node.plane = bestplane\n      }\n      let frontnodes = []\n      let backnodes = []\n\n      for (let i = 0, n = polygontreenodes.length; i < n; ++i) {\n        polygontreenodes[i].splitByPlane(_this.plane, _this.polygontreenodes, backnodes, frontnodes, backnodes)\n      }\n\n      if (frontnodes.length > 0) {\n        if (!node.front) node.front = new Node(node)\n        stack.push({'node': node.front, 'polygontreenodes': frontnodes})\n      }\n      if (backnodes.length > 0) {\n        if (!node.back) node.back = new Node(node)\n        stack.push({'node': node.back, 'polygontreenodes': backnodes})\n      }\n\n      args = stack.pop()\n    } while (typeof (args) !== 'undefined')\n  },\n\n  getParentPlaneNormals: function (normals, maxdepth) {\n    if (maxdepth > 0) {\n      if (this.parent) {\n        normals.push(this.parent.plane.normal)\n        this.parent.getParentPlaneNormals(normals, maxdepth - 1)\n      }\n    }\n  }\n}\n\nmodule.exports = Tree\n"},"lineCount":510}},"error":null,"hash":"abc7753c5f78740c0447354d0985a5ca","cacheData":{"env":{}}}