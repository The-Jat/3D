{"id":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","dependencies":[{"name":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\package.json","includedInParent":true,"mtime":1695872748353},{"name":"../constants","loc":{"line":1,"column":22,"index":22},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\reTesselateCoplanarPolygons.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\constants.js"},{"name":"./OrthoNormalBasis","loc":{"line":2,"column":33,"index":71},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\reTesselateCoplanarPolygons.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\OrthoNormalBasis.js"},{"name":"../utils","loc":{"line":3,"column":77,"index":170},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\reTesselateCoplanarPolygons.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\utils.js"},{"name":"./Vertex3","loc":{"line":4,"column":23,"index":205},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\reTesselateCoplanarPolygons.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Vertex3.js"},{"name":"./Vector2","loc":{"line":5,"column":25,"index":243},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\reTesselateCoplanarPolygons.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Vector2.js"},{"name":"./Line2","loc":{"line":6,"column":23,"index":279},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\reTesselateCoplanarPolygons.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Line2.js"},{"name":"./Polygon3","loc":{"line":7,"column":24,"index":314},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\reTesselateCoplanarPolygons.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\csg\\src\\core\\math\\Polygon3.js"}],"generated":{"js":"const {EPS} = require('../constants')\nconst OrthoNormalBasis = require('./OrthoNormalBasis')\nconst {interpolateBetween2DPointsForY, insertSorted, fnNumberSort} = require('../utils')\nconst Vertex = require('./Vertex3')\nconst Vector2D = require('./Vector2')\nconst Line2D = require('./Line2')\nconst Polygon = require('./Polygon3')\n\n// Retesselation function for a set of coplanar polygons. See the introduction at the top of\n// this file.\nconst reTesselateCoplanarPolygons = function (sourcepolygons, destpolygons) {\n  let numpolygons = sourcepolygons.length\n  if (numpolygons > 0) {\n    let plane = sourcepolygons[0].plane\n    let shared = sourcepolygons[0].shared\n    let orthobasis = new OrthoNormalBasis(plane)\n    let polygonvertices2d = [] // array of array of Vector2D\n    let polygontopvertexindexes = [] // array of indexes of topmost vertex per polygon\n    let topy2polygonindexes = {}\n    let ycoordinatetopolygonindexes = {}\n\n    let xcoordinatebins = {}\n    let ycoordinatebins = {}\n\n        // convert all polygon vertices to 2D\n        // Make a list of all encountered y coordinates\n        // And build a map of all polygons that have a vertex at a certain y coordinate:\n    let ycoordinateBinningFactor = 1.0 / EPS * 10\n    for (let polygonindex = 0; polygonindex < numpolygons; polygonindex++) {\n      let poly3d = sourcepolygons[polygonindex]\n      let vertices2d = []\n      let numvertices = poly3d.vertices.length\n      let minindex = -1\n      if (numvertices > 0) {\n        let miny, maxy, maxindex\n        for (let i = 0; i < numvertices; i++) {\n          let pos2d = orthobasis.to2D(poly3d.vertices[i].pos)\n                    // perform binning of y coordinates: If we have multiple vertices very\n                    // close to each other, give them the same y coordinate:\n          let ycoordinatebin = Math.floor(pos2d.y * ycoordinateBinningFactor)\n          let newy\n          if (ycoordinatebin in ycoordinatebins) {\n            newy = ycoordinatebins[ycoordinatebin]\n          } else if (ycoordinatebin + 1 in ycoordinatebins) {\n            newy = ycoordinatebins[ycoordinatebin + 1]\n          } else if (ycoordinatebin - 1 in ycoordinatebins) {\n            newy = ycoordinatebins[ycoordinatebin - 1]\n          } else {\n            newy = pos2d.y\n            ycoordinatebins[ycoordinatebin] = pos2d.y\n          }\n          pos2d = Vector2D.Create(pos2d.x, newy)\n          vertices2d.push(pos2d)\n          let y = pos2d.y\n          if ((i === 0) || (y < miny)) {\n            miny = y\n            minindex = i\n          }\n          if ((i === 0) || (y > maxy)) {\n            maxy = y\n            maxindex = i\n          }\n          if (!(y in ycoordinatetopolygonindexes)) {\n            ycoordinatetopolygonindexes[y] = {}\n          }\n          ycoordinatetopolygonindexes[y][polygonindex] = true\n        }\n        if (miny >= maxy) {\n                    // degenerate polygon, all vertices have same y coordinate. Just ignore it from now:\n          vertices2d = []\n          numvertices = 0\n          minindex = -1\n        } else {\n          if (!(miny in topy2polygonindexes)) {\n            topy2polygonindexes[miny] = []\n          }\n          topy2polygonindexes[miny].push(polygonindex)\n        }\n      } // if(numvertices > 0)\n            // reverse the vertex order:\n      vertices2d.reverse()\n      minindex = numvertices - minindex - 1\n      polygonvertices2d.push(vertices2d)\n      polygontopvertexindexes.push(minindex)\n    }\n    let ycoordinates = []\n    for (let ycoordinate in ycoordinatetopolygonindexes) ycoordinates.push(ycoordinate)\n    ycoordinates.sort(fnNumberSort)\n\n        // Now we will iterate over all y coordinates, from lowest to highest y coordinate\n        // activepolygons: source polygons that are 'active', i.e. intersect with our y coordinate\n        //   Is sorted so the polygons are in left to right order\n        // Each element in activepolygons has these properties:\n        //        polygonindex: the index of the source polygon (i.e. an index into the sourcepolygons\n        //                      and polygonvertices2d arrays)\n        //        leftvertexindex: the index of the vertex at the left side of the polygon (lowest x)\n        //                         that is at or just above the current y coordinate\n        //        rightvertexindex: dito at right hand side of polygon\n        //        topleft, bottomleft: coordinates of the left side of the polygon crossing the current y coordinate\n        //        topright, bottomright: coordinates of the right hand side of the polygon crossing the current y coordinate\n    let activepolygons = []\n    let prevoutpolygonrow = []\n    for (let yindex = 0; yindex < ycoordinates.length; yindex++) {\n      let newoutpolygonrow = []\n      let ycoordinate_as_string = ycoordinates[yindex]\n      let ycoordinate = Number(ycoordinate_as_string)\n\n            // update activepolygons for this y coordinate:\n            // - Remove any polygons that end at this y coordinate\n            // - update leftvertexindex and rightvertexindex (which point to the current vertex index\n            //   at the the left and right side of the polygon\n            // Iterate over all polygons that have a corner at this y coordinate:\n      let polygonindexeswithcorner = ycoordinatetopolygonindexes[ycoordinate_as_string]\n      for (let activepolygonindex = 0; activepolygonindex < activepolygons.length; ++activepolygonindex) {\n        let activepolygon = activepolygons[activepolygonindex]\n        let polygonindex = activepolygon.polygonindex\n        if (polygonindexeswithcorner[polygonindex]) {\n                    // this active polygon has a corner at this y coordinate:\n          let vertices2d = polygonvertices2d[polygonindex]\n          let numvertices = vertices2d.length\n          let newleftvertexindex = activepolygon.leftvertexindex\n          let newrightvertexindex = activepolygon.rightvertexindex\n                    // See if we need to increase leftvertexindex or decrease rightvertexindex:\n          while (true) {\n            let nextleftvertexindex = newleftvertexindex + 1\n            if (nextleftvertexindex >= numvertices) nextleftvertexindex = 0\n            if (vertices2d[nextleftvertexindex].y !== ycoordinate) break\n            newleftvertexindex = nextleftvertexindex\n          }\n          let nextrightvertexindex = newrightvertexindex - 1\n          if (nextrightvertexindex < 0) nextrightvertexindex = numvertices - 1\n          if (vertices2d[nextrightvertexindex].y === ycoordinate) {\n            newrightvertexindex = nextrightvertexindex\n          }\n          if ((newleftvertexindex !== activepolygon.leftvertexindex) && (newleftvertexindex === newrightvertexindex)) {\n                        // We have increased leftvertexindex or decreased rightvertexindex, and now they point to the same vertex\n                        // This means that this is the bottom point of the polygon. We'll remove it:\n            activepolygons.splice(activepolygonindex, 1)\n            --activepolygonindex\n          } else {\n            activepolygon.leftvertexindex = newleftvertexindex\n            activepolygon.rightvertexindex = newrightvertexindex\n            activepolygon.topleft = vertices2d[newleftvertexindex]\n            activepolygon.topright = vertices2d[newrightvertexindex]\n            let nextleftvertexindex = newleftvertexindex + 1\n            if (nextleftvertexindex >= numvertices) nextleftvertexindex = 0\n            activepolygon.bottomleft = vertices2d[nextleftvertexindex]\n            let nextrightvertexindex = newrightvertexindex - 1\n            if (nextrightvertexindex < 0) nextrightvertexindex = numvertices - 1\n            activepolygon.bottomright = vertices2d[nextrightvertexindex]\n          }\n        } // if polygon has corner here\n      } // for activepolygonindex\n      let nextycoordinate\n      if (yindex >= ycoordinates.length - 1) {\n                // last row, all polygons must be finished here:\n        activepolygons = []\n        nextycoordinate = null\n      } else // yindex < ycoordinates.length-1\n            {\n        nextycoordinate = Number(ycoordinates[yindex + 1])\n        let middleycoordinate = 0.5 * (ycoordinate + nextycoordinate)\n                // update activepolygons by adding any polygons that start here:\n        let startingpolygonindexes = topy2polygonindexes[ycoordinate_as_string]\n        for (let polygonindex_key in startingpolygonindexes) {\n          let polygonindex = startingpolygonindexes[polygonindex_key]\n          let vertices2d = polygonvertices2d[polygonindex]\n          let numvertices = vertices2d.length\n          let topvertexindex = polygontopvertexindexes[polygonindex]\n                    // the top of the polygon may be a horizontal line. In that case topvertexindex can point to any point on this line.\n                    // Find the left and right topmost vertices which have the current y coordinate:\n          let topleftvertexindex = topvertexindex\n          while (true) {\n            let i = topleftvertexindex + 1\n            if (i >= numvertices) i = 0\n            if (vertices2d[i].y !== ycoordinate) break\n            if (i === topvertexindex) break // should not happen, but just to prevent endless loops\n            topleftvertexindex = i\n          }\n          let toprightvertexindex = topvertexindex\n          while (true) {\n            let i = toprightvertexindex - 1\n            if (i < 0) i = numvertices - 1\n            if (vertices2d[i].y !== ycoordinate) break\n            if (i === topleftvertexindex) break // should not happen, but just to prevent endless loops\n            toprightvertexindex = i\n          }\n          let nextleftvertexindex = topleftvertexindex + 1\n          if (nextleftvertexindex >= numvertices) nextleftvertexindex = 0\n          let nextrightvertexindex = toprightvertexindex - 1\n          if (nextrightvertexindex < 0) nextrightvertexindex = numvertices - 1\n          let newactivepolygon = {\n            polygonindex: polygonindex,\n            leftvertexindex: topleftvertexindex,\n            rightvertexindex: toprightvertexindex,\n            topleft: vertices2d[topleftvertexindex],\n            topright: vertices2d[toprightvertexindex],\n            bottomleft: vertices2d[nextleftvertexindex],\n            bottomright: vertices2d[nextrightvertexindex]\n          }\n          insertSorted(activepolygons, newactivepolygon, function (el1, el2) {\n            let x1 = interpolateBetween2DPointsForY(\n                            el1.topleft, el1.bottomleft, middleycoordinate)\n            let x2 = interpolateBetween2DPointsForY(\n                            el2.topleft, el2.bottomleft, middleycoordinate)\n            if (x1 > x2) return 1\n            if (x1 < x2) return -1\n            return 0\n          })\n        } // for(let polygonindex in startingpolygonindexes)\n      } //  yindex < ycoordinates.length-1\n            // if( (yindex === ycoordinates.length-1) || (nextycoordinate - ycoordinate > EPS) )\n      if (true) {\n        // Now activepolygons is up to date\n        // Build the output polygons for the next row in newoutpolygonrow:\n        for (let activepolygonKey in activepolygons) {\n          let activepolygon = activepolygons[activepolygonKey]\n          let polygonindex = activepolygon.polygonindex\n          let vertices2d = polygonvertices2d[polygonindex]\n          let numvertices = vertices2d.length\n\n          let x = interpolateBetween2DPointsForY(activepolygon.topleft, activepolygon.bottomleft, ycoordinate)\n          let topleft = Vector2D.Create(x, ycoordinate)\n          x = interpolateBetween2DPointsForY(activepolygon.topright, activepolygon.bottomright, ycoordinate)\n          let topright = Vector2D.Create(x, ycoordinate)\n          x = interpolateBetween2DPointsForY(activepolygon.topleft, activepolygon.bottomleft, nextycoordinate)\n          let bottomleft = Vector2D.Create(x, nextycoordinate)\n          x = interpolateBetween2DPointsForY(activepolygon.topright, activepolygon.bottomright, nextycoordinate)\n          let bottomright = Vector2D.Create(x, nextycoordinate)\n          let outpolygon = {\n            topleft: topleft,\n            topright: topright,\n            bottomleft: bottomleft,\n            bottomright: bottomright,\n            leftline: Line2D.fromPoints(topleft, bottomleft),\n            rightline: Line2D.fromPoints(bottomright, topright)\n          }\n          if (newoutpolygonrow.length > 0) {\n            let prevoutpolygon = newoutpolygonrow[newoutpolygonrow.length - 1]\n            let d1 = outpolygon.topleft.distanceTo(prevoutpolygon.topright)\n            let d2 = outpolygon.bottomleft.distanceTo(prevoutpolygon.bottomright)\n            if ((d1 < EPS) && (d2 < EPS)) {\n                            // we can join this polygon with the one to the left:\n              outpolygon.topleft = prevoutpolygon.topleft\n              outpolygon.leftline = prevoutpolygon.leftline\n              outpolygon.bottomleft = prevoutpolygon.bottomleft\n              newoutpolygonrow.splice(newoutpolygonrow.length - 1, 1)\n            }\n          }\n          newoutpolygonrow.push(outpolygon)\n        } // for(activepolygon in activepolygons)\n        if (yindex > 0) {\n                    // try to match the new polygons against the previous row:\n          let prevcontinuedindexes = {}\n          let matchedindexes = {}\n          for (let i = 0; i < newoutpolygonrow.length; i++) {\n            let thispolygon = newoutpolygonrow[i]\n            for (let ii = 0; ii < prevoutpolygonrow.length; ii++) {\n              if (!matchedindexes[ii]) // not already processed?\n                            {\n                                // We have a match if the sidelines are equal or if the top coordinates\n                                // are on the sidelines of the previous polygon\n                let prevpolygon = prevoutpolygonrow[ii]\n                if (prevpolygon.bottomleft.distanceTo(thispolygon.topleft) < EPS) {\n                  if (prevpolygon.bottomright.distanceTo(thispolygon.topright) < EPS) {\n                                        // Yes, the top of this polygon matches the bottom of the previous:\n                    matchedindexes[ii] = true\n                                        // Now check if the joined polygon would remain convex:\n                    let d1 = thispolygon.leftline.direction().x - prevpolygon.leftline.direction().x\n                    let d2 = thispolygon.rightline.direction().x - prevpolygon.rightline.direction().x\n                    let leftlinecontinues = Math.abs(d1) < EPS\n                    let rightlinecontinues = Math.abs(d2) < EPS\n                    let leftlineisconvex = leftlinecontinues || (d1 >= 0)\n                    let rightlineisconvex = rightlinecontinues || (d2 >= 0)\n                    if (leftlineisconvex && rightlineisconvex) {\n                                            // yes, both sides have convex corners:\n                                            // This polygon will continue the previous polygon\n                      thispolygon.outpolygon = prevpolygon.outpolygon\n                      thispolygon.leftlinecontinues = leftlinecontinues\n                      thispolygon.rightlinecontinues = rightlinecontinues\n                      prevcontinuedindexes[ii] = true\n                    }\n                    break\n                  }\n                }\n              } // if(!prevcontinuedindexes[ii])\n            } // for ii\n          } // for i\n          for (let ii = 0; ii < prevoutpolygonrow.length; ii++) {\n            if (!prevcontinuedindexes[ii]) {\n                            // polygon ends here\n                            // Finish the polygon with the last point(s):\n              let prevpolygon = prevoutpolygonrow[ii]\n              prevpolygon.outpolygon.rightpoints.push(prevpolygon.bottomright)\n              if (prevpolygon.bottomright.distanceTo(prevpolygon.bottomleft) > EPS) {\n                                // polygon ends with a horizontal line:\n                prevpolygon.outpolygon.leftpoints.push(prevpolygon.bottomleft)\n              }\n                            // reverse the left half so we get a counterclockwise circle:\n              prevpolygon.outpolygon.leftpoints.reverse()\n              let points2d = prevpolygon.outpolygon.rightpoints.concat(prevpolygon.outpolygon.leftpoints)\n              let vertices3d = []\n              points2d.map(function (point2d) {\n                let point3d = orthobasis.to3D(point2d)\n                let vertex3d = new Vertex(point3d)\n                vertices3d.push(vertex3d)\n              })\n              let polygon = new Polygon(vertices3d, shared, plane)\n              destpolygons.push(polygon)\n            }\n          }\n        } // if(yindex > 0)\n        for (let i = 0; i < newoutpolygonrow.length; i++) {\n          let thispolygon = newoutpolygonrow[i]\n          if (!thispolygon.outpolygon) {\n                        // polygon starts here:\n            thispolygon.outpolygon = {\n              leftpoints: [],\n              rightpoints: []\n            }\n            thispolygon.outpolygon.leftpoints.push(thispolygon.topleft)\n            if (thispolygon.topleft.distanceTo(thispolygon.topright) > EPS) {\n                            // we have a horizontal line at the top:\n              thispolygon.outpolygon.rightpoints.push(thispolygon.topright)\n            }\n          } else {\n                        // continuation of a previous row\n            if (!thispolygon.leftlinecontinues) {\n              thispolygon.outpolygon.leftpoints.push(thispolygon.topleft)\n            }\n            if (!thispolygon.rightlinecontinues) {\n              thispolygon.outpolygon.rightpoints.push(thispolygon.topright)\n            }\n          }\n        }\n        prevoutpolygonrow = newoutpolygonrow\n      }\n    } // for yindex\n  } // if(numpolygons > 0)\n}\n\nmodule.exports = reTesselateCoplanarPolygons\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}}],"sources":{"node_modules/@jscad/csg/src/core/math/reTesselateCoplanarPolygons.js":"const {EPS} = require('../constants')\nconst OrthoNormalBasis = require('./OrthoNormalBasis')\nconst {interpolateBetween2DPointsForY, insertSorted, fnNumberSort} = require('../utils')\nconst Vertex = require('./Vertex3')\nconst Vector2D = require('./Vector2')\nconst Line2D = require('./Line2')\nconst Polygon = require('./Polygon3')\n\n// Retesselation function for a set of coplanar polygons. See the introduction at the top of\n// this file.\nconst reTesselateCoplanarPolygons = function (sourcepolygons, destpolygons) {\n  let numpolygons = sourcepolygons.length\n  if (numpolygons > 0) {\n    let plane = sourcepolygons[0].plane\n    let shared = sourcepolygons[0].shared\n    let orthobasis = new OrthoNormalBasis(plane)\n    let polygonvertices2d = [] // array of array of Vector2D\n    let polygontopvertexindexes = [] // array of indexes of topmost vertex per polygon\n    let topy2polygonindexes = {}\n    let ycoordinatetopolygonindexes = {}\n\n    let xcoordinatebins = {}\n    let ycoordinatebins = {}\n\n        // convert all polygon vertices to 2D\n        // Make a list of all encountered y coordinates\n        // And build a map of all polygons that have a vertex at a certain y coordinate:\n    let ycoordinateBinningFactor = 1.0 / EPS * 10\n    for (let polygonindex = 0; polygonindex < numpolygons; polygonindex++) {\n      let poly3d = sourcepolygons[polygonindex]\n      let vertices2d = []\n      let numvertices = poly3d.vertices.length\n      let minindex = -1\n      if (numvertices > 0) {\n        let miny, maxy, maxindex\n        for (let i = 0; i < numvertices; i++) {\n          let pos2d = orthobasis.to2D(poly3d.vertices[i].pos)\n                    // perform binning of y coordinates: If we have multiple vertices very\n                    // close to each other, give them the same y coordinate:\n          let ycoordinatebin = Math.floor(pos2d.y * ycoordinateBinningFactor)\n          let newy\n          if (ycoordinatebin in ycoordinatebins) {\n            newy = ycoordinatebins[ycoordinatebin]\n          } else if (ycoordinatebin + 1 in ycoordinatebins) {\n            newy = ycoordinatebins[ycoordinatebin + 1]\n          } else if (ycoordinatebin - 1 in ycoordinatebins) {\n            newy = ycoordinatebins[ycoordinatebin - 1]\n          } else {\n            newy = pos2d.y\n            ycoordinatebins[ycoordinatebin] = pos2d.y\n          }\n          pos2d = Vector2D.Create(pos2d.x, newy)\n          vertices2d.push(pos2d)\n          let y = pos2d.y\n          if ((i === 0) || (y < miny)) {\n            miny = y\n            minindex = i\n          }\n          if ((i === 0) || (y > maxy)) {\n            maxy = y\n            maxindex = i\n          }\n          if (!(y in ycoordinatetopolygonindexes)) {\n            ycoordinatetopolygonindexes[y] = {}\n          }\n          ycoordinatetopolygonindexes[y][polygonindex] = true\n        }\n        if (miny >= maxy) {\n                    // degenerate polygon, all vertices have same y coordinate. Just ignore it from now:\n          vertices2d = []\n          numvertices = 0\n          minindex = -1\n        } else {\n          if (!(miny in topy2polygonindexes)) {\n            topy2polygonindexes[miny] = []\n          }\n          topy2polygonindexes[miny].push(polygonindex)\n        }\n      } // if(numvertices > 0)\n            // reverse the vertex order:\n      vertices2d.reverse()\n      minindex = numvertices - minindex - 1\n      polygonvertices2d.push(vertices2d)\n      polygontopvertexindexes.push(minindex)\n    }\n    let ycoordinates = []\n    for (let ycoordinate in ycoordinatetopolygonindexes) ycoordinates.push(ycoordinate)\n    ycoordinates.sort(fnNumberSort)\n\n        // Now we will iterate over all y coordinates, from lowest to highest y coordinate\n        // activepolygons: source polygons that are 'active', i.e. intersect with our y coordinate\n        //   Is sorted so the polygons are in left to right order\n        // Each element in activepolygons has these properties:\n        //        polygonindex: the index of the source polygon (i.e. an index into the sourcepolygons\n        //                      and polygonvertices2d arrays)\n        //        leftvertexindex: the index of the vertex at the left side of the polygon (lowest x)\n        //                         that is at or just above the current y coordinate\n        //        rightvertexindex: dito at right hand side of polygon\n        //        topleft, bottomleft: coordinates of the left side of the polygon crossing the current y coordinate\n        //        topright, bottomright: coordinates of the right hand side of the polygon crossing the current y coordinate\n    let activepolygons = []\n    let prevoutpolygonrow = []\n    for (let yindex = 0; yindex < ycoordinates.length; yindex++) {\n      let newoutpolygonrow = []\n      let ycoordinate_as_string = ycoordinates[yindex]\n      let ycoordinate = Number(ycoordinate_as_string)\n\n            // update activepolygons for this y coordinate:\n            // - Remove any polygons that end at this y coordinate\n            // - update leftvertexindex and rightvertexindex (which point to the current vertex index\n            //   at the the left and right side of the polygon\n            // Iterate over all polygons that have a corner at this y coordinate:\n      let polygonindexeswithcorner = ycoordinatetopolygonindexes[ycoordinate_as_string]\n      for (let activepolygonindex = 0; activepolygonindex < activepolygons.length; ++activepolygonindex) {\n        let activepolygon = activepolygons[activepolygonindex]\n        let polygonindex = activepolygon.polygonindex\n        if (polygonindexeswithcorner[polygonindex]) {\n                    // this active polygon has a corner at this y coordinate:\n          let vertices2d = polygonvertices2d[polygonindex]\n          let numvertices = vertices2d.length\n          let newleftvertexindex = activepolygon.leftvertexindex\n          let newrightvertexindex = activepolygon.rightvertexindex\n                    // See if we need to increase leftvertexindex or decrease rightvertexindex:\n          while (true) {\n            let nextleftvertexindex = newleftvertexindex + 1\n            if (nextleftvertexindex >= numvertices) nextleftvertexindex = 0\n            if (vertices2d[nextleftvertexindex].y !== ycoordinate) break\n            newleftvertexindex = nextleftvertexindex\n          }\n          let nextrightvertexindex = newrightvertexindex - 1\n          if (nextrightvertexindex < 0) nextrightvertexindex = numvertices - 1\n          if (vertices2d[nextrightvertexindex].y === ycoordinate) {\n            newrightvertexindex = nextrightvertexindex\n          }\n          if ((newleftvertexindex !== activepolygon.leftvertexindex) && (newleftvertexindex === newrightvertexindex)) {\n                        // We have increased leftvertexindex or decreased rightvertexindex, and now they point to the same vertex\n                        // This means that this is the bottom point of the polygon. We'll remove it:\n            activepolygons.splice(activepolygonindex, 1)\n            --activepolygonindex\n          } else {\n            activepolygon.leftvertexindex = newleftvertexindex\n            activepolygon.rightvertexindex = newrightvertexindex\n            activepolygon.topleft = vertices2d[newleftvertexindex]\n            activepolygon.topright = vertices2d[newrightvertexindex]\n            let nextleftvertexindex = newleftvertexindex + 1\n            if (nextleftvertexindex >= numvertices) nextleftvertexindex = 0\n            activepolygon.bottomleft = vertices2d[nextleftvertexindex]\n            let nextrightvertexindex = newrightvertexindex - 1\n            if (nextrightvertexindex < 0) nextrightvertexindex = numvertices - 1\n            activepolygon.bottomright = vertices2d[nextrightvertexindex]\n          }\n        } // if polygon has corner here\n      } // for activepolygonindex\n      let nextycoordinate\n      if (yindex >= ycoordinates.length - 1) {\n                // last row, all polygons must be finished here:\n        activepolygons = []\n        nextycoordinate = null\n      } else // yindex < ycoordinates.length-1\n            {\n        nextycoordinate = Number(ycoordinates[yindex + 1])\n        let middleycoordinate = 0.5 * (ycoordinate + nextycoordinate)\n                // update activepolygons by adding any polygons that start here:\n        let startingpolygonindexes = topy2polygonindexes[ycoordinate_as_string]\n        for (let polygonindex_key in startingpolygonindexes) {\n          let polygonindex = startingpolygonindexes[polygonindex_key]\n          let vertices2d = polygonvertices2d[polygonindex]\n          let numvertices = vertices2d.length\n          let topvertexindex = polygontopvertexindexes[polygonindex]\n                    // the top of the polygon may be a horizontal line. In that case topvertexindex can point to any point on this line.\n                    // Find the left and right topmost vertices which have the current y coordinate:\n          let topleftvertexindex = topvertexindex\n          while (true) {\n            let i = topleftvertexindex + 1\n            if (i >= numvertices) i = 0\n            if (vertices2d[i].y !== ycoordinate) break\n            if (i === topvertexindex) break // should not happen, but just to prevent endless loops\n            topleftvertexindex = i\n          }\n          let toprightvertexindex = topvertexindex\n          while (true) {\n            let i = toprightvertexindex - 1\n            if (i < 0) i = numvertices - 1\n            if (vertices2d[i].y !== ycoordinate) break\n            if (i === topleftvertexindex) break // should not happen, but just to prevent endless loops\n            toprightvertexindex = i\n          }\n          let nextleftvertexindex = topleftvertexindex + 1\n          if (nextleftvertexindex >= numvertices) nextleftvertexindex = 0\n          let nextrightvertexindex = toprightvertexindex - 1\n          if (nextrightvertexindex < 0) nextrightvertexindex = numvertices - 1\n          let newactivepolygon = {\n            polygonindex: polygonindex,\n            leftvertexindex: topleftvertexindex,\n            rightvertexindex: toprightvertexindex,\n            topleft: vertices2d[topleftvertexindex],\n            topright: vertices2d[toprightvertexindex],\n            bottomleft: vertices2d[nextleftvertexindex],\n            bottomright: vertices2d[nextrightvertexindex]\n          }\n          insertSorted(activepolygons, newactivepolygon, function (el1, el2) {\n            let x1 = interpolateBetween2DPointsForY(\n                            el1.topleft, el1.bottomleft, middleycoordinate)\n            let x2 = interpolateBetween2DPointsForY(\n                            el2.topleft, el2.bottomleft, middleycoordinate)\n            if (x1 > x2) return 1\n            if (x1 < x2) return -1\n            return 0\n          })\n        } // for(let polygonindex in startingpolygonindexes)\n      } //  yindex < ycoordinates.length-1\n            // if( (yindex === ycoordinates.length-1) || (nextycoordinate - ycoordinate > EPS) )\n      if (true) {\n        // Now activepolygons is up to date\n        // Build the output polygons for the next row in newoutpolygonrow:\n        for (let activepolygonKey in activepolygons) {\n          let activepolygon = activepolygons[activepolygonKey]\n          let polygonindex = activepolygon.polygonindex\n          let vertices2d = polygonvertices2d[polygonindex]\n          let numvertices = vertices2d.length\n\n          let x = interpolateBetween2DPointsForY(activepolygon.topleft, activepolygon.bottomleft, ycoordinate)\n          let topleft = Vector2D.Create(x, ycoordinate)\n          x = interpolateBetween2DPointsForY(activepolygon.topright, activepolygon.bottomright, ycoordinate)\n          let topright = Vector2D.Create(x, ycoordinate)\n          x = interpolateBetween2DPointsForY(activepolygon.topleft, activepolygon.bottomleft, nextycoordinate)\n          let bottomleft = Vector2D.Create(x, nextycoordinate)\n          x = interpolateBetween2DPointsForY(activepolygon.topright, activepolygon.bottomright, nextycoordinate)\n          let bottomright = Vector2D.Create(x, nextycoordinate)\n          let outpolygon = {\n            topleft: topleft,\n            topright: topright,\n            bottomleft: bottomleft,\n            bottomright: bottomright,\n            leftline: Line2D.fromPoints(topleft, bottomleft),\n            rightline: Line2D.fromPoints(bottomright, topright)\n          }\n          if (newoutpolygonrow.length > 0) {\n            let prevoutpolygon = newoutpolygonrow[newoutpolygonrow.length - 1]\n            let d1 = outpolygon.topleft.distanceTo(prevoutpolygon.topright)\n            let d2 = outpolygon.bottomleft.distanceTo(prevoutpolygon.bottomright)\n            if ((d1 < EPS) && (d2 < EPS)) {\n                            // we can join this polygon with the one to the left:\n              outpolygon.topleft = prevoutpolygon.topleft\n              outpolygon.leftline = prevoutpolygon.leftline\n              outpolygon.bottomleft = prevoutpolygon.bottomleft\n              newoutpolygonrow.splice(newoutpolygonrow.length - 1, 1)\n            }\n          }\n          newoutpolygonrow.push(outpolygon)\n        } // for(activepolygon in activepolygons)\n        if (yindex > 0) {\n                    // try to match the new polygons against the previous row:\n          let prevcontinuedindexes = {}\n          let matchedindexes = {}\n          for (let i = 0; i < newoutpolygonrow.length; i++) {\n            let thispolygon = newoutpolygonrow[i]\n            for (let ii = 0; ii < prevoutpolygonrow.length; ii++) {\n              if (!matchedindexes[ii]) // not already processed?\n                            {\n                                // We have a match if the sidelines are equal or if the top coordinates\n                                // are on the sidelines of the previous polygon\n                let prevpolygon = prevoutpolygonrow[ii]\n                if (prevpolygon.bottomleft.distanceTo(thispolygon.topleft) < EPS) {\n                  if (prevpolygon.bottomright.distanceTo(thispolygon.topright) < EPS) {\n                                        // Yes, the top of this polygon matches the bottom of the previous:\n                    matchedindexes[ii] = true\n                                        // Now check if the joined polygon would remain convex:\n                    let d1 = thispolygon.leftline.direction().x - prevpolygon.leftline.direction().x\n                    let d2 = thispolygon.rightline.direction().x - prevpolygon.rightline.direction().x\n                    let leftlinecontinues = Math.abs(d1) < EPS\n                    let rightlinecontinues = Math.abs(d2) < EPS\n                    let leftlineisconvex = leftlinecontinues || (d1 >= 0)\n                    let rightlineisconvex = rightlinecontinues || (d2 >= 0)\n                    if (leftlineisconvex && rightlineisconvex) {\n                                            // yes, both sides have convex corners:\n                                            // This polygon will continue the previous polygon\n                      thispolygon.outpolygon = prevpolygon.outpolygon\n                      thispolygon.leftlinecontinues = leftlinecontinues\n                      thispolygon.rightlinecontinues = rightlinecontinues\n                      prevcontinuedindexes[ii] = true\n                    }\n                    break\n                  }\n                }\n              } // if(!prevcontinuedindexes[ii])\n            } // for ii\n          } // for i\n          for (let ii = 0; ii < prevoutpolygonrow.length; ii++) {\n            if (!prevcontinuedindexes[ii]) {\n                            // polygon ends here\n                            // Finish the polygon with the last point(s):\n              let prevpolygon = prevoutpolygonrow[ii]\n              prevpolygon.outpolygon.rightpoints.push(prevpolygon.bottomright)\n              if (prevpolygon.bottomright.distanceTo(prevpolygon.bottomleft) > EPS) {\n                                // polygon ends with a horizontal line:\n                prevpolygon.outpolygon.leftpoints.push(prevpolygon.bottomleft)\n              }\n                            // reverse the left half so we get a counterclockwise circle:\n              prevpolygon.outpolygon.leftpoints.reverse()\n              let points2d = prevpolygon.outpolygon.rightpoints.concat(prevpolygon.outpolygon.leftpoints)\n              let vertices3d = []\n              points2d.map(function (point2d) {\n                let point3d = orthobasis.to3D(point2d)\n                let vertex3d = new Vertex(point3d)\n                vertices3d.push(vertex3d)\n              })\n              let polygon = new Polygon(vertices3d, shared, plane)\n              destpolygons.push(polygon)\n            }\n          }\n        } // if(yindex > 0)\n        for (let i = 0; i < newoutpolygonrow.length; i++) {\n          let thispolygon = newoutpolygonrow[i]\n          if (!thispolygon.outpolygon) {\n                        // polygon starts here:\n            thispolygon.outpolygon = {\n              leftpoints: [],\n              rightpoints: []\n            }\n            thispolygon.outpolygon.leftpoints.push(thispolygon.topleft)\n            if (thispolygon.topleft.distanceTo(thispolygon.topright) > EPS) {\n                            // we have a horizontal line at the top:\n              thispolygon.outpolygon.rightpoints.push(thispolygon.topright)\n            }\n          } else {\n                        // continuation of a previous row\n            if (!thispolygon.leftlinecontinues) {\n              thispolygon.outpolygon.leftpoints.push(thispolygon.topleft)\n            }\n            if (!thispolygon.rightlinecontinues) {\n              thispolygon.outpolygon.rightpoints.push(thispolygon.topright)\n            }\n          }\n        }\n        prevoutpolygonrow = newoutpolygonrow\n      }\n    } // for yindex\n  } // if(numpolygons > 0)\n}\n\nmodule.exports = reTesselateCoplanarPolygons\n"},"lineCount":343}},"error":null,"hash":"b1937bdb00fcc8631b18a6536b2b91a3","cacheData":{"env":{}}}