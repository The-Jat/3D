{"id":"node_modules/@jscad/modeling/src/maths/line2/distanceToPoint.js","dependencies":[{"name":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\package.json","includedInParent":true,"mtime":1695809278048},{"name":"../vec2","loc":{"line":1,"column":21,"index":21},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\maths\\line2\\distanceToPoint.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\maths\\vec2\\index.js"}],"generated":{"js":"const vec2 = require('../vec2')\n\n/**\n * Calculate the distance (positive) between the given point and line.\n *\n * @param {vec2} point the point of reference\n * @param {line2} line the 2D line of reference\n * @return {Number} distance between line and point\n * @alias module:modeling/maths/line2.distanceToPoint\n */\nconst distanceToPoint = (point, line) => {\n  let distance = vec2.dot(point, line)\n  distance = Math.abs(distance - line[2])\n  return distance\n}\n\nmodule.exports = distanceToPoint\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/modeling/src/maths/line2/distanceToPoint.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/line2/distanceToPoint.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/line2/distanceToPoint.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/line2/distanceToPoint.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/line2/distanceToPoint.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/line2/distanceToPoint.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/line2/distanceToPoint.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/line2/distanceToPoint.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/line2/distanceToPoint.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/line2/distanceToPoint.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/line2/distanceToPoint.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/line2/distanceToPoint.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/line2/distanceToPoint.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/line2/distanceToPoint.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/line2/distanceToPoint.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/line2/distanceToPoint.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/line2/distanceToPoint.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/modeling/src/maths/line2/distanceToPoint.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}}],"sources":{"node_modules/@jscad/modeling/src/maths/line2/distanceToPoint.js":"const vec2 = require('../vec2')\n\n/**\n * Calculate the distance (positive) between the given point and line.\n *\n * @param {vec2} point the point of reference\n * @param {line2} line the 2D line of reference\n * @return {Number} distance between line and point\n * @alias module:modeling/maths/line2.distanceToPoint\n */\nconst distanceToPoint = (point, line) => {\n  let distance = vec2.dot(point, line)\n  distance = Math.abs(distance - line[2])\n  return distance\n}\n\nmodule.exports = distanceToPoint\n"},"lineCount":18}},"error":null,"hash":"ff13dec0482489ddb4d3d34745b21d1d","cacheData":{"env":{}}}