{"id":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","dependencies":[{"name":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\package.json","includedInParent":true,"mtime":1695809278048},{"name":"../../utils/flatten","loc":{"line":1,"column":24,"index":24},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\operations\\hulls\\hullPath2.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\utils\\flatten.js"},{"name":"../../maths/vec2","loc":{"line":3,"column":21,"index":69},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\operations\\hulls\\hullPath2.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\maths\\vec2\\index.js"},{"name":"../../geometries/path2","loc":{"line":5,"column":22,"index":112},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\operations\\hulls\\hullPath2.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\geometries\\path2\\index.js"},{"name":"./hullPoints2","loc":{"line":7,"column":28,"index":167},"parent":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\operations\\hulls\\hullPath2.js","resolved":"C:\\Users\\manis\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\operations\\hulls\\hullPoints2.js"}],"generated":{"js":"const flatten = require('../../utils/flatten')\n\nconst vec2 = require('../../maths/vec2')\n\nconst path2 = require('../../geometries/path2')\n\nconst hullPoints2 = require('./hullPoints2')\n\n/*\n * Create a convex hull of the given geometries (path2).\n * @param {...geometries} geometries - list of path2 geometries\n * @returns {path2} new geometry\n */\nconst hullPath2 = (...geometries) => {\n  geometries = flatten(geometries)\n\n  // extract the unique points from the geometries\n  const uniquepoints = []\n  geometries.forEach((geometry) => {\n    const points = path2.toPoints(geometry)\n    points.forEach((point) => {\n      const index = uniquepoints.findIndex((unique) => vec2.equals(unique, point))\n      if (index < 0) uniquepoints.push(point)\n    })\n  })\n\n  const hullpoints = hullPoints2(uniquepoints)\n\n  // assemble a new geometry from the list of points\n  return path2.fromPoints({ closed: true }, hullpoints)\n}\n\nmodule.exports = hullPath2\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}}],"sources":{"node_modules/@jscad/modeling/src/operations/hulls/hullPath2.js":"const flatten = require('../../utils/flatten')\n\nconst vec2 = require('../../maths/vec2')\n\nconst path2 = require('../../geometries/path2')\n\nconst hullPoints2 = require('./hullPoints2')\n\n/*\n * Create a convex hull of the given geometries (path2).\n * @param {...geometries} geometries - list of path2 geometries\n * @returns {path2} new geometry\n */\nconst hullPath2 = (...geometries) => {\n  geometries = flatten(geometries)\n\n  // extract the unique points from the geometries\n  const uniquepoints = []\n  geometries.forEach((geometry) => {\n    const points = path2.toPoints(geometry)\n    points.forEach((point) => {\n      const index = uniquepoints.findIndex((unique) => vec2.equals(unique, point))\n      if (index < 0) uniquepoints.push(point)\n    })\n  })\n\n  const hullpoints = hullPoints2(uniquepoints)\n\n  // assemble a new geometry from the list of points\n  return path2.fromPoints({ closed: true }, hullpoints)\n}\n\nmodule.exports = hullPath2\n"},"lineCount":34}},"error":null,"hash":"a1cf9dddc28585fc80d469285159fd6a","cacheData":{"env":{}}}