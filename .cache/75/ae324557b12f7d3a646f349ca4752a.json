{"id":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","dependencies":[{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\package.json","includedInParent":true,"mtime":1695875987294},{"name":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\package.json","includedInParent":true,"mtime":1695809278048},{"name":"../../maths/vec2","loc":{"line":1,"column":21,"index":21},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\geometries\\path2\\toString.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\maths\\vec2\\index.js"},{"name":"./toPoints","loc":{"line":3,"column":25,"index":67},"parent":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\geometries\\path2\\toString.js","resolved":"D:\\User Profile\\Manish_VES\\Downloads\\jscad-threejs-csg-to-buffer-geometry-conversion\\node_modules\\@jscad\\modeling\\src\\geometries\\path2\\toPoints.js"}],"generated":{"js":"const vec2 = require('../../maths/vec2')\n\nconst toPoints = require('./toPoints')\n\n/**\n * Create a string representing the contents of the given path.\n * @param {path2} geometry - the path\n * @returns {String} a representive string\n * @alias module:modeling/geometries/path2.toString\n *\n * @example\n * console.out(toString(path))\n */\nconst toString = (geometry) => {\n  const points = toPoints(geometry)\n  let result = 'path (' + points.length + ' points, ' + geometry.isClosed + '):\\n[\\n'\n  points.forEach((point) => {\n    result += '  ' + vec2.toString(point) + ',\\n'\n  })\n  result += ']\\n'\n  return result\n}\n\nmodule.exports = toString\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@jscad/modeling/src/geometries/path2/toString.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}}],"sources":{"node_modules/@jscad/modeling/src/geometries/path2/toString.js":"const vec2 = require('../../maths/vec2')\n\nconst toPoints = require('./toPoints')\n\n/**\n * Create a string representing the contents of the given path.\n * @param {path2} geometry - the path\n * @returns {String} a representive string\n * @alias module:modeling/geometries/path2.toString\n *\n * @example\n * console.out(toString(path))\n */\nconst toString = (geometry) => {\n  const points = toPoints(geometry)\n  let result = 'path (' + points.length + ' points, ' + geometry.isClosed + '):\\n[\\n'\n  points.forEach((point) => {\n    result += '  ' + vec2.toString(point) + ',\\n'\n  })\n  result += ']\\n'\n  return result\n}\n\nmodule.exports = toString\n"},"lineCount":25}},"error":null,"hash":"64f5bc1e1179f0982414bdddd256e170","cacheData":{"env":{}}}